import{Register as e,IoNode as t,Binding as o,ChangeQueue as p,EventDispatcher as n,ProtoProperty as r,PropertyInstance as i,Property as l,propertyDecorators as a,IoNodeMixin as c,ProtoChain as s,IoElement as d,nextQueue as u,IoStorageNode as b,IoStorage as v,IoThemeSingleton as g,IoGl as x,IoOverlaySingleton as q}from"./index";var __decorate$6=function(e,t,o,p){var n,r=arguments.length,i=r<3?t:null===p?p=Object.getOwnPropertyDescriptor(t,o):p;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,p);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};let h=class TestIoNode extends t{static get Properties(){return{reactivity:"immediate",prop1:0,prop2:0}}};h=__decorate$6([e],h);class BindingTest{run(){describe("binding.test.ts",(()=>{it("Should initialize with correct default values",(()=>{const e=new h,t=new o(e,"prop1");expect(t.node).to.be.equal(e),expect(t.property).to.be.equal("prop1"),expect(t.targets instanceof Array).to.be.equal(!0),expect(t.targets.length).to.be.equal(0),expect(t.targetProperties instanceof WeakMap).to.be.equal(!0)})),it("Should set source and target properties",(()=>{const e=new h,t=new o(e,"prop1");e.prop1=1,expect(t.value).to.be.equal(1),e.prop1=2,expect(t.value).to.be.equal(2),t.value=3,expect(e.prop1).to.be.equal(3);const p=new h;t.addTarget(p,"prop1"),expect(p.prop1).to.be.equal(3),p.prop1=4,expect(t.value).to.be.equal(4),e.prop1=5})),it("Should add/remove target nodes and properties with `addTarget()` and `removeTarget()`",(()=>{const e=new h,t=new o(e,"prop1"),p=new o(e,"prop2"),n=new h,r=new h;t.addTarget(n,"prop1"),p.addTarget(n,"prop2"),p.addTarget(r,"prop1"),p.addTarget(r,"prop2"),expect(e._eventDispatcher.addedListeners).to.be.eql({"prop1-changed":[[t.onSourceChanged]],"prop2-changed":[[p.onSourceChanged]]}),expect(n._eventDispatcher.addedListeners).to.be.eql({"prop1-changed":[[t.onTargetChanged]],"prop2-changed":[[p.onTargetChanged]]}),expect(r._eventDispatcher.addedListeners).to.be.eql({"prop1-changed":[[p.onTargetChanged]],"prop2-changed":[[p.onTargetChanged]]}),expect(t.targets[0]).to.be.equal(n),expect(t.targets[1]).to.be.equal(void 0),expect(p.targets[0]).to.be.equal(n),expect(p.targets[1]).to.be.equal(r),expect(p.targets[2]).to.be.equal(void 0),expect(n._properties.get("prop1").binding).to.be.equal(t),expect(n._properties.get("prop2").binding).to.be.equal(p),expect(r._properties.get("prop1").binding).to.be.equal(p),expect(r._properties.get("prop2").binding).to.be.equal(p);const i=t.getTargetProperties(n),l=t.getTargetProperties(r);expect(i[0]).to.be.equal("prop1"),expect(i.length).to.be.equal(1),expect(l.length).to.be.equal(0);const a=p.getTargetProperties(n),c=p.getTargetProperties(r);expect(a[0]).to.be.equal("prop2"),expect(a.length).to.be.equal(1),expect(c[0]).to.be.equal("prop1"),expect(c[1]).to.be.equal("prop2"),expect(c.length).to.be.equal(2),p.removeTarget(r,"prop1"),expect(c[0]).to.be.equal("prop2"),expect(c.length).to.be.equal(1),expect(r._properties.get("prop1").binding).to.be.equal(void 0),expect(r._eventDispatcher.addedListeners).to.be.eql({"prop2-changed":[[p.onTargetChanged]]}),p.addTarget(r,"prop1"),expect(c.length).to.be.equal(2),expect(r._properties.get("prop1").binding).to.be.equal(p),p.removeTarget(r),expect(c.length).to.be.equal(0),expect(r._properties.get("prop1").binding).to.be.equal(void 0),expect(r._properties.get("prop2").binding).to.be.equal(void 0),expect(r._eventDispatcher.addedListeners).to.be.eql({})})),it("Should remove existing binding from target if `addTarget()` causes a binding collision",(()=>{const e=new h,t=new o(e,"prop1"),p=new h;t.addTarget(p,"prop1");const n=new h,r=new o(n,"prop1");expect(t.targets).to.be.include(p);let i=t.getTargetProperties(p);expect(i.length).to.be.equal(1),expect(i[0]).to.be.equal("prop1"),r.addTarget(p,"prop1"),expect(t.targets).to.be.eql([]),i=t.getTargetProperties(p),expect(i.length).to.be.equal(0)})),it("Should dispose correctly",(()=>{const e=new h,t=new h,p=new o(e,"prop1");p.addTarget(t,"prop1"),expect(e._eventDispatcher.addedListeners).to.be.eql({"prop1-changed":[[p.onSourceChanged]]}),expect(t._eventDispatcher.addedListeners).to.be.eql({"prop1-changed":[[p.onTargetChanged]]}),p.dispose(),expect(p.node).to.be.equal(void 0),expect(p.property).to.be.equal(void 0),expect(p.targets).to.be.equal(void 0),expect(p.targetProperties).to.be.equal(void 0),expect(t._properties.get("prop1").binding).to.be.equal(void 0),expect(e._eventDispatcher.addedListeners).to.be.eql({}),expect(t._eventDispatcher.addedListeners).to.be.eql({})}))}))}}var __decorate$5=function(e,t,o,p){var n,r=arguments.length,i=r<3?t:null===p?p=Object.getOwnPropertyDescriptor(t,o):p;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,p);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};let f=class MockIoNode extends t{eventStack=[];changeStack=[];prop1Changed(e){this.changeStack.push(`prop1Changed ${e.property} ${e.value} ${e.oldValue}`)}prop2Changed(e){this.changeStack.push(`prop2Changed ${e.property} ${e.value} ${e.oldValue}`)}dispatchEvent(e,t){t&&t.property?this.eventStack.push(`${e} ${t.property} ${t.value} ${t.oldValue}`):this.eventStack.push(`${e}`)}changed(){this.changeStack.push("changed")}};f=__decorate$5([e],f);class ChangeQueueTest{run(){describe("changeQueue.test.ts",(()=>{it("Should initialize with correct default values",(()=>{const e=new f,t=new p(e);expect(t.node).to.be.equal(e),expect(JSON.stringify(t.changes)).to.be.equal("[]"),expect(t.changes.length).to.be.equal(0),expect(t.dispatching).to.be.equal(!1)})),it("Should keep track of changes correctly",(()=>{const e=new f,t=new p(e);t.queue("prop1",1,0),t.queue("prop1",2,1),expect(JSON.stringify(t.changes)).to.be.equal('[{"property":"prop1","value":2,"oldValue":0}]'),t.dispatch(),expect(JSON.stringify(t.changes)).to.be.equal("[]")})),it("Should dispatch change events with correct payloads",(()=>{const e=new f,t=new p(e);t.queue("prop1",1,0),t.queue("prop1",2,1),t.dispatch(),expect(JSON.stringify(e.eventStack)).to.be.equal('["prop1-changed prop1 2 0","object-mutated"]')})),it("Should invoke handler functions with correct payloads",(()=>{const e=new f,t=new p(e);t.queue("prop1",1,0),t.queue("prop1",2,1),t.dispatch(),expect(JSON.stringify(e.changeStack)).to.be.equal('["prop1Changed prop1 2 0","changed"]')})),it("Should handle changes in first-in, first-out (FIFO) order",(()=>{const e=new f,t=new p(e);t.queue("prop1",1,0),t.queue("prop1",3,1),t.queue("prop2",2,0),t.dispatch(),expect(JSON.stringify(e.changeStack)).to.be.equal('["prop1Changed prop1 3 0","prop2Changed prop2 2 0","changed"]'),expect(JSON.stringify(e.eventStack)).to.be.equal('["prop1-changed prop1 3 0","prop2-changed prop2 2 0","object-mutated"]')})),it("Setting new value to the same value as oldValue should not trigger change event",(()=>{const e=new f,t=new p(e);t.queue("prop1",1,0),expect(JSON.stringify(t.changes)).to.be.equal('[{"property":"prop1","value":1,"oldValue":0}]'),t.queue("prop1",0,1),expect(JSON.stringify(t.changes)).to.be.equal("[]"),t.dispatch(),expect(JSON.stringify(e.changeStack)).to.be.equal("[]"),expect(JSON.stringify(e.eventStack)).to.be.equal("[]")})),it("Should skip dispatch if value is same as oldValue",(()=>{const e=new f,t=new p(e);t.queue("prop1",0,0),t.dispatch(),expect(e.changeStack).to.be.eql([]),expect(e.eventStack).to.be.eql([])})),it("Should dispose correctly",(()=>{const e=new f,t=new p(e);t.dispose(),expect(t.node).to.be.equal(void 0),expect(t.changes).to.be.equal(void 0)}))}))}}var __decorate$4=function(e,t,o,p){var n,r=arguments.length,i=r<3?t:null===p?p=Object.getOwnPropertyDescriptor(t,o):p;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,p);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};const handlerFunction=e=>{e.target.eventStack.push(`handlerFunction ${e.detail}`)};let y=class MockIoNode1 extends t{eventStack=[];static get Listeners(){return{event1:"event1Handler"}}event1Handler(e){this.eventStack.push(`event1Handler ${e.detail}`)}};y=__decorate$4([e],y);let w=class MockIoNode2 extends y{eventStack=[];static get Listeners(){return{event2:["event2Handler",{capture:!0}]}}event2Handler(e){this.eventStack.push(`event2Handler ${e.detail}`)}};w=__decorate$4([e],w);let m=class MockIoNode3 extends w{eventStack=[];static get Listeners(){return{event1:"event3Handler",event2:[handlerFunction,{passive:!0}],event3:handlerFunction}}event3Handler(e){this.eventStack.push(`event3Handler ${e.detail}`)}};m=__decorate$4([e],m);class TestDiv extends HTMLElement{eventStack=[];event1Handler(e){this.eventStack.push(`event1Handler ${e.detail}`)}}window.customElements.define("test-div",TestDiv);class EventDispatcherTest{run(){describe("eventDispatcher.test.ts",(()=>{it("Should initialize with correct values",(()=>{const e=new y;let t=new n(e);expect(t.node).to.be.equal(e),expect(t.protoListeners).to.be.eql({event1:[[e.event1Handler]]}),expect(t.propListeners).to.be.eql({}),expect(t.addedListeners).to.be.eql({}),expect(t.nodeIsEventTarget).to.be.eql(!1)})),it("Should initialize listeners from ProtoChain",(()=>{const e=new y;let t=new n(e);expect(t.protoListeners).to.be.eql({event1:[[e.event1Handler]]});const o=new w;t=new n(o),expect(t.protoListeners).to.be.eql({event1:[[e.event1Handler]],event2:[[o.event2Handler,{capture:!0}]]});const p=new m;t=new n(p),expect(t.protoListeners).to.be.eql({event1:[[p.event3Handler]],event2:[[handlerFunction,{passive:!0}]],event3:[[handlerFunction]]})})),it("Should applyPropListeners() correctly",(()=>{const e=new m;let t=new n(e);const handler4=()=>{},handler5=()=>{};t.applyPropListeners({"@event3":"event3Handler","@event4":handler4}),expect(t.propListeners).to.be.eql({event3:[[e.event3Handler]],event4:[[handler4]]}),t.applyPropListeners({"@event5":["event3Handler"],"@event6":[handler4]}),expect(t.propListeners).to.be.eql({event5:[[e.event3Handler]],event6:[[handler4]]}),t.applyPropListeners({"@event7":[e.event3Handler,{capture:!0}],"@event8":[handler5,{capture:!0}]}),expect(t.propListeners).to.be.eql({event7:[[e.event3Handler,{capture:!0}]],event8:[[handler5,{capture:!0}]]}),t.applyPropListeners({}),expect(t.propListeners).to.be.eql({})})),it("Should add/remove listeners correctly",(()=>{const e=new w;let t=new n(e);const listener1=()=>{},listener2=()=>{};t.addEventListener("event1",listener1),t.addEventListener("event1",listener2,{capture:!0}),expect(t.addedListeners).to.be.eql({event1:[[listener1],[listener2,{capture:!0}]]}),t.removeEventListener("event1",listener1),expect(t.addedListeners).to.be.eql({event1:[[listener2,{capture:!0}]]}),t.removeEventListener("event1"),expect(t.addedListeners).to.be.eql({})})),it("Should not add listeners if already added",(()=>{const e=new w;let t=new n(e);const listener1=()=>{},listener2=()=>{};t.addEventListener("event1",listener1),t.addEventListener("event1",listener1),t.addEventListener("event1",listener2,{capture:!0}),expect(t.addedListeners).to.be.eql({event1:[[listener1],[listener2,{capture:!0}]]})})),it("Should remove correct listener",(()=>{const e=new w;let t=new n(e);const listener1=()=>{},listener2=()=>{};t.addEventListener("event1",listener1),t.addEventListener("event1",listener2,{capture:!0}),t.removeEventListener("event1",listener2),expect(t.addedListeners).to.be.eql({event1:[[listener1]]}),t.removeEventListener("event1",listener1),expect(t.addedListeners).to.be.eql({})})),it("Should dispatch added events with correct payloads",(()=>{const e=new m;let t=new n(e);const handler4=e=>{e.target.eventStack.push(`handler4 ${e.detail}`)},handler5=e=>{e.target.eventStack.push(`handler5 ${e.detail}`)};t.applyPropListeners({"@event3":"event3Handler","@event4":handler4}),t.addEventListener("event5",handler5),t.dispatchEvent("event1",1),t.dispatchEvent("event2",2),t.dispatchEvent("event3",3),t.dispatchEvent("event4",4),t.dispatchEvent("event5",5),expect(e.eventStack).to.be.eql(["event3Handler 1","handlerFunction 2","handlerFunction 3","event3Handler 3","handler4 4","handler5 5"]),e.eventStack=[],t.applyPropListeners({"@event4":handler4}),t.removeEventListener("event5",handler5),t.dispatchEvent("event1",1),t.dispatchEvent("event2",2),t.dispatchEvent("event3",3),t.dispatchEvent("event4",4),t.dispatchEvent("event5",5),expect(e.eventStack).to.be.eql(["event3Handler 1","handlerFunction 2","handlerFunction 3","handler4 4"])})),it("Should add/remove/dispatch events on HTML elements",(()=>{const e=document.createElement("test-div"),t=new n(e),handler3=e=>{e.target.eventStack.push(`handler3 ${e.detail}`)};t.applyPropListeners({"@event1":"event1Handler","@event2":e=>{e.target.eventStack.push(`handler2 ${e.detail}`)}}),t.addEventListener("event3",handler3),e.dispatchEvent(new CustomEvent("event1",{detail:1})),e.dispatchEvent(new CustomEvent("event2",{detail:2})),e.dispatchEvent(new CustomEvent("event3",{detail:3})),expect(e.eventStack).to.be.eql(["event1Handler 1","handler2 2","handler3 3"]),e.eventStack=[],t.applyPropListeners({}),t.removeEventListener("event3",handler3),e.dispatchEvent(new CustomEvent("event1",{detail:1})),e.dispatchEvent(new CustomEvent("event2",{detail:2})),e.dispatchEvent(new CustomEvent("event3",{detail:3})),expect(e.eventStack).to.be.eql([])})),it("Should bubble events if specified",(()=>{const e=document.createElement("test-div");e.id="element";const t=document.createElement("test-div");t.id="parentElement",t.appendChild(e);const o=new n(e),p=new n(t),handler2=function(e){this.eventStack.push(`handler2 ${e.detail}`)};o.applyPropListeners({"@event1":"event1Handler"}),o.addEventListener("event2",handler2.bind(e)),p.applyPropListeners({"@event1":"event1Handler"}),p.addEventListener("event2",handler2.bind(t)),o.dispatchEvent("event1",1,!1),o.dispatchEvent("event2",2,!1),expect(e.eventStack).to.be.eql(["event1Handler 1","handler2 2"]),expect(t.eventStack).to.be.eql([]),e.eventStack=[],t.eventStack=[],o.dispatchEvent("event1",1,!0),o.dispatchEvent("event2",2,!0),expect(e.eventStack).to.be.eql(["event1Handler 1","handler2 2"]),expect(t.eventStack).to.be.eql(["event1Handler 1","handler2 2"])})),it("Should emit event from specified target",(()=>{const e=document.createElement("div"),t=new n(e),o=document.createElement("test-div"),p=new n(o);p.applyPropListeners({"@event1":"event1Handler"});let r=null,i=null;p.addEventListener("event1",(e=>{r=e.composedPath(),i=e.target})),t.dispatchEvent("event1",1,!1,o),expect(o.eventStack).to.be.eql(["event1Handler 1"]),expect(r).to.be.eql([o]),expect(i).to.be.eql(o)})),it("Should dispose correctly",(()=>{const e=new y,t=new n(e);t.dispose(),expect(t.node).to.be.equal(void 0),expect(t.protoListeners).to.be.equal(void 0),expect(t.propListeners).to.be.equal(void 0),expect(t.addedListeners).to.be.equal(void 0)}))}))}}var __decorate$3=function(e,t,o,p){var n,r=arguments.length,i=r<3?t:null===p?p=Object.getOwnPropertyDescriptor(t,o):p;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,p);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};let S=class Object1{constructor(e){void 0!==e&&(this.prop=e)}prop=!0},P=class TestIoNode extends t{static get Properties(){return{label:"default"}}};P=__decorate$3([e],P);const C=new P;class PropertyTest{run(){describe("property.test.ts",(()=>{it("Should initialize correct property definitions and values from loosely typed property definitions",(()=>{let e,t;e=new r({}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:void 0,type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r(null),t=new i(C,e),expect(e).to.be.eql({value:null,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:null,type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r(void 0),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:void 0,type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r(Number),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Number,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:0,type:Number,binding:void 0,reflect:!1,init:void 0}),e=new r({type:Number}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Number,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:0,type:Number,binding:void 0,reflect:!1,init:void 0}),e=new r(1),t=new i(C,e),expect(e).to.be.eql({value:1,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:1,type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r({value:2}),t=new i(C,e),expect(e).to.be.eql({value:2,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:2,type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r(String),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:String,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:"",type:String,binding:void 0,reflect:!1,init:void 0}),e=new r({type:String}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:String,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:"",type:String,binding:void 0,reflect:!1,init:void 0}),e=new r("test"),t=new i(C,e),expect(e).to.be.eql({value:"test",type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:"test",type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r({value:"test"}),t=new i(C,e),expect(e).to.be.eql({value:"test",type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:"test",type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r(Boolean),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Boolean,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:!1,type:Boolean,binding:void 0,reflect:!1,init:void 0}),e=new r({type:Boolean}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Boolean,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:!1,type:Boolean,binding:void 0,reflect:!1,init:void 0}),e=new r(!0),t=new i(C,e),expect(e).to.be.eql({value:!0,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:!0,type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r({value:!0}),t=new i(C,e),expect(e).to.be.eql({value:!0,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:!0,type:void 0,binding:void 0,reflect:!1,init:void 0}),e=new r(Object),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Object,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:{},type:Object,binding:void 0,reflect:!1,init:void 0}),e=new r({type:Object}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Object,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:{},type:Object,binding:void 0,reflect:!1,init:void 0}),e=new r({type:Object,init:null}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Object,binding:void 0,reflect:void 0,init:null}),expect(t).to.be.eql({value:void 0,type:Object,binding:void 0,reflect:!1,init:null});const o={prop:!0};e=new r({value:o}),t=new i(C,e),expect(e).to.be.eql({value:{prop:!0},type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:{prop:!0},type:void 0,binding:void 0,reflect:!1,init:void 0}),expect(e.value).to.equal(o),expect(t.value).to.equal(o),e=new r(Array),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Array,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:[],type:Array,binding:void 0,reflect:!1,init:void 0}),e=new r({type:Array}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Array,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:[],type:Array,binding:void 0,reflect:!1,init:void 0});const p=[1,2,3];e=new r({value:p}),t=new i(C,e),expect(e).to.be.eql({value:[1,2,3],type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:[1,2,3],type:void 0,binding:void 0,reflect:!1,init:void 0}),expect(e.value).to.equal(p),expect(t.value).to.equal(p),e=new r({type:S,init:null}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:S,binding:void 0,reflect:void 0,init:null}),expect(t).to.be.eql({value:void 0,type:S,binding:void 0,reflect:!1,init:null}),e=new r(S),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:S,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:new S,type:S,binding:void 0,reflect:!1,init:void 0}),e=new r({type:S,init:"test"}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:S,binding:void 0,reflect:void 0,init:"test"}),expect(t).to.be.eql({value:new S("test"),type:S,binding:void 0,reflect:!1,init:"test"}),e=new r({type:S,init:"this"}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:S,binding:void 0,reflect:void 0,init:"this"}),expect(t).to.be.eql({value:new S(C),type:S,binding:void 0,reflect:!1,init:"this"}),e=new r({type:S,init:"this.label"}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:S,binding:void 0,reflect:void 0,init:"this.label"}),expect(t).to.be.eql({value:new S(C.label),type:S,binding:void 0,reflect:!1,init:"this.label"});const n=new S;e=new r({value:n}),t=new i(C,e),expect(e).to.be.eql({value:n,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(e.value).to.be.equal(n),expect(t).to.be.eql({value:n,type:void 0,binding:void 0,reflect:!1,init:void 0}),expect(t.value).to.be.equal(n),expect(e.value).to.equal(n),expect(t.value).to.equal(n),e=new r({type:S}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:S,binding:void 0,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:new S,type:S,binding:void 0,reflect:!1,init:void 0}),e=new r({reflect:!1,type:Object,init:!0}),t=new i(C,e),expect(e).to.be.eql({value:void 0,type:Object,binding:void 0,reflect:!1,init:!0}),expect(t).to.be.eql({value:new Object(!0),type:Object,binding:void 0,reflect:!1,init:!0})})),it("Should register property definitions from decorators.",(()=>{class TestClass extends t{}__decorate$3([l("value1")],TestClass.prototype,"prop1",void 0),__decorate$3([l({value:"value2",type:String})],TestClass.prototype,"prop2",void 0),e(TestClass);const o=a.get(TestClass);expect(o).to.be.eql({prop1:"value1",prop2:{value:"value2",type:String}})})),it("Should initialize properties with binding correctly",(()=>{let e,t,p=new o(new P({label:"lorem"}),"label");e=new r(p),t=new i(C,e),expect(e).to.be.eql({value:"lorem",type:void 0,binding:p,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:"lorem",type:void 0,binding:p,reflect:!1,init:void 0}),p=new o(new P({label:"lorem"}),"label"),e=new r({binding:p,value:"ipsum"}),t=new i(C,e),expect(e).to.be.eql({value:"lorem",type:void 0,binding:p,reflect:void 0,init:void 0}),expect(t).to.be.eql({value:"lorem",type:void 0,binding:p,reflect:!1,init:void 0})})),it("Should assign property definitions correctly",(()=>{const e=new o(new P({label:"lorem"}),"label");let t=new r({}),p=new r({value:"lorem",type:String,binding:e,reflect:!1,init:void 0});t.assign(p),expect(t).to.be.eql(p),t=new r({}),p=new r({value:"lorem",type:String,binding:e,reflect:!0,init:!0}),p.assign(t),expect(t).to.be.eql({value:void 0,type:void 0,binding:void 0,reflect:void 0,init:void 0}),expect(p).to.be.eql({value:"lorem",type:String,binding:e,reflect:!0,init:!0}),t=new r({reflect:!0,init:void 0}),p=new r({value:"lorem",type:String,reflect:!0}),p.assign(t),expect(p).to.be.eql({value:"lorem",binding:void 0,type:String,reflect:!0,init:void 0})}))}))}}var __decorate$2=function(e,t,o,p){var n,r=arguments.length,i=r<3?t:null===p?p=Object.getOwnPropertyDescriptor(t,o):p;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,p);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};class Array1 extends Array{}class Array2 extends Array1{}class Array3 extends Array2{}class Object1{}class Object2 extends Object1{}class Object3 extends Object2{}class HTMLElement1 extends HTMLElement{}class HTMLElement2 extends HTMLElement1{}class HTMLElement3 extends HTMLElement2{}let E=class IoNode1 extends t{static get Properties(){return{prop1:{init:!1},prop2:{}}}};__decorate$2([l({type:Object})],E.prototype,"prop2",void 0),E=__decorate$2([e],E);let T=class IoNode3 extends E{static get Properties(){return{prop1:{init:!0,reflect:!0}}}};__decorate$2([l({init:!0})],T.prototype,"prop1",void 0),__decorate$2([l({value:"foo",reflect:!1})],T.prototype,"prop2",void 0),__decorate$2([l({reflect:!0})],T.prototype,"prop3",void 0),T=__decorate$2([e],T);let _=class IoNode4 extends E{};__decorate$2([l({init:!0})],_.prototype,"prop1",void 0),__decorate$2([l({})],_.prototype,"prop2",void 0),_=__decorate$2([e],_);class IoElement1 extends d{}class IoNode2 extends(c(Object3)){}class MockIoNode1{static get Properties(){return{prop1:{init:!1}}}static get Listeners(){return{listener1:"function1",listener2:"",listener3:["_onFunction1",{capture:!0}],listener4:()=>{}}}static get Style(){return"a"}changed(){}function1(){}onFunction1(){}_onFunction1(){}}class MockIoNode2 extends MockIoNode1{function2(){}onFunction2(){}_onFunction2(){}static get Properties(){return{prop1:{type:Object},prop2:{}}}static get Listeners(){return{listener1:"_onFunction2",listener2:["function2",{capture:!0,passive:!0}],listener3:["_onFunction1",{passive:!0}]}}static get Style(){return"b"}}class MockIoNode3 extends MockIoNode2{}class MockIoNode4 extends MockIoNode2{static get Properties(){return{prop3:{type:t},prop4:{value:new t}}}}class ProtoChainTest{run(){describe("protoChain.test.ts",(()=>{it("Should include an array of inherited class constructors",(()=>{let e=new s(Array3).constructors;expect(e).to.be.eql([Array3,Array2,Array1]),e=new s(Object3).constructors,expect(e).to.be.eql([Object3,Object2,Object1]),e=new s(HTMLElement3).constructors,expect(e).to.be.eql([HTMLElement3,HTMLElement2,HTMLElement1]),e=new s(t).constructors,expect(e).to.be.eql([t,Object.getPrototypeOf(t)]),e=new s(E).constructors,expect(e).to.be.eql([E,t,Object.getPrototypeOf(t)]),e=new s(IoElement1).constructors,expect(e).to.be.eql([IoElement1,d,Object.getPrototypeOf(d)]),e=new s(IoNode2).constructors,expect(e).to.be.eql([IoNode2,Object.getPrototypeOf(IoNode2),Object3,Object2,Object1])})),it("Should include all properties declared in `static get Properties()` return oject",(()=>{let e=new s(MockIoNode1);expect(Object.keys(e.properties)).to.be.eql(["prop1"]),expect(e.properties).to.be.eql({prop1:{value:void 0,type:void 0,binding:void 0,reflect:void 0,init:!1}}),e=new s(MockIoNode2),expect(Object.keys(e.properties)).to.be.eql(["prop1","prop2"]),expect(e.properties).to.be.eql({prop1:{value:void 0,type:Object,binding:void 0,reflect:void 0,init:!1},prop2:{value:void 0,type:void 0,binding:void 0,reflect:void 0,init:void 0}})})),it("Should include all properties declared in Property decorator",(()=>{let e=new s(E);expect(Object.keys(e.properties)).to.be.eql(["reactivity","prop2","prop1"]),expect(e.properties).to.be.eql({reactivity:{value:"immediate",type:String,binding:void 0,reflect:void 0,init:void 0},prop1:{value:void 0,type:void 0,binding:void 0,reflect:void 0,init:!1},prop2:{value:void 0,type:Object,binding:void 0,reflect:void 0,init:void 0}}),e=new s(T),expect(Object.keys(e.properties)).to.be.eql(["reactivity","prop2","prop1","prop3"]),expect(e.properties).to.be.eql({reactivity:{value:"immediate",type:String,binding:void 0,reflect:void 0,init:void 0},prop1:{value:void 0,type:void 0,binding:void 0,reflect:!0,init:!0},prop2:{value:"foo",type:Object,binding:void 0,reflect:!1,init:void 0},prop3:{value:void 0,type:void 0,binding:void 0,reflect:!0,init:void 0}})})),it("Should not override properties declared in Property decorator with inherited `static get Properties()` return oject",(()=>{const e=new s(_);expect(Object.keys(e.properties)).to.be.eql(["reactivity","prop2","prop1"]),expect(e.properties).to.be.eql({reactivity:{value:"immediate",type:String,binding:void 0,reflect:void 0,init:void 0},prop1:{value:void 0,type:void 0,binding:void 0,reflect:void 0,init:!0},prop2:{value:void 0,type:Object,binding:void 0,reflect:void 0,init:void 0}})})),it("Should include all listners declared in `static get Listeners()` return oject",(()=>{let e=new s(MockIoNode1);expect(Object.keys(e.listeners)).to.be.eql(["listener1","listener3","listener4"]),expect(e.listeners.listener1).to.be.eql([["function1"]]),expect(e.listeners.listener3).to.be.eql([["_onFunction1",{capture:!0}]]),expect(String(e.listeners.listener4)).to.be.eql(String([[()=>{}]])),e=new s(MockIoNode2),expect(Object.keys(e.listeners)).to.be.eql(["listener1","listener3","listener4","listener2"]),expect(e.listeners.listener1).to.be.eql([["function1"],["_onFunction2"]]),expect(e.listeners.listener2).to.be.eql([["function2",{capture:!0,passive:!0}]]),expect(e.listeners.listener3).to.be.eql([["_onFunction1",{capture:!0,passive:!0}]]),expect(String(e.listeners.listener4)).to.be.eql(String([[()=>{}]]))})),it("Should include all style strings declared in `static get Style()` return string",(()=>{let e=new s(MockIoNode1);expect(e.styles).to.be.equal("a\n"),e=new s(MockIoNode2),expect(e.styles).to.be.equal("a\nb\n"),e=new s(MockIoNode3),expect(e.styles).to.be.equal("a\nb\n")})),it('Should include an array of handler names that start with "on[A-Z]" or "_on[A-Z]" for auto-binding',(()=>{let e=new s(E);expect(e.handlers).to.be.eql(["changed","onPropertyMutated"]),e=new s(MockIoNode1),expect(e.handlers).to.be.eql(["changed","onFunction1","_onFunction1"]),e=new s(MockIoNode2),expect(e.handlers).to.be.eql(["onFunction2","_onFunction2","changed","onFunction1","_onFunction1"])})),it("Should bind auto-binding functions with `.autobindHandlers(node)` function",(()=>{const e=new s(MockIoNode2),t=new MockIoNode2;e.autobindHandlers(t),expect(t.function1.name).to.be.equal("function1"),expect(t.onFunction1.name).to.be.equal("bound onFunction1"),expect(t._onFunction1.name).to.be.equal("bound _onFunction1"),expect(t.function2.name).to.be.equal("function2"),expect(t.onFunction2.name).to.be.equal("bound onFunction2"),expect(t._onFunction2.name).to.be.equal("bound _onFunction2")})),it("Should include property names of mutation-observed object properties",(()=>{let e=new s(MockIoNode1);expect(e.observedObjectProperties).to.be.eql([]),e=new s(MockIoNode2),expect(e.observedObjectProperties).to.be.eql(["prop1"]),e=new s(MockIoNode4),expect(e.observedObjectProperties).to.be.eql(["prop1"]),expect(e.observedIoNodeProperties).to.be.eql(["prop3","prop4"])}))}))}}var __decorate$1=function(e,t,o,p){var n,r=arguments.length,i=r<3?t:null===p?p=Object.getOwnPropertyDescriptor(t,o):p;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,p);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};const j=new d;j.style.display="none",document.body.appendChild(j);const N=[];class TestElement extends d{static get Properties(){return{prop0:{reflect:!0,value:0}}}}e(TestElement);const k=new TestElement;class ElementTest{run(){describe("element.test.ts",(()=>{it("Should have core API functions defined",(()=>{expect(j.template).to.be.a("function"),expect(j.traverse).to.be.a("function"),expect(j.setAttribute).to.be.a("function")})),it("Should initialize property definitions correctly",(()=>{expect(j.tabindex).to.be.equal(""),expect(j.contenteditable).to.be.equal(!1),expect(j.class).to.be.equal(""),expect(j.role).to.be.equal(""),expect(j.label).to.be.equal(""),expect(j.name).to.be.equal(""),expect(j.title).to.be.equal(""),expect(j.id).to.be.equal(""),expect(j.hidden).to.be.equal(!1),expect(j.disabled).to.be.equal(!1),expect(j._properties.get("tabindex")).to.eql({binding:void 0,init:void 0,reflect:!0,type:String,value:""}),expect(j._properties.get("contenteditable")).to.eql({binding:void 0,init:void 0,reflect:!0,type:Boolean,value:!1}),expect(j._properties.get("class")).to.eql({binding:void 0,init:void 0,reflect:!0,type:String,value:""}),expect(j._properties.get("role")).to.eql({binding:void 0,init:void 0,reflect:!0,type:String,value:""}),expect(j._properties.get("label")).to.eql({binding:void 0,init:void 0,reflect:!0,type:String,value:""}),expect(j._properties.get("name")).to.eql({binding:void 0,init:void 0,reflect:!0,type:String,value:""}),expect(j._properties.get("title")).to.eql({binding:void 0,init:void 0,reflect:!0,type:String,value:""}),expect(j._properties.get("id")).to.eql({binding:void 0,init:void 0,reflect:!0,type:String,value:""}),expect(j._properties.get("hidden")).to.eql({binding:void 0,init:void 0,reflect:!0,type:Boolean,value:!1}),expect(j._properties.get("disabled")).to.eql({binding:void 0,init:void 0,reflect:!0,type:Boolean,value:!1}),expect(k.prop0).to.equal(0),expect(k.getAttribute("prop0")).to.equal("0")})),it("Has correct default attributes",(()=>{expect(j.getAttribute("tabindex")).to.equal(null),expect(j.getAttribute("contenteditable")).to.equal(null),expect(j.getAttribute("class")).to.equal(null),expect(j.getAttribute("role")).to.equal(null),expect(j.getAttribute("label")).to.equal(null),expect(j.getAttribute("name")).to.equal(null),expect(j.getAttribute("title")).to.equal(null),expect(j.getAttribute("id")).to.equal(null),expect(j.getAttribute("hidden")).to.equal(null),expect(j.getAttribute("disabled")).to.equal(null)})),it("Has reactive attributes",(()=>{j.tabindex="1",expect(j.getAttribute("tabindex")).to.equal("1"),j.tabindex="",j.contenteditable=!0,expect(j.getAttribute("contenteditable")).to.equal(""),j.contenteditable=!1,j.class="foo",expect(j.getAttribute("class")).to.equal("foo"),j.class="",j.role="button",expect(j.getAttribute("role")).to.equal("button"),j.role="",j.label="text",expect(j.getAttribute("label")).to.equal("text"),j.label="",j.name="name",expect(j.getAttribute("name")).to.equal("name"),j.name="",j.title="title",expect(j.getAttribute("title")).to.equal("title"),j.title="",j.id="one",expect(j.getAttribute("id")).to.equal("one"),j.id="",j.hidden=!0,expect(j.getAttribute("hidden")).to.equal(""),j.hidden=!1,j.disabled=!0,expect(j.getAttribute("disabled")).to.equal(""),j.disabled=!1})),it("Invokes change events and functions",(()=>{class TestNode extends t{static get Properties(){return{prop0:0,prop1:""}}prop0Changed(){N.push("TestNode: prop0Changed "+this.prop0)}prop1Changed(){N.push("TestNode: prop1Changed "+this.prop1)}changed(){N.push("TestNode: changed")}}e(TestNode);e(class TestSubelement extends d{static get Properties(){return{prop0:0,prop1:""}}});class TestElement1 extends d{static get Properties(){return{prop0:-1,prop1:{value:"default"},_counter:0,_prop0counter:0,_prop0Change:null,_prop1counter:0,_prop1Change:null}}constructor(...e){super(...e),this.template([["test-subelement",{$:"subelement",prop0:this.bind("prop0"),prop1:this.bind("prop1")}]]),this.subnode=new TestNode({prop0:this.bind("prop0"),prop1:this.bind("prop1")})}changed(){N.push("TestElement1: changed"),this._counter++}prop0Changed(e){N.push("TestElement1: prop0Changed "+this.prop0),this._prop0counter++,this._prop0Change=e}prop1Changed(e){N.push("TestElement1: prop1Changed "+this.prop1),this._prop1counter++,this._prop1Change=e}}e(TestElement1),N.length=0;const o=new TestElement1;expect(o.prop0).to.equal(-1),expect(o.subnode.prop0).to.equal(-1),expect(o.$.subelement.prop0).to.equal(-1),expect(o.$.subelement.prop1).to.equal("default"),expect(o.subnode.prop0).to.equal(-1),expect(o.subnode.prop1).to.equal("default"),expect(o._counter).to.equal(0),expect(o._prop0counter).to.equal(0),expect(o._prop0Change).to.equal(null),expect(o._prop1counter).to.equal(0),expect(o._prop1Change).to.equal(null),o.subnode.prop0=1,expect(o.prop0).to.equal(1),expect(o.subnode.prop0).to.equal(1),expect(o._counter).to.equal(1),expect(o._prop0counter).to.equal(1),expect(o._prop0Change).to.eql({property:"prop0",value:1,oldValue:-1}),expect(o._prop1counter).to.equal(0),expect(o._prop1Change).to.equal(null),o.setProperties({prop0:2,prop1:"foo"}),expect(o.prop0).to.equal(2),expect(o.subnode.prop0).to.equal(2),expect(o.$.subelement.prop0).to.equal(2),expect(o.prop1).to.equal("foo"),expect(o.subnode.prop1).to.equal("foo"),expect(o.$.subelement.prop1).to.equal("foo"),expect(o._counter).to.equal(2),expect(o._prop0counter).to.equal(2),expect(o._prop0Change).to.eql({property:"prop0",value:2,oldValue:1}),expect(o._prop1counter).to.equal(1),expect(o._prop1Change).to.eql({property:"prop1",value:"foo",oldValue:"default"}),o.subnode.setProperties({prop0:3,prop1:"buzz"}),expect(o.prop0).to.equal(3),expect(o.subnode.prop0).to.equal(3),expect(o.$.subelement.prop0).to.equal(3),expect(o.$.subelement.prop0).to.equal(3),expect(o.prop1).to.equal("buzz"),expect(o.subnode.prop1).to.equal("buzz"),expect(o.$.subelement.prop1).to.equal("buzz"),expect(o._counter).to.equal(4),expect(o._prop0counter).to.equal(3),expect(o._prop0Change).to.eql({property:"prop0",value:3,oldValue:2}),expect(o._prop1counter).to.equal(2),expect(o._prop1Change).to.eql({property:"prop1",value:"buzz",oldValue:"foo"}),expect(N).to.eql(["TestNode: prop0Changed -1","TestNode: prop1Changed default","TestNode: changed","TestNode: prop0Changed 1","TestElement1: prop0Changed 1","TestElement1: changed","TestNode: changed","TestElement1: prop0Changed 2","TestNode: prop0Changed 2","TestNode: changed","TestElement1: prop1Changed foo","TestNode: prop1Changed foo","TestNode: changed","TestElement1: changed","TestNode: prop0Changed 3","TestElement1: prop0Changed 3","TestElement1: changed","TestNode: prop1Changed buzz","TestElement1: prop1Changed buzz","TestElement1: changed","TestNode: changed"]),N.length=0;class TestElement2 extends d{static get Properties(){return{prop0:-1,prop1:{value:""}}}changed(){this.template([["test-subelement",{$:"subelement",prop0:this.bind("prop0"),prop1:this.bind("prop1")}]])}}e(TestElement2);const p=new TestElement2;p.prop0=1,p.prop1="default",expect(p.prop0).to.equal(1),expect(p.$.subelement.prop0).to.equal(1),expect(p.prop1).to.equal("default"),expect(p.$.subelement.prop1).to.equal("default"),p.setProperties({prop0:2,prop1:"foo"}),expect(p.prop0).to.equal(2),expect(p.$.subelement.prop0).to.equal(2),expect(p.prop1).to.equal("foo"),expect(p.$.subelement.prop1).to.equal("foo"),p.$.subelement.setProperties({prop0:3,prop1:"buzz"}),expect(p.prop0).to.equal(3),expect(p.$.subelement.prop0).to.equal(3),expect(p.prop1).to.equal("buzz"),expect(p.$.subelement.prop1).to.equal("buzz")})),it("Should correctly set values when setProperties() is used to re-set multiple bindings",(async()=>{let t=class TestBindingElement extends d{static get Properties(){return{prop1:"subnode1",prop2:"subnode2",prop3:"subnode3"}}};t=__decorate$1([e],t);let o=class TestBindingElementTarget extends d{static get Properties(){return{prop1:"target1",prop2:"target2",prop3:"target3"}}init(){this.changed()}changed(){this.template([["test-binding-element",{$:"testElement",prop1:this.bind("prop1"),prop2:this.bind("prop2"),prop3:this.bind("prop3")}]])}};o=__decorate$1([e],o);const p=new o;expect(p.$.testElement.prop1).to.be.equal(p.prop1).to.be.equal("target1"),expect(p.$.testElement.prop2).to.be.equal(p.prop2).to.be.equal("target2"),expect(p.$.testElement.prop3).to.be.equal(p.prop3).to.be.equal("target3");const n=new t({prop1:"source1",prop2:"source2",prop3:"source3"});p.setProperties({prop1:n.bind("prop1"),prop2:n.bind("prop2"),prop3:n.bind("prop3")}),expect(p.$.testElement.prop1).to.be.equal(n.prop1).to.be.equal(p.prop1).to.be.equal("source1"),expect(p.$.testElement.prop2).to.be.equal(n.prop2).to.be.equal(p.prop2).to.be.equal("source2"),expect(p.$.testElement.prop3).to.be.equal(n.prop3).to.be.equal(p.prop3).to.be.equal("source3"),n.prop1="test1",p.prop2="test2",p.$.testElement.prop3="test3",expect(p.$.testElement.prop1).to.be.equal(n.prop1).to.be.equal(p.prop1).to.be.equal("test1"),expect(p.$.testElement.prop2).to.be.equal(n.prop2).to.be.equal(p.prop2).to.be.equal("test2"),expect(p.$.testElement.prop3).to.be.equal(n.prop3).to.be.equal(p.prop3).to.be.equal("test3"),p.setProperties({prop1:"final1",prop2:"final2",prop3:"final3"}),expect(p.$.testElement.prop1).to.be.equal(n.prop1).to.be.equal(p.prop1).to.be.equal("final1"),expect(p.$.testElement.prop2).to.be.equal(n.prop2).to.be.equal(p.prop2).to.be.equal("final2"),expect(p.$.testElement.prop3).to.be.equal(n.prop3).to.be.equal(p.prop3).to.be.equal("final3")})),it("Has a11y attributes",(()=>{expect(j.getAttribute("aria-label")).to.equal(null),j.label="label",expect(j.getAttribute("aria-label")).to.equal("label"),j.label="",expect(j.getAttribute("aria-label")).to.equal(null),j.disabled=!0,expect(j.getAttribute("aria-disabled")).to.equal(""),j.disabled=!1})),it("Should bind and unbind correctly",(()=>{const e=new d,t=new d;t.label=e.bind("label"),e.label="one",expect(e.label).to.equal("one"),expect(t.label).to.equal("one"),t.label="two",expect(e.label).to.equal("two"),expect(t.label).to.equal("two"),e.unbind("label"),e.label="three",expect(e.label).to.equal("three"),expect(t.label).to.equal("two"),t.label=e.bind("label"),expect(t.label).to.equal("three"),e.label="four",expect(e.label).to.equal("four"),expect(t.label).to.equal("four"),t.unbind("label"),e.label="five",expect(e.label).to.equal("five"),expect(t.label).to.equal("four")})),it("Should bind from constructor",(()=>{const e=new d,t=new d({label:e.bind("label")});e.label="one",expect(t.label).to.equal("one"),t.unbind("label"),e.label="two",expect(e.label).to.equal("two"),expect(t.label).to.equal("one")}))}))}}var __decorate=function(e,t,o,p){var n,r=arguments.length,i=r<3?t:null===p?p=Object.getOwnPropertyDescriptor(t,o):p;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,p);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i};class NodeTest{run(){describe("node.test.ts",(()=>{it("Should have core API functions defined",(()=>{const e=new t;expect(e.setProperty).to.be.a("function"),expect(e.applyProperties).to.be.a("function"),expect(e.setProperties).to.be.a("function"),expect(e.inputValue).to.be.a("function"),expect(e.changed).to.be.a("function"),expect(e.queue).to.be.a("function"),expect(e.dispatchQueue).to.be.a("function"),expect(e.throttle).to.be.a("function"),expect(e.debounce).to.be.a("function"),expect(e.onPropertyMutated).to.be.a("function"),expect(e.bind).to.be.a("function"),expect(e.unbind).to.be.a("function"),expect(e.addEventListener).to.be.a("function"),expect(e.removeEventListener).to.be.a("function"),expect(e.dispatchEvent).to.be.a("function"),expect(e.dispose).to.be.a("function"),e.dispose()})),it("Should register property definitions correctly",(()=>{let o=class TestNode extends t{static get Properties(){return{prop0:{type:String},prop1:{value:!1},prop2:-1,prop3:Number,prop4:Object,prop5:[0,1,2],prop6:{value:"hello",type:String},prop7:{value:!0,type:Boolean},prop8:{value:1,type:Number},prop9:{type:Array,init:[1,2,3]},prop10:{type:Array,init:null}}}};o=__decorate([e],o);const p=new o;expect(p.prop0).to.be.equal(""),expect(p.prop1).to.be.equal(!1),expect(p.prop2).to.be.equal(-1),expect(p.prop3).to.be.equal(0),expect(p.prop4).to.be.eql({}),expect(p.prop5).to.be.eql([0,1,2]),expect(p.prop6).to.be.equal("hello"),expect(p.prop7).to.be.equal(!0),expect(p.prop8).to.be.equal(1),expect(p.prop9).to.be.eql([1,2,3]),expect(p._properties.get("prop0")).to.be.eql({value:"",type:String,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop1")).to.be.eql({value:!1,type:void 0,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop2")).to.be.eql({value:-1,type:void 0,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop3")).to.be.eql({value:0,type:Number,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop4")).to.be.eql({value:{},type:Object,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop5")).to.be.eql({value:[0,1,2],type:void 0,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop6")).to.be.eql({value:"hello",type:String,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop7")).to.be.eql({value:!0,type:Boolean,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop8")).to.be.eql({value:1,type:Number,binding:void 0,reflect:!1,init:void 0}),expect(p._properties.get("prop9")).to.be.eql({value:[1,2,3],type:Array,binding:void 0,reflect:!1,init:[1,2,3]}),expect(p._properties.get("prop10")).to.be.eql({value:void 0,type:Array,binding:void 0,reflect:!1,init:null}),p.dispose()})),it("Should aggregate property definitions from protochain",(()=>{let o=class Object1 extends t{static get Properties(){return{prop1:{value:0},prop2:null,prop3:{value:"test",type:String,reflect:!0}}}};o=__decorate([e],o);let p=class Object2 extends o{static get Properties(){return{prop1:{value:"asd",init:!1},prop2:{init:!0},prop3:""}}};p=__decorate([e],p);const n=new o,r=new p,i=n._protochain.properties,l=r._protochain.properties;expect(Array.from(n._properties.keys())).to.be.eql(["reactivity","prop1","prop2","prop3"]),expect(Array.from(r._properties.keys())).to.be.eql(["reactivity","prop1","prop2","prop3"]),expect(i.prop1.value).to.be.equal(0),expect(n._properties.get("prop1")).to.be.eql({value:0,type:void 0,binding:void 0,reflect:!1,init:void 0}),expect(l.prop1.value).to.be.eql("asd"),expect(r._properties.get("prop1")).to.be.eql({value:"asd",type:void 0,binding:void 0,reflect:!1,init:!1}),expect(r._properties.get("prop2")).to.be.eql({value:null,type:void 0,binding:void 0,reflect:!1,init:!0}),expect(r._properties.get("prop3")).to.be.eql({value:"",type:String,binding:void 0,reflect:!0,init:void 0})})),it("Should correctly register properties with bindigs",(()=>{let p=class TestNode extends t{static get Properties(){return{label:""}}};p=__decorate([e],p);const n=new o(new p({label:"label1"}),"label"),r=new o(new p({label:"label2"}),"label"),i=new o(new p({label:"label3"}),"label");let l=class Object1 extends t{static get Properties(){return{prop1:n}}};l=__decorate([e],l);let a=class Object2 extends l{static get Properties(){return{prop1:{binding:r},prop3:i}}};a=__decorate([e],a);const c=new l,s=new a;expect(c._properties.get("prop1").binding).to.be.equal(n),expect(s._properties.get("prop1").binding).to.be.equal(r),expect(s._properties.get("prop3").binding).to.be.equal(i),expect(n.targets[0]).to.be.equal(c),expect(r.targets[0]).to.be.equal(s),expect(i.targets[0]).to.be.equal(s),expect(c._properties.get("prop1").value).to.be.equal("label1"),expect(s._properties.get("prop1").value).to.be.equal("label2"),expect(s._properties.get("prop3").value).to.be.equal("label3")})),it("Should correctly get/set properties",(()=>{let o=class TestNode extends t{static get Properties(){return{prop1:{value:1}}}};o=__decorate([e],o);const p=new o;expect(p._properties.get("prop1").value).to.be.equal(1),expect(p.prop1).to.be.equal(1),p.setProperty("prop1",0),expect(p._properties.get("prop1").value).to.be.equal(0),expect(p.prop1).to.be.equal(0)})),it("Should correctly get/set bound properties",(()=>{let p=class TestNode extends t{static get Properties(){return{label:""}}};p=__decorate([e],p);const n=new o(new p({label:"label1"}),"label"),r=new o(new p({label:"label2"}),"label");let i=class TestNode2 extends t{static get Properties(){return{prop1:n}}};i=__decorate([e],i);const l=new i;expect(l._properties.get("prop1").value).to.be.equal("label1"),expect(l.prop1).to.be.equal("label1"),expect(l._properties.get("prop1").binding).to.be.equal(n),expect(n.targets[0]).to.be.equal(l),l.setProperty("prop1",r),expect(l._properties.get("prop1").value).to.be.equal("label2"),expect(l.prop1).to.be.equal("label2"),expect(n.targets[0]).to.be.equal(void 0),expect(r.targets[0]).to.be.equal(l)})),it("Should execute attribute reflection on IoElement",(()=>{let t=class TestElementReflection extends d{static get Properties(){return{label:{value:"label1",reflect:!0},label2:"label2"}}};t=__decorate([e],t);const o=new t;expect(o.getAttribute("label")).to.be.equal("label1"),expect(o.getAttribute("label2")).to.be.equal(null),o.label="label2",expect(o.getAttribute("label")).to.be.equal("label2"),o.setProperty("label","label3"),expect(o.getAttribute("label")).to.be.equal("label3")})),it('Should dipatch "[propName]-changed" events correctly',(async()=>{let p=class TestNode extends t{static get Properties(){return{propChangedEvents:Array,prop:Number}}static get Listeners(){return{"prop-changed":"onPropChanged"}}onPropChanged(e){this.propChangedEvents.push(e.detail)}};p=__decorate([e],p);const n=new p;expect(n.propChangedEvents).to.be.eql([]),n.addEventListener("prop-changed",(()=>{expect("This should not execute").to.be.eql(!0)})),n.removeEventListener("prop-changed"),n.addEventListener("prop-changed",(e=>{const t=e.detail.oldValue,o=e.detail.value;expect(t).to.be.eql(0),expect(o).to.be.eql(1)})),n.prop=1,n.removeEventListener("prop-changed"),n.addEventListener("prop-changed",(()=>{expect("This is actually not expected to happen!").to.be.equal(!0)})),n.setProperty("prop",2,!0),n.removeEventListener("prop-changed"),expect(n.propChangedEvents).to.be.eql([{oldValue:0,property:"prop",value:1}]),await u(),expect(n.propChangedEvents).to.be.eql([{oldValue:0,property:"prop",value:1},{oldValue:1,property:"prop",value:2}]),n.setProperty("prop",3,!0),n.prop=4,await u(),expect(n.propChangedEvents).to.be.eql([{oldValue:0,property:"prop",value:1},{oldValue:1,property:"prop",value:2},{oldValue:2,property:"prop",value:4}]);const r=new p({prop:new o(n,"prop")});expect(r.propChangedEvents).to.be.eql([{oldValue:0,property:"prop",value:4}]);const i=new p({prop:-1});expect(i.propChangedEvents).to.be.eql([{oldValue:0,property:"prop",value:-1}]),i.propChangedEvents.length=0,i.reactivity="debounced",i.prop=10,expect(i.propChangedEvents).to.be.eql([]),await u(),expect(i.propChangedEvents).to.be.eql([{oldValue:-1,property:"prop",value:10}]),i.propChangedEvents.length=0,i.reactivity="none",i.prop=20,expect(i.propChangedEvents).to.be.eql([]),await u(),expect(i.propChangedEvents).to.be.eql([])})),it("Should execute throttle/debounce queue in FIFO order",(async()=>{let e=[];const o=new t;o.debounce((()=>{e.push(1)})),o.debounce((()=>{e.push(2)}));const throttleFuc=()=>{e.push(0)};o.throttle(throttleFuc),o.throttle(throttleFuc),await u(),expect(e).to.be.eql([0,1,2,0])})),it('Should add/remove "object-mutated" event listeners to properties of IoNode type',(async()=>{let p=class TestNode extends t{static get Properties(){return{prop:Number}}};p=__decorate([e],p);const n=new p,r=new p({prop:n});expect(n._eventDispatcher.addedListeners["object-mutated"][0][0]).to.be.equal(r.onPropertyMutated),r.prop=null,expect(n._eventDispatcher.addedListeners["object-mutated"]).to.be.equal(void 0);const i=new p;r.prop=i,expect(i._eventDispatcher.addedListeners["object-mutated"][0][0]).to.be.equal(r.onPropertyMutated);let l=class TestNode2 extends t{static get Properties(){return{prop:p}}};l=__decorate([e],l);const a=new l,c=a.prop;expect(c._eventDispatcher.addedListeners["object-mutated"][0][0]).to.be.equal(a.onPropertyMutated),a.dispose(),expect(c._eventDispatcher.addedListeners["object-mutated"]).to.be.equal(void 0);const s=new l,d=s.prop;s.prop=null,expect(d._eventDispatcher.addedListeners["object-mutated"]).to.be.equal(void 0);const u=new l,b=new l,v=u.prop,g=b.prop;u.prop=new o(b,"prop"),expect(v._eventDispatcher.addedListeners["object-mutated"]).to.be.equal(void 0),expect(g._eventDispatcher.addedListeners["object-mutated"][0][0]).to.be.equal(b.onPropertyMutated),expect(g._eventDispatcher.addedListeners["object-mutated"][1][0]).to.be.equal(u.onPropertyMutated)})),it("Should corectly invoke handler functions on change",(async()=>{let o=class TestNode extends t{changedCounter=0;prop1Changes=[];prop2Changes=[];static get Properties(){return{prop1:String,prop2:String}}changed(){this.changedCounter++}prop1Changed(e){this.prop1Changes.push(e)}prop2Changed(e){this.prop2Changes.push(e)}};o=__decorate([e],o);const p=new o;expect(p.changedCounter).to.equal(0),expect(p.prop1Changes).to.be.eql([]),expect(p.prop2Changes).to.be.eql([]),p.prop1="one",expect(p.changedCounter).to.equal(1),expect(p.prop1Changes).to.be.eql([{property:"prop1",oldValue:"",value:"one"}]),expect(p.prop2Changes).to.be.eql([]),p.prop1Changes.length=0,p.prop1="two",p.prop2="test",expect(p.changedCounter).to.equal(3),expect(p.prop1Changes).to.be.eql([{property:"prop1",oldValue:"one",value:"two"}]),expect(p.prop2Changes).to.be.eql([{property:"prop2",oldValue:"",value:"test"}]),p.prop1Changes.length=0,p.prop2Changes.length=0,p.setProperties({prop1:"three",prop2:""}),expect(p.changedCounter).to.equal(4),expect(p.prop1Changes).to.be.eql([{property:"prop1",oldValue:"two",value:"three"}]),expect(p.prop2Changes).to.be.eql([{property:"prop2",oldValue:"test",value:""}]),p.prop1Changes.length=0,p.prop2Changes.length=0,p.reactivity="debounced",p.setProperties({prop1:"four",prop2:"test2"}),expect(p.prop1Changes).to.be.eql([]),expect(p.prop2Changes).to.be.eql([]),await u(),expect(p.prop1Changes).to.be.eql([{property:"prop1",oldValue:"three",value:"four"}]),expect(p.prop2Changes).to.be.eql([{property:"prop2",oldValue:"",value:"test2"}]),p.prop1Changes.length=0,p.prop2Changes.length=0,p.reactivity="none",p.setProperties({prop1:"five",prop2:"test3"}),await u(),expect(p.prop1Changes).to.be.eql([]),expect(p.prop2Changes).to.be.eql([]),p.dispose()})),it("should invoke property mutation handler functions on mutation event",(async()=>{let o=class TestSubNode extends t{static get Properties(){return{a:{value:0}}}};o=__decorate([e],o);let p=class TestNode extends t{changedCounter=0;obj1MutatedCounter=0;obj2MutatedCounter=0;static get Properties(){return{obj1:{type:o},obj2:{type:o}}}obj1Mutated(){this.obj1MutatedCounter++}obj2Mutated(){this.obj2MutatedCounter++}};p=__decorate([e],p);const n=new p;expect(n.changedCounter).to.equal(0),expect(n.obj1MutatedCounter).to.equal(0),n.obj1.a=1,await u(),expect(n.obj1MutatedCounter).to.equal(1),expect(n.obj2MutatedCounter).to.equal(0),n.obj2.a=1,expect(n.obj2MutatedCounter).to.equal(1),await u(),n.obj1=new p,await u(),expect(n.obj1MutatedCounter).to.equal(1),n.obj1.obj1={a:1},await u(),expect(n.obj1MutatedCounter).to.equal(2),n.dispose()})),it("should correctly bind properties",(()=>{let p=class TestNode extends t{static get Properties(){return{prop1:String,prop2:String}}};p=__decorate([e],p);const n=new p,r=n.bind("prop1");expect(r).to.be.instanceof(o),expect(r.node).to.be.equal(n),expect(r.property).to.be.equal("prop1");const i=new p({prop1:r}),l=new p({prop1:r});l.prop2=r,expect(r.targets[0]).to.be.equal(i),expect(r.targets[1]).to.be.equal(l),expect(r.targetProperties.get(i)[0]).to.be.equal("prop1"),expect(r.targetProperties.get(i)[1]).to.be.equal(void 0),expect(r.targetProperties.get(l)[0]).to.be.equal("prop1"),expect(r.targetProperties.get(l)[1]).to.be.equal("prop2"),n.prop1="one",expect(i.prop1).to.be.equal("one"),expect(i.prop2).to.be.equal(""),expect(l.prop1).to.be.equal("one"),expect(l.prop2).to.be.equal("one"),i.prop1="two",expect(n.prop1).to.be.equal("two"),expect(l.prop1).to.be.equal("two"),expect(r.targets.length).to.be.equal(2),i.dispose(),expect(r.targets.length).to.be.equal(1),l.dispose(),expect(r.targets.length).to.be.equal(0),n.dispose()})),it("Should correctly set values when setProperties() is used to re-set multiple bindings",(async()=>{let o=class TestNode extends t{static get Properties(){return{prop1:"subnode1",prop2:"subnode2",prop3:"subnode3"}}};o=__decorate([e],o),new o;let p=class TestNodeTarget extends t{static get Properties(){return{subnode:o,prop1:"target1",prop2:"target2",prop3:"target3"}}init(){this.changed()}changed(){this.subnode.setProperties({prop1:this.bind("prop1"),prop2:this.bind("prop2"),prop3:this.bind("prop3")})}};p=__decorate([e],p);const n=new p;expect(n.subnode.prop1).to.be.equal(n.prop1).to.be.equal("target1"),expect(n.subnode.prop2).to.be.equal(n.prop2).to.be.equal("target2"),expect(n.subnode.prop3).to.be.equal(n.prop3).to.be.equal("target3");const r=new o({prop1:"source1",prop2:"source2",prop3:"source3"});n.setProperties({prop1:r.bind("prop1"),prop2:r.bind("prop2"),prop3:r.bind("prop3")}),expect(n.subnode.prop1).to.be.equal(r.prop1).to.be.equal(n.prop1).to.be.equal("source1"),expect(n.subnode.prop2).to.be.equal(r.prop2).to.be.equal(n.prop2).to.be.equal("source2"),expect(n.subnode.prop3).to.be.equal(r.prop3).to.be.equal(n.prop3).to.be.equal("source3"),r.prop1="test1",n.prop2="test2",n.subnode.prop3="test3",expect(n.subnode.prop1).to.be.equal(r.prop1).to.be.equal(n.prop1).to.be.equal("test1"),expect(n.subnode.prop2).to.be.equal(r.prop2).to.be.equal(n.prop2).to.be.equal("test2"),expect(n.subnode.prop3).to.be.equal(r.prop3).to.be.equal(n.prop3).to.be.equal("test3"),n.setProperties({prop1:"final1",prop2:"final2",prop3:"final3"}),expect(n.subnode.prop1).to.be.equal(r.prop1).to.be.equal(n.prop1).to.be.equal("final1"),expect(n.subnode.prop2).to.be.equal(r.prop2).to.be.equal(n.prop2).to.be.equal("final2"),expect(n.subnode.prop3).to.be.equal(r.prop3).to.be.equal(n.prop3).to.be.equal("final3")})),it("Should add/remove targets and targetProperties when assigned to values",(()=>{let p=class TestNode extends t{static get Properties(){return{prop1:String,prop2:String}}};p=__decorate([e],p);const n=new p,r=new o(n,"prop1"),i=new o(n,"prop2"),l=new p;l.prop1=r,l.prop2=i;const a=new p({prop1:r}),c=new p({prop1:r,prop2:r});expect(r.targets[0]).to.be.equal(l),expect(r.targets[1]).to.be.equal(a),expect(r.targets[2]).to.be.equal(c),expect(r.targetProperties.get(l)).to.be.eql(["prop1"]),expect(r.targetProperties.get(a)).to.be.eql(["prop1"]),expect(r.targetProperties.get(c)).to.be.eql(["prop1","prop2"]),l.dispose(),a.unbind("prop1"),c.unbind("prop1"),expect(r.targetProperties.get(l)).to.be.eql([]),expect(r.targetProperties.get(a)).to.be.eql([]),expect(r.targetProperties.get(c)).to.be.eql(["prop2"]),a.prop2=r,a.prop1=r,c.prop1=r,expect(r.targetProperties.get(a)).to.be.eql(["prop2","prop1"]),expect(r.targetProperties.get(c)).to.be.eql(["prop2","prop1"])})),it('Should return existing binding or create a new on "bind()"',(()=>{let o=class TestNode extends t{static get Properties(){return{prop1:String,prop2:String}}};o=__decorate([e],o);const p=new o,n=p.bind("prop1");expect(n).to.be.equal(p._bindings.get("prop1")),expect(n).to.be.equal(p.bind("prop1"))})),it("Should dispose bindings correctly",(()=>{let o=class TestNode extends t{static get Properties(){return{prop1:String,prop2:String}}};o=__decorate([e],o);const p=new o,n=p.bind("prop1");p.unbind("prop1"),expect(p._bindings.get("prop1")).to.be.equal(void 0),expect(n.node).to.be.equal(void 0);const r=new o,i=r.bind("prop1");r.dispose(),expect(r._bindings).to.be.equal(void 0),expect(i.node).to.be.equal(void 0),expect(i.property).to.be.equal(void 0),expect(i.targets).to.be.equal(void 0),expect(i.targetProperties).to.be.equal(void 0)}))}))}}async function afterHashChange(){return new Promise((e=>{self.addEventListener("hashchange",(()=>{e()}),{once:!0})}))}localStorage.removeItem("IoStorage:test2"),localStorage.removeItem("IoStorage:test3"),localStorage.removeItem("IoStorage:test4"),localStorage.removeItem("IoStorage:test5");const L=localStorage.getItem("IoStorage:user-permitted");localStorage.setItem("IoStorage:user-permitted","true");class StorageTest{run(){describe("IoStorageNode",(()=>{describe("Initialization",(()=>{it("Should register property definitions correctly",(()=>{const e=new b({key:"test",value:"foo"});expect(e.key).to.be.equal("test"),expect(e.value).to.be.equal("foo"),expect(e.default).to.be.equal("foo"),expect(e.storage).to.be.equal("none"),expect(e._properties.get("key")).to.eql({binding:void 0,reflect:!1,init:void 0,type:String,value:"test"}),expect(e._properties.get("value")).to.eql({binding:void 0,reflect:!1,init:void 0,type:void 0,value:"foo"}),expect(e._properties.get("default")).to.eql({binding:void 0,reflect:!1,init:void 0,type:void 0,value:"foo"}),expect(e._properties.get("storage")).to.eql({binding:void 0,reflect:!1,init:void 0,type:String,value:"none"}),e.dispose()})),it("Should initialize property value from localStorage store if exists",(()=>{localStorage.setItem("IoStorage:test2",'"asd"');const e=new b({key:"test2",value:"buzz",storage:"local"});expect(e.key).to.be.equal("test2"),expect(e.value).to.be.equal("asd"),expect(e.default).to.be.equal("buzz"),expect(e.storage).to.be.equal("local"),e.dispose()})),it("Should initialize property value from location.hash store if exists",(async()=>{self.location.hash=self.location.hash+"&testhash=foo";const e=new b({key:"testhash",value:"buzz",storage:"hash"});expect(e.key).to.be.equal("testhash"),expect(e.value).to.be.equal("foo"),expect(e.default).to.be.equal("buzz"),expect(e.storage).to.be.equal("hash"),e.dispose()})),it("Should return a new instance only if key and store are unique",(()=>{const e=new b({key:"test3",storage:"local"}),t=new b({key:"test3",storage:"local"}),o=new b({key:"test3",storage:"hash"}),p=new b({key:"test4",storage:"local"});expect(e).to.be.equal(t),expect(e).to.not.be.equal(o),expect(e).to.not.be.equal(p),e.dispose(),o.dispose(),p.dispose()}))})),describe("Reactivity",(()=>{it("Should update localStorage store when value changes",(()=>{const e=new b({key:"test5",value:"one",storage:"local"});expect(localStorage.getItem("IoStorage:test5")).to.be.equal(null),e.value="two",expect(localStorage.getItem("IoStorage:test5")).to.be.equal('"two"'),e.value="2",expect(localStorage.getItem("IoStorage:test5")).to.be.equal('"2"'),e.value=2,expect(localStorage.getItem("IoStorage:test5")).to.be.equal("2"),e.value="one",expect(localStorage.getItem("IoStorage:test5")).to.be.equal(null),e.dispose()})),it("Should update location.hash store when value changes to non-default",(async()=>{const e=new b({key:"test6",value:"one",storage:"hash"});e.value="two",expect(self.location.hash).to.include("test6=two"),e.value="2",expect(self.location.hash).to.include("test6=%222%22"),e.value=!0,expect(self.location.hash).to.include("test6=true"),e.value=2,expect(self.location.hash).to.include("test6=2"),self.location.hash=self.location.hash.replace("test6=2","test6=3"),await afterHashChange(),expect(e.value).to.be.equal(3),self.location.hash=self.location.hash.replace("test6=3",'test6="3"'),await afterHashChange(),expect(e.value).to.be.equal("3"),self.location.hash=self.location.hash.replace("test6=%223%22","test6=false"),await afterHashChange(),expect(e.value).to.be.equal(!1),e.value=[0,1,2],expect(self.location.hash).to.include("test6=[0,1,2]"),e.value=[0,1,"2"],expect(self.location.hash).to.include("test6=[0,1,%222%22]"),e.value="2",expect(self.location.hash).to.include("test6=%222%22"),e.dispose(),L&&"false"!==L||localStorage.setItem("IoStorage:user-permitted","false")}))}))})),describe("IoStorage",(()=>{describe("Initialization",(()=>{it("Should return binding to IoStorageNode Node",(()=>{const e=v({key:"test",storage:"hash"});e.value="foo",expect(e).to.be.instanceOf(o),e.dispose(),expect(self.location.hash).to.not.include("test=foo")}))}))}))}}const O=g,I=O._properties.get("themeID").binding;class ThemeTest{run(){describe("theme.test.ts",(()=>{it("Should register property definitions correctly",(()=>{expect(O._properties.get("themeID")).to.eql({binding:I,init:void 0,reflect:!1,type:String,value:O.themeID})}))}))}}const A=new x;A.size=[0,0],A.color=[0,0,0,0],A.pxRatio=1,A.style.visibility="hidden",A.style.position="fixed",A.style.left="0",A.style.bottom="0",A.style.zIndex="1000000",document.body.appendChild(A);class GLTest{run(){describe("gl.test.ts",(()=>{it("Should have core API functions defined",(()=>{expect(A.initShader).to.be.a("function"),expect(A.onResized).to.be.a("function"),expect(A.themeMutated).to.be.a("function"),expect(A.setShaderProgram).to.be.a("function"),expect(A.updatePropertyUniform).to.be.a("function"),expect(A.updateThemeUniforms).to.be.a("function"),expect(A.setUniform).to.be.a("function")})),it("Should initialize property definitions correctly",(()=>{A.onResized(),expect(A.size).to.be.eql([0,0]),expect(A.color).to.be.eql([0,0,0,0]),expect(A.pxRatio).to.be.equal(window.devicePixelRatio),expect(A.theme).to.be.equal(g),expect(A._properties.get("size")).to.eql({binding:void 0,init:[0,0],reflect:!1,type:Array,value:[0,0]}),expect(A._properties.get("color")).to.eql({binding:void 0,init:[1,1,1,1],reflect:!1,type:Array,value:[0,0,0,0]}),expect(A._properties.get("pxRatio")).to.eql({binding:void 0,init:void 0,reflect:!1,type:Number,value:window.devicePixelRatio}),expect(A._properties.get("theme")).to.eql({binding:void 0,init:void 0,reflect:!1,type:t,value:g})})),it("has <canvas> element",(()=>{expect(A.children[0].localName).to.equal("canvas")})),it("has correct size and pxRatio",(()=>{A.style.border="none",A.style.width="32px",A.style.height="32px",A.onResized(),expect(A.size[0]).to.equal(32),expect(A.size[1]).to.equal(32),expect(A.pxRatio).to.equal(window.devicePixelRatio)})),it("has correct color",(()=>{let e=A.ctx.getImageData(0,0,1,1).data;expect(e).to.eql(new Uint8ClampedArray([0,0,0,0])),A.color=[1,.5,.25,1],A._onRender(),e=A.ctx.getImageData(0,0,1,1).data,expect(e).to.eql(new Uint8ClampedArray([255,128,64,255])),A.transparent=!0,A.color=[1,.25,.5,.5],A._onRender(),e=A.ctx.getImageData(0,0,1,1).data,expect(e).to.eql(new Uint8ClampedArray([128,32,64,64]))}))}))}}class OverlayTest{run(){describe("IoOverlaySingleton",(()=>{describe("Initialization",(()=>{it("Should have core API functions defined",(()=>{expect(q.nudgeDown).to.be.a("function"),expect(q.nudgeUp).to.be.a("function"),expect(q.nudgeRight).to.be.a("function"),expect(q.nudgeLeft).to.be.a("function"),expect(q.nudgePointer).to.be.a("function"),expect(q.setElementPosition).to.be.a("function"),expect(q.onChildExpanded).to.be.a("function"),expect(q.onChildExpandedDelayed).to.be.a("function")})),it("Should initialize property definitions correctly",(()=>{expect(q.expanded).to.be.eql(!1),expect(q._properties.get("expanded")).to.eql({binding:void 0,init:void 0,reflect:!0,type:Boolean,value:!1})}))}))}))}}class index_test{run(){(new BindingTest).run(),(new ChangeQueueTest).run(),(new EventDispatcherTest).run(),(new PropertyTest).run(),(new ProtoChainTest).run(),(new ElementTest).run(),(new NodeTest).run(),(new StorageTest).run(),(new ThemeTest).run(),(new GLTest).run(),(new OverlayTest).run()}}export{index_test as default};
