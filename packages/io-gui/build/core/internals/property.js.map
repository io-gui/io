{"version":3,"file":"property.js","sourceRoot":"","sources":["../../../src/core/internals/property.ts"],"names":[],"mappings":"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","sourcesContent":["import { Binding } from './binding';\nimport { Constructor, IoNode } from '../node';\n\n/**\n * Configuration for a property of an IoNode class.\n * @typedef {Object} PropertyDefinition\n * @property {*} [value] The property's value. Can be any type unless `type` is specified.\n * @property {Constructor} [type] Constructor function defining the property's type.\n * @property {Binding} [binding] Binding object for two-way data synchronization.\n * @property {boolean} [reflect] Whether to reflect the property to an HTML attribute.\n * @property {*} [init] Initialization arguments for constructing initial value.\n */\nexport type PropertyDefinition = {\n  value?: any;\n  type?: Constructor;\n  binding?: Binding;\n  reflect?: boolean;\n  init?: any;\n};\n\n/**\n * Allows loose definition of properties by specifying only partial definitions, such as default value, type or a binding object.\n * @typedef {(string|number|boolean|Array<*>|null|undefined|Constructor|Binding|PropertyDefinition)} PropertyDefinitionLoose\n */\nexport type PropertyDefinitionLoose = string | number | boolean | Array<any> | null | undefined | Constructor | Binding | PropertyDefinition;\n\n/**\n * Instantiates a property definition object from a loosely or strongly typed property definition.\n * It facilitates merging of inherited property definitions from the prototype chain.\n * @class\n * @property {*} [value] The property's value. Can be any type.\n * @property {Constructor} [type] Constructor function defining the property's type.\n * @property {Binding} [binding] Binding object for two-way data synchronization.\n * @property {boolean} [reflect] Whether to reflect the property to an HTML attribute.\n * @property {*} [init] Initialization arguments for constructing initial values.\n */\nexport class ProtoProperty {\n  value?: any;\n  type?: Constructor;\n  binding?: Binding;\n  reflect?: boolean;\n  init?: any;\n  /**\n   * Creates a property definition from various input types.\n   * @param {PropertyDefinitionLoose} def Input definition which can be:\n   * - `undefined` or `null`: Sets as value\n   * - `Constructor`: Sets as type\n   * - `Binding`: Sets value from binding and stores binding reference\n   * - `PropertyDefinition`: Copies all defined fields\n   * - Other values: Sets as value\n   * @example\n   * new ProtoProperty(String) // {type: String}\n   * new ProtoProperty('hello') // {value: 'hello'}\n   * new ProtoProperty({value: 42, type: Number}) // {value: 42, type: Number}\n   * new ProtoProperty(new Binding(node, 'value')) // {value: node.value, binding: ...}\n   */\n  constructor(def: PropertyDefinitionLoose) {\n    if (def === undefined || def === null) {\n      this.value = def;\n    } else if (typeof def === 'function') {\n      this.type = def;\n    } else if (def instanceof Binding) {\n      this.value = def.value;\n      this.binding = def;\n    } else if (def && def.constructor === Object) {\n      const d = def as PropertyDefinition;\n      this.value = d.value !== undefined ? d.value : undefined;\n      this.type = d.type !== undefined ? d.type : undefined;\n      if (d.binding instanceof Binding) {\n        this.binding = d.binding;\n        this.value = this.binding.value;\n      }\n      if (d.reflect !== undefined) this.reflect = d.reflect;\n      if (d.init !== undefined) this.init = d.init;\n    } else if (!(def && def.constructor === Object)) {\n      this.value = def;\n    }\n  }\n  /**\n   * Assigns values of another ProtoProperty to itself, unless they are default values.\n   * @param {ProtoProperty} protoProp Source ProtoProperty\n   */\n  assign(protoProp: ProtoProperty) {\n    if (protoProp.value !== undefined) this.value = protoProp.value;\n    if (protoProp.type !== undefined) this.type = protoProp.type;\n    if (protoProp.reflect !== undefined) this.reflect = protoProp.reflect;\n    if (protoProp.init !== undefined) this.init = protoProp.init;\n    if (protoProp.binding !== undefined) this.binding = protoProp.binding;\n  }\n  /**\n   * Creates a serializable representation of the property definition.\n   * Handles special cases for better JSON serialization:\n   * - Converts object values to their constructor names\n   * - Converts function types to their names\n   * - Only includes defined fields\n   * @returns {object} A plain object suitable for JSON serialization\n   */\n  toJSON() {\n    const json: any = {\n      value: this.value,\n      type: this.type,\n      reflect: this.reflect,\n      init: this.init,\n      binding: this.binding,\n    };\n    if (json.value && typeof json.value === 'object') {\n      json.value = json.value.constructor.name;\n    }\n    if (json.type && typeof json.type === 'function') {\n      json.type = json.type.name;\n    }\n    return json;\n  }\n}\n\nfunction decodeInitArgument(item: any, node: IoNode) {\n  if (item === 'this') {\n    return node;\n  } else if (typeof item === 'string' && item.startsWith('this.')) {\n    const keys = item.split('.');\n    let target: any = node;\n    for (let i = 1; i < keys.length; i++) {\n      target = target[keys[i]];\n    }\n    if (target) return target;\n    debug: console.warn(`PropertyInstance: Invalid path ${item}`);\n  } else return item;\n}\n\n/**\n * PropertyInstance object constructed from `ProtoProperty`.\n */\nexport class PropertyInstance {\n  // Property value.\n  value?: any = undefined;\n  // Constructor of the property value.\n  type?: Constructor;\n  // Binding object.\n  binding?: Binding;\n  // Reflects to HTML attribute.\n  reflect = false;\n  // Initialize property with provided constructor arguments. `null` prevents initialization.\n  init?: any = undefined;\n  /**\n   * Creates the property configuration object and copies values from `ProtoProperty`.\n   * @param node owner IoNode instance\n   * @param propDef ProtoProperty object\n   */\n  constructor(node: IoNode, propDef: ProtoProperty) {\n    debug: {\n      Object.keys(propDef).forEach(key => {\n        if (['value', 'type', 'reflect', 'init', 'binding'].indexOf(key) === -1) {\n          console.warn(`ProtoProperty: Invalid field ${key}`);\n        }\n      });\n      if (propDef.type !== undefined) {\n        if (typeof propDef.type !== 'function') console.warn('Incorrect type for \"type\" field');\n      }\n      if (propDef.binding !== undefined && propDef.binding.constructor !== Binding) console.warn('Incorrect type for \"binding\" field');\n      if (propDef.reflect !== undefined && typeof propDef.reflect !== 'boolean') console.error(`Invalid reflect field ${propDef.reflect}!`);\n    }\n\n    this.value = propDef.value;\n    this.type = propDef.type;\n    this.binding = propDef.binding;\n    if (propDef.reflect !== undefined) this.reflect = propDef.reflect;\n    if (propDef.init !== undefined) this.init = propDef.init;\n\n    if (this.binding instanceof Binding) {\n      this.value = this.binding.value;\n    } else if ((this.value === undefined || this.value === null) && this.init !== null) {\n      if (this.type === Boolean) this.value = false;\n      else if (this.type === String) this.value = '';\n      else if (this.type === Number) this.value = 0;\n      else if (typeof this.type === 'function') {\n        if (this.init !== undefined) {\n          if (this.init instanceof Array) {\n            const args = this.init.map(item => decodeInitArgument(item, node));\n            this.value = new this.type(...args);\n          } else if (this.init instanceof Object) {\n            const args: any = {};\n            Object.keys(this.init).forEach(key => {\n              args[key] = decodeInitArgument(this.init[key], node);\n            });\n            this.value = new this.type(args);\n          } else {\n            const argument = decodeInitArgument(this.init, node);\n            this.value = new this.type(argument);\n          }\n        } else {\n          this.value = new this.type();\n        }\n      }\n    }\n\n    debug: {\n      if (this.value !== undefined && this.value !== null) {\n        if ([String, Number, Boolean].indexOf(this.type as any) !== -1) {\n          if (this.type === Boolean && typeof this.value !== 'boolean' ||\n              this.type === Number && typeof this.value !== 'number' ||\n              this.type === String && typeof this.value !== 'string') {\n            console.warn(`Property: Incorrect value \"${this.value}\" type for property!`);\n          }\n        } else {\n          if (typeof this.type === 'function' && !(this.value instanceof this.type)) {\n            console.warn(`Property: Incorrect value \"${this.value}\" type for property!`);\n          }\n        }\n      }\n    }\n  }\n}"]}