{"version":3,"file":"eventDispatcher.js","sourceRoot":"","sources":["../../../src/core/internals/eventDispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeEvent } from './changeQueue';\nimport { IoNode } from '../node';\n\n/**\n * Event listener types.\n */\nexport interface KeyboardEventListener { (event: KeyboardEvent): void }\nexport interface PointerEventListener { (event: PointerEvent): void }\nexport interface CustomEventListener { (event: CustomEvent): void }\nexport interface FocusEventListener { (event: FocusEvent): void }\nexport interface TouchEventListener { (event: TouchEvent): void }\nexport interface ChangeEventListener { (event: ChangeEvent): void }\nexport interface IoEventListener { (event: {detail: any, target: IoNode, path: IoNode[]}): void }\nexport type AnyEventListener = EventListener |\n                               KeyboardEventListener |\n                               PointerEventListener |\n                               CustomEventListener |\n                               FocusEventListener |\n                               TouchEventListener |\n                               ChangeEventListener |\n                               IoEventListener;\n\n/**\n * Listener definition type.\n * The first item is a string (function name) or an event listener function.\n * The second item is an optional object of event listener options.\n */\nexport type ListenerDefinition = [string | AnyEventListener, AddEventListenerOptions?];\n\n/**\n * Loose listener definition type.\n * It can be a string (function name), an event AnyEventListener function or a ListenerDefinition array.\n */\nexport type ListenerDefinitionLoose = string | AnyEventListener | ListenerDefinition;\n\n/**\n * Converts a loose listener definition into a strongly typed ListenerDefinition array format.\n * This ensures consistent handling of listeners regardless of how they were initially defined.\n *\n * @param {ListenerDefinitionLoose} listenerDefinition - Loosely typed listener definition\n * @return {ListenerDefinition} Normalized listener definition in [string | listener, options?] format\n */\nexport const hardenListenerDefinition = (listenerDefinition: ListenerDefinitionLoose): ListenerDefinition => {\n  return Array.isArray(listenerDefinition) ? listenerDefinition : [listenerDefinition];\n};\n\nconst LISTENER_OPTIONS = ['capture', 'passive'];\n\n/**\n * Converts a listener definition into a normalized Listener tuple.\n * If the first item is a string, it looks up the method on the node.\n *\n * @param {IoNode | EventTarget} node - The node instance containing potential method references\n * @param {ListenerDefinition} def - The listener definition to normalize\n * @return {Listener} Normalized [listener, options?] tuple\n */\nexport const listenerFromDefinition = (node: IoNode | EventTarget, def: ListenerDefinition): Listener => {\n  const handlerDef = def[0];\n  const options = def[1];\n\n  debug: {\n    if (typeof handlerDef !== 'string' && typeof handlerDef !== 'function') {\n      console.error('listenerFromDefinition: Listener must be a function or method name');\n    }\n    if (options) {\n      if (typeof options !== 'object') {\n        console.error('listenerFromDefinition: Listener options must be an object');\n      } else {\n        const invalidOptions = Object.keys(options).filter(k => !LISTENER_OPTIONS.includes(k));\n        if (invalidOptions.length > 0) {\n          console.error(`listenerFromDefinition: Invalid listener options: ${invalidOptions.join(', ')}`);\n        }\n      }\n    }\n    if (typeof handlerDef === 'string' && !(handlerDef in node)) {\n      console.error(`listenerFromDefinition: Method \"${handlerDef}\" not found on node`);\n    }\n  }\n\n  const handler = typeof handlerDef === 'string' ? (node as Record<string, AnyEventListener>)[handlerDef] : handlerDef;\n\n  return options ? [handler, options] : [handler];\n};\n\nexport type Listener = [AnyEventListener, AddEventListenerOptions?];\nexport type Listeners = Record<string, Listener[]>;\n\n/**\n * Internal utility class responsible for handling listeners and dispatching events.\n * It makes events of all `IoNode` class instances compatible with DOM events.\n * It maintains three independent lists of listeners:\n *  - `protoListeners` specified as `get Listeners()` return value of class.\n *  - `propListeners` specified as inline properties prefixed with \"@\".\n *  - `addedListeners` explicitly added/removed using `addEventListener()` and `removeEventListener()`.\n */\nexport class EventDispatcher {\n  readonly node: IoNode | EventTarget;\n  readonly isEventTarget: boolean;\n  readonly protoListeners: Listeners = {};\n  readonly propListeners: Listeners = {};\n  readonly addedListeners: Listeners = {};\n  /**\n   * Creates an instance of `EventDispatcher` for specified `IoNode` instance.\n   * It initializes `protoListeners` from `ProtoChain`.\n   * @param {IoNode} node owner IoNode\n   */\n  constructor(node: IoNode | EventTarget) {\n    this.node = node;\n    this.isEventTarget = node instanceof EventTarget;\n    this.setProtoListeners(node as IoNode);\n  }\n\n  /**\n   * Sets `protoListeners` specified as `get Listeners()` class definitions.\n   * Definitions from subclass replace the ones from parent class.\n   * @param {IoNode} node owner IoNode\n   */\n  setProtoListeners(node: IoNode) {\n    for (const name in node._protochain?.listeners) {\n      for (let i = 0; i < node._protochain.listeners[name].length; i++) {\n        const listener = listenerFromDefinition(node, node._protochain.listeners[name][i]);\n        this.protoListeners[name] = [listener];\n      }\n      if (this.isEventTarget && this.protoListeners[name]) {\n        const listener = this.protoListeners[name][0];\n        EventTarget.prototype.addEventListener.call(this.node, name, listener[0] as EventListener, listener[1]);\n      }\n    }\n  }\n  /**\n   * Sets `propListeners` specified as inline properties prefixed with \"@\".\n   * It removes existing `propListeners` that are no longer specified and it replaces the ones that changed.\n   * @param {Record<string, any>} properties - Inline properties\n   */\n  applyPropListeners(properties: Record<string, any>) {\n    // Create and object with new listeners\n    const newPropListeners: Listeners = {};\n    for (const prop in properties) {\n      if (!prop.startsWith('@')) continue;\n\n      const name = prop.slice(1);\n      const definition = hardenListenerDefinition(properties[prop]);\n      const listener = listenerFromDefinition(this.node, definition);\n      newPropListeners[name] = [listener];\n    }\n\n    // Remove listeners that are no longer specified\n    const propListeners = this.propListeners;\n    for (const name in propListeners) {\n      if (!newPropListeners[name]) {\n        if (this.isEventTarget) {\n          const listener = propListeners[name][0];\n          EventTarget.prototype.removeEventListener.call(this.node, name, listener[0] as EventListener, listener[1]);\n        }\n        delete propListeners[name];\n      }\n    }\n\n    // Add new listeners and remove old ones if they are different\n    for (const name in newPropListeners) {\n      if (this.isEventTarget) {\n        const newListener = newPropListeners[name][0];\n        if (propListeners[name]) {\n          const oldListener = propListeners[name][0];\n          if ((oldListener !== newListener || newListener[1] && (JSON.stringify(oldListener[1]) !== JSON.stringify(newListener[1])))) {\n            EventTarget.prototype.removeEventListener.call(this.node, name, oldListener[0] as EventListener, oldListener[1]);\n          }\n        }\n        EventTarget.prototype.addEventListener.call(this.node, name, newListener[0] as EventListener, newListener[1]);\n      }\n      propListeners[name] = newPropListeners[name];\n    }\n  }\n  /**\n   * Proxy for `addEventListener` method.\n   * Adds an event listener to the node's `addedListeners` collection.\n   * If the node is an EventTarget, also registers the listener with the DOM.\n   * @param {string} name - Name of the event\n   * @param {AnyEventListener} listener - Event listener handler\n   * @param {AddEventListenerOptions} [options] - Event listener options\n   */\n  addEventListener(name: string, listener: AnyEventListener, options?: AddEventListenerOptions) {\n    // Validate listener\n    debug: {\n      if (typeof listener !== 'function') {\n        console.error('EventDispatcher.addEventListener: Invalid listener type - must be a function');\n      }\n      if (options) {\n        if (typeof options !== 'object') {\n          console.error('EventDispatcher.addEventListener: Invalid listener options type - must be an object');\n        } else {\n          const invalidOptions = Object.keys(options).filter(k => !LISTENER_OPTIONS.includes(k));\n          if (invalidOptions.length > 0) {\n            console.warn(`EventDispatcher.addEventListener: Invalid listener options: ${invalidOptions.join(', ')}`);\n          }\n        }\n      }\n    }\n\n    // Initialize listener array if needed\n    if (!this.addedListeners[name]) {\n      this.addedListeners[name] = [];\n    }\n\n    // Check for duplicate listener\n    const existingIndex = this.addedListeners[name].findIndex(l => l[0] === listener);\n    if (existingIndex !== -1) {\n      debug: console.warn(`EventDispatcher.addEventListener: Listener for '${name}' event already added`);\n      return;\n    }\n\n    // Create and store listener tuple\n    const listenerTuple: Listener = options ? [listener, options] : [listener];\n    this.addedListeners[name].push(listenerTuple);\n\n    if (this.isEventTarget) {\n      EventTarget.prototype.addEventListener.call(this.node, name, listener as EventListener, options);\n    }\n  }\n\n  /**\n   * Proxy for `removeEventListener` method.\n   * Removes an event listener from the node's `addedListeners` collection.\n   * If `listener` is not specified it removes all listeners for specified `type`.\n   * @param {string} name - Name of the event\n   * @param {AnyEventListener} listener - Event listener handler\n   * @param {AddEventListenerOptions} [options] - Event listener options\n  */\n  removeEventListener(name: string, listener?: AnyEventListener, options?: AddEventListenerOptions) {\n    debug: {\n      if (listener && typeof listener !== 'function') {\n        console.error('EventDispatcher.removeEventListener: Invalid listener type!');\n      }\n      if (options) {\n        if (typeof options !== 'object') {\n          console.error('EventDispatcher.removeEventListener: Invalid listener options type - must be an object');\n        } else {\n          const invalidOptions = Object.keys(options).filter(k => !LISTENER_OPTIONS.includes(k));\n          if (invalidOptions.length > 0) {\n            console.warn(`EventDispatcher.removeEventListener: Invalid listener options: ${invalidOptions.join(', ')}`);\n          }\n        }\n\n      }\n      if (!this.addedListeners[name]) {\n        console.error(`EventDispatcher.removeEventListener: Listener ${name} not found!`);\n      }\n    }\n\n    if (!this.addedListeners[name]) return;\n\n    if (!listener) {\n      for (let i = 0; i < this.addedListeners[name].length; i ++) {\n        if (this.isEventTarget) {\n          const listener = this.addedListeners[name][i];\n          EventTarget.prototype.removeEventListener.call(this.node, name, listener[0] as EventListener, listener[1]);\n        }\n      }\n      this.addedListeners[name].length = 0;\n    } else {\n      const index = this.addedListeners[name].findIndex(item => item[0] === listener);\n      debug: if (index === -1) {\n        console.error(`EventDispatcher.removeEventListener: Listener ${name} not found!`);\n      }\n      if (index !== -1) {\n        this.addedListeners[name].splice(index, 1);\n        if (this.isEventTarget) {\n          EventTarget.prototype.removeEventListener.call(this.node, name, listener as EventListener, options);\n        }\n      }\n    }\n\n    if (this.addedListeners[name].length === 0) {\n      delete this.addedListeners[name];\n    }\n  }\n  /**\n   * Shorthand for custom event dispatch.\n   * @param {string} name - Name of the event\n   * @param {any} detail - Event detail data\n   * @param {boolean} [bubbles] - Makes event bubble\n   * @param {EventTarget} [node] - Event target override to dispatch the event from\n   */\n  dispatchEvent(name: string, detail?: any, bubbles = true, node: EventTarget | IoNode = this.node) {\n    if ((node instanceof EventTarget)) {\n      EventTarget.prototype.dispatchEvent.call(node, new CustomEvent(name, {detail: detail, bubbles: bubbles, composed: true, cancelable: true}));\n    } else {\n      const payload = {detail: detail, target: node, path: [node]};\n      if (this.protoListeners[name]) {\n        for (let i = 0; i < this.protoListeners[name].length; i ++) {\n          const handler = this.protoListeners[name][i][0] as IoEventListener;\n          handler.call(node, payload);\n        }\n      }\n      if (this.propListeners[name]) {\n        debug: if (this.propListeners[name].length > 1) {\n          console.error(`EventDispatcher.dispathEvent: PropListeners[${name}] array too long!`);\n        }\n        const handler = this.propListeners[name][0][0] as IoEventListener;\n        handler.call(node, payload);\n      }\n      if (this.addedListeners[name]) {\n        for (let i = 0; i < this.addedListeners[name].length; i ++) {\n          const handler = this.addedListeners[name][i][0] as IoEventListener;\n          handler.call(node, payload);\n        }\n      }\n    }\n  }\n  /**\n   * Disconnects all event listeners and removes all references for garbage collection.\n   * Use this when node is discarded.\n   */\n  dispose() {\n    for (const name in this.protoListeners) {\n      if (this.isEventTarget) {\n        for (let i = 0; i < this.protoListeners[name].length; i++) {\n          const listener = this.protoListeners[name][i];\n          EventTarget.prototype.removeEventListener.call(this.node, name, listener[0] as EventListener, listener[1]);\n        }\n      }\n      this.protoListeners[name].length = 0;\n      delete this.protoListeners[name];\n    }\n    for (const name in this.propListeners) {\n      if (this.isEventTarget) {\n        const listener = this.propListeners[name][0];\n        EventTarget.prototype.removeEventListener.call(this.node, name, listener[0] as EventListener, listener[1]);\n      }\n      this.propListeners[name].length = 0;\n      delete this.propListeners[name];\n    }\n    for (const name in this.addedListeners) {\n      if (this.isEventTarget) {\n        for (let i = this.addedListeners[name].length; i--;) {\n          const listener = this.addedListeners[name][i];\n          EventTarget.prototype.removeEventListener.call(this.node, name, listener[0] as EventListener, listener[1]);\n        }\n      }\n      this.addedListeners[name].length = 0;\n      delete this.addedListeners[name];\n    }\n    delete (this as any).node;\n    delete (this as any).protoListeners;\n    delete (this as any).propListeners;\n    delete (this as any).addedListeners;\n  }\n}"]}