{"version":3,"file":"changeQueue.js","sourceRoot":"","sources":["../../../src/core/internals/changeQueue.ts"],"names":[],"mappings":"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","sourcesContent":["import { IoNode } from '../node';\n\nexport interface Change {\n  property: string;\n  value: any;\n  oldValue: any;\n}\n\nexport interface Changes {\n  [property: string]: Change;\n}\n\nexport interface ChangeEvent extends Omit<CustomEvent<Change>, 'target'> {\n  readonly target: IoNode;\n  readonly detail: Change;\n  readonly path: IoNode[];\n}\n\n/**\n * A queue system for managing and batching property changes in `IoNode` and `IoElement` nodes.\n *\n * This class implements a First-In-First-Out (FIFO) queue that:\n * - Collects property changes and their associated values\n * - Coalesces multiple changes to the same property\n * - Dispatches changes in order through events (e.g., '[propName]-changed')\n * - Invokes corresponding change handlers (e.g., [propName]Changed())\n * - Triggers a final 'changed()' handler after processing all changes\n * - Dispatches a final 'changed' event after processing all changes\n *\n * The queue helps optimize performance by batching multiple property changes\n * and preventing redundant updates when the same property changes multiple\n * times within a single execution cycle.\n */\nexport class ChangeQueue {\n  declare readonly node: IoNode;\n  declare readonly changes: Change[];\n  hasChanged = false;\n  dispatching = false;\n  /**\n   * Creates change queue for the specified owner instance of `IoNode`.\n   * @param {IoNode} node - Owner node.\n   */\n  constructor(node: IoNode) {\n    this.changes = [];\n    this.node = node;\n    this.dispatch = this.dispatch.bind(this);\n  }\n  /**\n   * Adds property change payload to the queue by specifying property name, previous and the new value.\n   * If the change is already in the queue, the new value is updated in-queue.\n   * If the new value is the same as the original value, the change is removed from the queue.\n   * @param {string} property - Property name.\n   * @param {any} value Property value.\n   * @param {any} oldValue Old property value.\n   */\n  queue(property: string, value: any, oldValue: any) {\n    debug: if (value === oldValue) {\n      console.warn('ChangeQueue: queuing change with same value and oldValue!');\n    }\n    const i = this.changes.findIndex(change => change.property === property);\n    if (i === -1) {\n      this.changes.push({property, value, oldValue});\n    } else if (value === this.changes[i].oldValue) {\n      this.changes.splice(i, 1);\n    } else {\n      this.changes[i].value = value;\n    }\n  }\n  /**\n   * Dispatches and clears the queue.\n   * For each property change in the queue:\n   *  - It executes node's `[propName]Changed(change)` change handler function if it is defined.\n   *  - It fires the `'[propName]-changed'` `ChangeEvent` from the owner node with `Change` data as `event.detail`.\n   * After all changes are dispatched it invokes `.changed()` function of the owner node instance and fires `'changed'` event.\n   */\n  dispatch() {\n    if (this.dispatching === true) {\n      debug: console.error('ChangeQueue: dispatching already in progress!');\n      return;\n    }\n    this.dispatching = true;\n    this.hasChanged = false;\n    while (this.changes.length) {\n      const change = this.changes[0];\n      this.changes.splice(0, 1);\n      const property = change.property;\n      if (change.value !== change.oldValue) {\n        this.hasChanged = true;\n        if (this.node[property + 'Changed']) this.node[property + 'Changed'](change);\n        this.node.dispatchEvent(property + '-changed', change);\n      }\n    }\n    if (this.hasChanged) {\n      // TODO: Consider including change details in the change handler and event payload.\n      this.node.changed();\n      this.node.dispatchEvent('object-mutated', {object: this.node});\n    }\n    this.dispatching = false;\n  }\n  /**\n   * Clears the queue and removes the node reference for garbage collection.\n   * Use this when node queue is no longer needed.\n   */\n  dispose() {\n    this.changes.length = 0;\n    delete (this as any).node;\n    delete (this as any).changes;\n  }\n}"]}