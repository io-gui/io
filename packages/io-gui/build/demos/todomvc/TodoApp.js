import{Register as t,Node as e,NodeArray as o,IoElement as i,input as s,li as l,div as d,label as c,button as n,section as r,ul as a,span as m,a as h,Storage as u,header as p,h1 as g,p as T}from"io-gui";class TodoItemModel extends e{static get ReactiveProperties(){return{title:String,completed:Boolean}}toggle=()=>{this.completed=!this.completed};delete=()=>{this.dispatch("delete-item",{item:this},!0)};toJSON(){return{title:this.title,completed:this.completed}}fromJSON(t){return this.setProperties({title:t.title??"",completed:t.completed??!1}),this}}t(TodoItemModel);class TodoListModel extends e{static get ReactiveProperties(){return{items:{type:o,init:"this"}}}static get Listeners(){return{"delete-item":"onDeleteItem"}}onDeleteItem(t){const e=t.path[0],o=this.items.indexOf(e);this.items.splice(o,1)}get filters(){return{all:()=>!0,active:t=>!t.completed,completed:t=>t.completed}}get count(){return this.items.length}get completedCount(){return this.items.filter((t=>t.completed)).length}get activeCount(){return this.items.filter((t=>!t.completed)).length}get allCompleted(){return this.items.every((t=>t.completed))}constructor(t){(t={...t}).items=t.items.map((t=>new TodoItemModel({...t}))),super(t)}completeAll=()=>{this.items.forEach((t=>t.completed=!0))};clearCompleted=()=>{this.items=this.items.filter((t=>!t.completed))};itemsMutated(){this.dispatchMutation()}toJSON(){return{items:this.items.map((t=>t.toJSON()))}}fromJSON(t){return this.setProperties({items:t.items.map((t=>new TodoItemModel(t)))}),this}}t(TodoListModel);class TodoInput extends i{static get Style(){return"\n    :host {\n      display: contents;\n    }\n    "}static get ReactiveProperties(){return{model:{type:TodoListModel}}}onInputKey(t){if("Enter"===t.key){const t=String(this.$.input.value).trim();t&&this.model.items.push(new TodoItemModel({title:t,completed:!1})),this.$.input.value="",this.$.input.focus()}"Escape"===t.key&&(this.$.input.value="",this.$.input.focus())}changed(){this.render([s({id:"input",class:"new-todo",placeholder:"What needs to be done?","@keyup":this.onInputKey,autofocus:!0})])}}t(TodoInput);const v=TodoInput.vConstructor;class TodoItem extends i{static get Style(){return"\n    :host {\n      display: contents;\n    }\n    "}static get ReactiveProperties(){return{item:TodoItemModel,model:{type:TodoListModel},editing:!1}}itemMutated(){this.changed()}changed(){this.render([l({class:"todo "+(this.item.completed?"completed ":"")+(this.editing?"editing":"")},[d({class:"view"},[s({type:"checkbox",class:"toggle",checked:this.item.completed,"@click":this.item.toggle}),c({"@dblclick":this.onStartEdit},this.item.title),n({class:"destroy","@click":this.item.delete})]),s({id:"input-"+this.item.title,class:"edit",value:this.item.title,"@blur":this.onBlur,"@keyup":this.onInputKey})])]),this.$input=this.querySelector("input.edit")}onStartEdit(){this.editing=!0,this._originalTitle=this.item.title,this.$input.focus()}onBlur(){const t=String(this.$input.value).trim();this.item.title=t||this._originalTitle,this.editing=!1}onInputKey(t){["Enter","Escape"].includes(t.key)&&this.$input.blur()}}t(TodoItem);const y=TodoItem.vConstructor;class TodoList extends i{static get Style(){return"\n      :host {\n        flex-direction: column;\n      }\n    "}static get ReactiveProperties(){return{model:{type:TodoListModel},route:"all"}}modelMutated(){this.changed()}changed(){const t=this.model.items.filter(this.model.filters[this.route]);this.render([r({class:"main"},[s({type:"checkbox",id:"toggle-all",class:"toggle-all",checked:this.model.allCompleted}),this.model.items.length&&!this.model.allCompleted?c({for:"toggle-all","@click":this.model.completeAll},"Mark all as complete"):null,a({class:"todo-list"},t.map((t=>y({item:t,model:this.model}))))])])}}t(TodoList);const k=TodoList.vConstructor;class TodoFooter extends i{static get Style(){return"\n      :host a {\n        cursor: pointer;\n      }\n    "}static get ReactiveProperties(){return{model:{type:TodoListModel},route:"all"}}onRouteClicked(t){this.route=t.target.innerText.toLowerCase()}modelMutated(){this.changed()}changed(){this.render([m({class:"todo-count"},String(this.model.activeCount)+(1===this.model.activeCount?" item":" items")+" left"),a({class:"filters"},[l([h({"@click":this.onRouteClicked,class:"all"===this.route?"selected":""},"All")]),l([h({"@click":this.onRouteClicked,class:"active"===this.route?"selected":""},"Active")]),l([h({"@click":this.onRouteClicked,class:"completed"===this.route?"selected":""},"Completed")])]),this.model.completedCount?n({class:"clear-completed","@click":this.model.clearCompleted},"Clear completed"):null])}}t(TodoFooter);const f=TodoFooter.vConstructor;u.permit();const C=u({key:"route",storage:"hash",value:"all"}),M=u({key:"model",storage:"local",value:new TodoListModel({items:[]})});class TodoApp extends i{static get ReactiveProperties(){return{model:M,route:C}}ready(){this.changed()}modelMutated(){this.changed()}changed(){this.render([r({class:"todoapp"},[p({class:"header"},[g("todos"),v({model:this.model})]),k({class:"todo-list",model:this.model,route:this.route}),this.model.count?f({class:"footer",model:this.model,route:this.bind("route")}):null]),d({class:"info"},[T("Double-click to edit a todo"),T([m("Created with "),h({href:"https://iogui.dev",target:"_blank"},"Io-Gui")]),T([m("Part of "),h({href:"http://todomvc.com/",target:"_blank"},"TodoMVC")])])])}}t(TodoApp);const I=TodoApp.vConstructor;export{TodoApp,I as todoApp};
