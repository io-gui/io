{"version":3,"file":"io-slider-range.js","sourceRoot":"","sources":["../src/io-slider-range.ts"],"names":[],"mappings":"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","sourcesContent":["import { Register, Property } from 'io-gui';\nimport { IoSliderBase } from './io-slider-base.js';\n\n/**\n * Input element for `Array(2)` data type displayed as slider.\n * It can be configured to clamp the `value` compoents to `min` / `max` and round it to the nearest `step` increment. `exponent` property can be changed for non-linear scale.\n *\n * Keys left/right/up/down+shift and pageup/pagedown change the value in step incements. Home/end keys set the value to min/max.\n *\n * <io-element-demo element=\"io-slider-range\" properties='{\"value\": [0, 1], \"step\": 0.1, \"min\": -1, \"max\": 2, \"exponent\": 1}'></io-element-demo>\n **/\n@Register\nexport class IoSliderRange extends IoSliderBase {\n\n  @Property({value: null, type: Array, init: [0, 0]})\n  declare value: [number, number];\n\n  @Property(0.01)\n  declare step: number;\n\n  @Property(0)\n  declare min: number;\n\n  @Property(1)\n  declare max: number;\n\n  _index = 0;\n\n  _getCoordFromValue(value: [number, number]) {\n    const coord = [0, 0];\n    const min = this._min;\n    const max = this._max;\n    coord[0] = (value[0] - min[0]) / (max[0] - min[0]);\n    coord[1] = (value[1] - min[1]) / (max[1] - min[1]);\n    return coord;\n  }\n  _onPointerdown(event: PointerEvent) {\n    super._onPointerdown(event);\n    const value = this._value;\n    const p = this._getPointerCoord(event);\n    const c = this._getCoordFromValue(value);\n    this._index = Math.abs(c[0] - p[0]) < Math.abs(c[1] - p[0]) ? 0 : 1;\n  }\n  _onPointermoveThrottled(event: PointerEvent) {\n    if (this._active === 1) {\n      if (document.activeElement !== this as unknown as Element) this.focus();\n      const value = this._value;\n      const coord = this._getPointerCoord(event);\n      const newValue = this._getValueFromCoord(coord);\n      if (this._index === 0) {\n        this._inputValue([newValue[0], value[1]]);\n      } else if (this._index === 1) {\n        this._inputValue([value[0], newValue[0]]);\n      }\n    }\n  }\n  static get Frag() {\n    return /* glsl */`\n    varying vec2 vUv;\n\n    void main(void) {\n      // Dimensions\n      vec2 size = uVertical == 1 ? uSize.yx : uSize;\n      vec2 uv = uVertical == 1 ? vUv.yx : vUv;\n      vec2 position = size * vec2(uv.x, uv.y - 0.5);\n      vec2 expPosition = size * vec2(pow(uv.x, uExponent), uv.y - 0.5);\n\n      vec2 valueInRange = (uValue - vec2(uMin)) / (vec2(uMax) - vec2(uMin));\n\n      vec2 valueSign = sign(valueInRange);\n      vec2 expValueInRange = pow(abs(valueInRange), vec2(1./uExponent)) * valueSign;\n      float valueInRangeWidth = valueInRange[1] - valueInRange[0];\n      float valueInRangeCenter = (valueInRange[1] + valueInRange[0]) / 2.0;\n      float signRange = sign(valueInRangeWidth);\n\n      // Colors\n      vec3 finalCol = io_bgColorField.rgb;\n      vec3 gridCol = io_bgColorDimmed.rgb;\n      vec3 sliderCol = signRange > 0.0 ? io_bgColorBlue.rgb : io_bgColorRed.rgb;\n      vec3 lineCol1 = io_color.rgb;\n      vec3 lineCol2 = io_bgColor.rgb;\n\n      // Grid\n      float gridSize = size.x / abs((uMax - uMin) / uStep);\n      float gridOffset = mod(uStep - uMin, uStep) / (uMax - uMin) * size.x;\n      float gridShape = paintDerivativeGrid2D(translate(expPosition, gridOffset, 0.0), vec2(gridSize, 0.0), io_borderWidth);\n      finalCol = compose(finalCol, vec4(gridCol, gridShape * 0.5));\n\n      // Slider\n      float sliderShape = rectangle(translate(expPosition, size.x * valueInRangeCenter, 0.0), vec2(size.x * abs(valueInRangeWidth) * 0.5, size.y));\n      finalCol = compose(finalCol, vec4(sliderCol, sliderShape));\n      finalCol = compose(finalCol, vec4(io_bgColorField.rgb, gridShape * sliderShape * 0.125));\n\n      // Lines\n      float maxPos = expValueInRange[0];\n      float minPos = expValueInRange[1];\n\n      float lineMinShape1 = lineVertical(translate(position, maxPos * size.x, 0.0), io_borderWidth);\n      finalCol = compose(finalCol, vec4(lineCol1, lineMinShape1));\n      float lineMinShape2 = lineVertical(translate(position, maxPos * size.x + io_borderWidth * signRange, 0.0), io_borderWidth);\n      finalCol = compose(finalCol, vec4(lineCol2, lineMinShape2));\n      \n      float lineMaxShape1 = lineVertical(translate(position, minPos * size.x, 0.0), io_borderWidth);\n      finalCol = compose(finalCol, vec4(lineCol1, lineMaxShape1));\n      float lineMaxShape2 = lineVertical(translate(position, minPos * size.x - io_borderWidth * signRange, 0.0), io_borderWidth);\n      finalCol = compose(finalCol, vec4(lineCol2, lineMaxShape2));\n\n      gl_FragColor = vec4(finalCol, 1.0);\n    }\n    `;\n  }\n}\n\n"]}