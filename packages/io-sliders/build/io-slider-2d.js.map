{"version":3,"file":"io-slider-2d.js","sourceRoot":"","sources":["../src/io-slider-2d.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAG5C,IAAM,UAAU,GAAhB,MAAM,UAAW,SAAQ,YAAY;IAC1C,MAAM,KAAK,KAAK;QACd,OAAO,SAAS,CAAA;;;;;;;;;;;;;;;;KAgBf,CAAC;IACJ,CAAC;IAiBD,MAAM,KAAK,OAAO;QAChB,OAAO,UAAU,CAAA;;;;;;;;;;;;;;KAchB,CAAC;IACJ,CAAC;IACD,MAAM,KAAK,IAAI;QACb,OAAO,UAAU,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgCf,CAAC;IACL,CAAC;CACF,CAAA;AAlES;IADP,QAAQ,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;yCACnB;AAGxB;IADP,QAAQ,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC,CAAC;wCAC1B;AAGvB;IADP,QAAQ,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC;uCACvB;AAGtB;IADP,QAAQ,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;uCACrB;AAGtB;IADP,QAAQ,CAAC,IAAI,CAAC;4CACW;AAlCf,UAAU;IADtB,QAAQ;GACI,UAAU,CAwFtB","sourcesContent":["import { Register, Property } from 'io-gui';\nimport { IoSliderBase } from './io-slider-base.js';\n\n@Register\nexport class IoSlider2d extends IoSliderBase {\n  static get Style() {\n    return /* css */`\n      :host {\n        cursor: crosshair;\n        border: var(--io_border);\n        border-radius: var(--io_borderRadius);\n        border-color: var(--io_borderColorInset);\n        flex-grow: 0;\n      }\n      :host:not([vertical]),\n      :host[vertical] {\n        width: var(--io_fieldHeight5);\n        height: var(--io_fieldHeight5);\n        min-width: var(--io_fieldHeight5);\n        min-height: var(--io_fieldHeight5);\n        cursor: crosshair;\n      }\n    `;\n  }\n\n  @Property({value: null, type: Array, init: [0, 0]})\n  declare value: [number, number];\n\n  @Property({value: null, type: Array, init: [0.01, 0.01]})\n  declare step: [number, number];\n\n  @Property({value: null, type: Array, init: [-1, -1]})\n  declare min: [number, number];\n\n  @Property({value: null, type: Array, init: [1, 1]})\n  declare max: [number, number];\n\n  @Property(true)\n  declare noscroll: boolean;\n\n  static get GlUtils() {\n    return /* glsl */`\n      vec3 paintKnob(vec3 dstCol, vec2 p, vec2 center, vec3 color) {\n        vec4 finalCol = vec4(0.0);\n        vec2 pCenter = translate(p, center);\n        float radius = io_fieldHeight * 0.25;\n        float stroke = io_borderWidth;\n        float strokeShape = circle(pCenter, radius + stroke + stroke);\n        float fillShape   = circle(pCenter, radius + stroke);\n        float colorShape  = circle(pCenter, radius);\n        finalCol = mix(io_colorStrong, finalCol, strokeShape);\n        finalCol = mix(vec4(io_bgColor.rgb, 1.0), finalCol, fillShape);\n        finalCol = mix(vec4(color, 1.0), finalCol, colorShape);\n        return compose(dstCol, finalCol);\n      }\n    `;\n  }\n  static get Frag() {\n    return /* glsl */`\n    varying vec2 vUv;\n\n    void main(void) {\n      // Dimensions\n      vec2 size = uVertical == 1 ? uSize.yx : uSize;\n      vec2 uv = uVertical == 1 ? vUv.yx : vUv;\n      vec2 position = size * (uv - vec2(0.5));\n\n      // Colors\n      vec3 finalCol = io_bgColorField.rgb;\n      vec3 gridCol = io_bgColorDimmed.rgb;\n      vec3 sliderCol = io_bgColorBlue.rgb;\n      vec3 lineCol1 = io_color.rgb;\n      vec3 lineCol2 = io_bgColor.rgb;\n\n      // Grid\n      vec2 gridSize = size / abs((uMax - uMin) / uStep);\n      vec2 gridOffset = (uMax + uMin) / (uMax - uMin) * size / 2.;\n      vec2 gridPosition = translate(position, -gridOffset);\n      float gridShape = paintDerivativeGrid2D(gridPosition, gridSize, io_borderWidth);\n      finalCol = compose(finalCol, vec4(gridCol, gridShape * 0.5));\n\n      // Axis\n      float axisShape = lineCross2d(gridPosition, io_borderWidth);\n      finalCol = compose(finalCol, vec4(gridCol, axisShape));\n\n      // Knob\n      vec2 knobPos = uValue / (uMax - uMin) * size;\n      finalCol = paintKnob(finalCol, gridPosition, knobPos, sliderCol);\n\n      gl_FragColor = vec4(finalCol, 1.0);\n    }`;\n  }\n}"]}