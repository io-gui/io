// Generated by dts-bundle-generator v9.5.1

export type Properties = string[];
export type TargetProperties = WeakMap<Node$1, Properties>;
/**
 * Property binding class that enables two-way data synchronization between `Node` and `IoElement` nodes.
 *
 * It manages bindings between a source node's property and one or more target nodes and properties.
 * Using a hub-and-spoke pub/sub event system, it maintains data consistency by automatically propagating
 * changes to all bound nodes and properties.
 *
 * Key features:
 * - Listens for `[propName]-changed` events to detect changes
 * - Sets properties using `node.setProperty(propName, value)` method
 * - Supports one-to-many property bindings
 * - Prevents circular update loops
 * - Automatically cleans up listeners when disposed
 *
 * Note: `debug: {}` code blocks are used in dev/debug builds for sanity checks.
 * They print error messages if unexpected state is detected.
 * In theory, they should never be reached.
 *
 * @example
 * // Create a two-way binding between nodeA.value and nodeB.value
 * const binding = new Binding<number>(nodeA, 'value');
 * binding.addTarget(nodeB, 'value');
 */
export declare class Binding<T extends unknown> {
	readonly node: Node$1;
	readonly property: string;
	readonly targets: Node$1[];
	readonly targetProperties: TargetProperties;
	/**
	 * Creates a binding object for specified source `node` and `property`.
	 * It attaches a `[propName]-changed` listener to the source node.
	 * @param {Node} node - Source node
	 * @param {string} property - Name of the sourceproperty
	 */
	constructor(node: Node$1, property: string);
	set value(value: T);
	get value(): T;
	/**
	 * Returns a JSON representation of the binding.
	 * This is required for `JSON.stringify(protoProperties)` in `ProtoChain` to work more accurately.
	 * NOTE: this does not provide completely accurate signiture of the binding but it's good enough.
	 * @return {string} JSON representation of the binding.
	 */
	toJSON(): {
		node: string;
		property: string;
		targets: string[];
		targetProperties: Record<string, Properties>;
	};
	/**
	 * Helper function to get target properties from WeakMap
	 * Retrieves a list of target properties for specified target node.
	 * @param {Node} target - Target node.
	 * @return {Properties} list of target property names.
	 */
	getTargetProperties(target: Node$1): Properties;
	/**
	 * Adds a target node and property.
	 * Sets itself as the binding reference on the target `PropertyInstance`.
	 * Adds a `[propName]-changed` listener to the target node.
	 * @param {Node} target - Target node
	 * @param {string} property - Target property
	 */
	addTarget(target: Node$1, property: string): void;
	/**
	 * Removes target node and property.
	 * If `property` is not specified, it removes all target properties.
	 * Removes binding reference from the target `PropertyInstance`.
	 * Removes `[propName]-changed` listener from the target node.
	 * @param {Node} target - Target node
	 * @param {string} property - Target property
	 */
	removeTarget(target: Node$1, property?: string): void;
	/**
	 * Event handler that updates source property when one of the targets emits `[propName]-changed` event.
	 * @param {ChangeEvent} event - Property change event.
	 */
	onTargetChanged(event: ChangeEvent): void;
	/**
	 * Event handler that updates bound properties on target nodes when source node emits `[propName]-changed` event.
	 * @param {ChangeEvent} event - Property change event.
	 */
	onSourceChanged(event: ChangeEvent): void;
	/**
	 * Dispose of the binding by removing all targets and listeners.
	 * Use this when node is no longer needed.
	 */
	dispose(): void;
}
/**
 * Configuration for a property of an Node class.
 * @typedef {Object} PropertyDefinition
 * @property {*} [value] The property's value. Can be any type unless `type` is specified.
 * @property {AnyConstructor} [type] Constructor function defining the property's type.
 * @property {Binding} [binding] Binding object for two-way data synchronization.
 * @property {boolean} [reflect] Whether to reflect the property to an HTML attribute.
 * @property {*} [init] Initialization arguments for constructing initial value.
 */
type PropertyDefinition$1 = {
	value?: any;
	type?: AnyConstructor;
	binding?: Binding<any>;
	reflect?: boolean;
	init?: any;
};
/**
 * Allows loose definition of properties by specifying only partial definitions, such as default value, type or a binding object.
 * @typedef {(string|number|boolean|Array<*>|null|undefined|AnyConstructor|Binding|PropertyDefinition)} PropertyDefinitionLoose
 */
export type PropertyDefinitionLoose = string | number | boolean | Array<any> | null | undefined | AnyConstructor | Binding<any> | PropertyDefinition$1;
/**
 * Instantiates a property definition object from a loosely or strongly typed property definition.
 * It facilitates merging of inherited property definitions from the prototype chain.
 * @class
 * @property {*} [value] The property's value. Can be any type.
 * @property {AnyConstructor} [type] Constructor function defining the property's type.
 * @property {Binding} [binding] Binding object for two-way data synchronization.
 * @property {boolean} [reflect] Whether to reflect the property to an HTML attribute.
 * @property {*} [init] Initialization arguments for constructing initial values.
 */
export declare class ProtoProperty {
	value?: any;
	type?: AnyConstructor;
	binding?: Binding<any>;
	reflect?: boolean;
	init?: any;
	/**
	 * Creates a property definition from various input types.
	 * @param {PropertyDefinitionLoose} def Input definition which can be:
	 * - `undefined` or `null`: Sets as value
	 * - `AnyConstructor`: Sets as type
	 * - `Binding`: Sets value from binding and stores binding reference
	 * - `PropertyDefinition`: Copies all defined fields
	 * - Other values: Sets as value
	 * @example
	 * new ProtoProperty(String) // {type: String}
	 * new ProtoProperty('hello') // {value: 'hello'}
	 * new ProtoProperty({value: 42, type: Number}) // {value: 42, type: Number}
	 * new ProtoProperty(new Binding(node, 'value')) // {value: node.value, binding: ...}
	 */
	constructor(def: PropertyDefinitionLoose);
	/**
	 * Assigns values of another ProtoProperty to itself, unless they are default values.
	 * @param {ProtoProperty} protoProp Source ProtoProperty
	 */
	assign(protoProp: ProtoProperty): void;
	/**
	 * Creates a serializable representation of the property definition.
	 * Handles special cases for better JSON serialization:
	 * - Converts object values to their constructor names
	 * - Converts function types to their names
	 * - Only includes defined fields
	 * @returns {object} A plain object suitable for JSON serialization
	 */
	toJSON(): any;
}
/**
 * PropertyInstance object constructed from `ProtoProperty`.
 */
export declare class PropertyInstance {
	value?: any;
	type?: AnyConstructor;
	binding?: Binding<any>;
	reflect: boolean;
	init?: any;
	/**
	 * Creates the property configuration object and copies values from `ProtoProperty`.
	 * @param node owner Node instance
	 * @param propDef ProtoProperty object
	 */
	constructor(node: Node$1, propDef: ProtoProperty);
}
/**
 * Event listener types.
 */
export interface KeyboardEventListener {
	(event: KeyboardEvent): void;
}
export interface PointerEventListener {
	(event: PointerEvent): void;
}
export interface CustomEventListener {
	(event: CustomEvent): void;
}
export interface FocusEventListener {
	(event: FocusEvent): void;
}
export interface TouchEventListener {
	(event: TouchEvent): void;
}
export interface ChangeEventListener {
	(event: ChangeEvent): void;
}
export interface IoEventListener {
	(event: {
		detail: any;
		target: Node$1;
		path: Node$1[];
	}): void;
}
export type AnyEventListener = EventListener | KeyboardEventListener | PointerEventListener | CustomEventListener | FocusEventListener | TouchEventListener | ChangeEventListener | IoEventListener;
/**
 * Listener definition type.
 * The first item is a string (function name) or an event listener function.
 * The second item is an optional object of event listener options.
 */
export type ListenerDefinition = [
	string | AnyEventListener,
	AddEventListenerOptions?
];
/**
 * Loose listener definition type.
 * It can be a string (function name), an event AnyEventListener function or a ListenerDefinition array.
 */
export type ListenerDefinitionLoose = string | AnyEventListener | ListenerDefinition;
export type Listener = [
	AnyEventListener,
	AddEventListenerOptions?
];
export type Listeners = Record<string, Listener[]>;
/**
 * Converts a loose listener definition into a strongly typed ListenerDefinition array format.
 * This ensures consistent handling of listeners regardless of how they were initially defined.
 *
 * @param {ListenerDefinitionLoose} listenerDefinition - Loosely typed listener definition
 * @return {ListenerDefinition} Normalized listener definition in [string | listener, options?] format
 */
export declare const hardenListenerDefinition: (listenerDefinition: ListenerDefinitionLoose) => ListenerDefinition;
/**
 * Converts a listener definition into a normalized Listener tuple.
 * If the first item is a string, it looks up the method on the node.
 *
 * @param {Node | EventTarget} node - The node instance containing potential method references
 * @param {ListenerDefinition} def - The listener definition to normalize
 * @return {Listener} Normalized [listener, options?] tuple
 */
export declare const listenerFromDefinition: (node: Node$1 | EventTarget, def: ListenerDefinition) => Listener;
/**
 * Internal utility class responsible for handling listeners and dispatching events.
 * It makes events of all `Node` class instances compatible with DOM events.
 * It maintains three independent lists of listeners:
 *  - `protoListeners` specified as `get Listeners()` return value of class.
 *  - `propListeners` specified as inline properties prefixed with "@".
 *  - `addedListeners` explicitly added/removed using `addEventListener()` and `removeEventListener()`.
 */
export declare class EventDispatcher {
	readonly node: Node$1 | EventTarget;
	readonly nodeIsEventTarget: boolean;
	readonly protoListeners: Listeners;
	readonly propListeners: Listeners;
	readonly addedListeners: Listeners;
	/**
	 * Creates an instance of `EventDispatcher` for specified `Node` instance.
	 * It initializes `protoListeners` from `ProtoChain`.
	 * @param {Node} node owner Node
	 */
	constructor(node: Node$1 | EventTarget);
	/**
	 * Sets `protoListeners` specified as `get Listeners()` class definitions.
	 * Definitions from subclass replace the ones from parent class.
	 * @param {Node} node owner Node
	 */
	setProtoListeners(node: Node$1): void;
	/**
	 * Sets `propListeners` specified as inline properties prefixed with "@".
	 * It removes existing `propListeners` that are no longer specified and it replaces the ones that changed.
	 * @param {Record<string, any>} properties - Inline properties
	 */
	applyPropListeners(properties: Record<string, any>): void;
	/**
	 * Proxy for `addEventListener` method.
	 * Adds an event listener to the node's `addedListeners` collection.
	 * If the node is an EventTarget, also registers the listener with the DOM.
	 * @param {string} name - Name of the event
	 * @param {AnyEventListener} listener - Event listener handler
	 * @param {AddEventListenerOptions} [options] - Event listener options
	 */
	addEventListener(name: string, listener: AnyEventListener, options?: AddEventListenerOptions): void;
	/**
	 * Proxy for `removeEventListener` method.
	 * Removes an event listener from the node's `addedListeners` collection.
	 * If `listener` is not specified it removes all listeners for specified `type`.
	 * @param {string} name - Name of the event
	 * @param {AnyEventListener} listener - Event listener handler
	 * @param {AddEventListenerOptions} [options] - Event listener options
	*/
	removeEventListener(name: string, listener?: AnyEventListener, options?: AddEventListenerOptions): void;
	/**
	 * Shorthand for custom event dispatch.
	 * @param {string} name - Name of the event
	 * @param {any} detail - Event detail data
	 * @param {boolean} [bubbles] - Makes event bubble
	 * @param {EventTarget} [node] - Event target override to dispatch the event from
	 */
	dispatchEvent(name: string, detail?: any, bubbles?: boolean, node?: EventTarget | Node$1): void;
	/**
	 * Disconnects all event listeners and removes all references for garbage collection.
	 * Use this when node is discarded.
	 */
	dispose(): void;
}
export type ProtoConstructors = Array<NodeConstructor<any>>;
export type ProtoHandlers = string[];
export type ProtoProperties = {
	[property: string]: ProtoProperty;
};
export type ProtoListeners = {
	[property: string]: ListenerDefinition[];
};
/**
 * ProtoChain manages class inheritance metadata and configuration.
 *
 * This utility class traverses the prototype chain during class registration to:
 * - Aggregate property configurations
 * - Aggregate event listeners
 * - Aggregate CSS styles strings
 * - Auto-bind event handlers to maintain proper 'this' context
 *
 * This class is internal and instantiated during the `Register()` process.
 */
export declare class ProtoChain {
	/**
	 * Array of inherited class constructors
	 */
	constructors: ProtoConstructors;
	/**
	 * Aggregated property definition declared in `static get Properties()` or @Property() decorators
	 */
	properties: ProtoProperties;
	/**
	 * Aggregated listener definition declared in `static get Listeners()`
	 */
	listeners: ProtoListeners;
	/**
	 * Aggregated default value for properties declared in `static get Defaults()` or @Default() decorators
	*/
	defaults: Record<string, any>;
	/**
	 * Aggregated CSS style definition declared in `static get Style()`
	 */
	styles: string;
	/**
	 * Array of function names that start with "on[A-Z]" or "_on[A-Z]" for auto-binding.
	 */
	handlers: ProtoHandlers;
	/**
	 * Array of property names of mutation-observed object properties.
	 */
	observedObjectProperties: string[];
	/**
	 * Array of property names of mutation-observed Node properties.
	 */
	observedNodeProperties: string[];
	/**
	 * Creates an instance of `ProtoChain` for specified class constructor.
	 * @param {NodeConstructor<any>} ioNodeConstructor - Owner `Node` constructor.
	 */
	constructor(ioNodeConstructor: NodeConstructor<any>);
	/**
	 * Adds properties defined in decorators to the properties array.
	 * @param {NodeConstructor<any>} ioNodeConstructor - Owner `Node` constructor.
	 */
	addPropertiesFromDecorators(ioNodeConstructor: NodeConstructor<any>): void;
	/**
	 * Adds static properties from `static get Properties()` to the properties array.
	 * Only process properties if they differ from superclass.
	 * This prevents 'static get Properties()' from overriding subclass properties defined in decorators.
	 * @param {PropertyDefinitions} properties - Properties to add
	 * @param {string} prevHash - Previous properties hash
	 * @returns {string} - Updated properties hash
	 */
	addStaticProperties(properties?: PropertyDefinitions, prevHash?: string): string;
	/**
	 * Merges or appends a listener definitions to the existing listeners array.
	 * @param {ListenerDefinitions} listenerDefs - Listener definitions to add
	 */
	addListeners(listenerDefs?: ListenerDefinitions): void;
	/**
	 * Adds a style string to the styles array.
	 * @param {string} style - Style string to add
	 */
	addStyles(style?: string): void;
	/**
	 * Adds function names that start with "on[A-Z]" or "_on[A-Z]" to the handlers array.
	 * @param {Node} proto - Prototype object to search for handlers
	 */
	addHandlers(proto: Node$1): void;
	/**
	 * Creates observedObjectProperties array.
	 * @returns {string[]} - Array of property names that are observed as native objects.
	 */
	getObservedObjectProperties(): string[];
	/**
	 * Creates observedNodeProperties array.
	 * @returns {string[]} - Array of property names that are observed as Node objects.
	 */
	getObservedNodeProperties(): string[];
	/**
	 * Debug only.
	 * Validates property definitions.
	 * Logs warnings for incorrect property definitions.
	 * @returns {void}
	 */
	validateProperties(): void;
	/**
	 * Auto-binds event handler methods (starting with 'on[A-Z]' or '_on[A-Z]') to preserve their 'this' context.
	 * NOTE: Defining handlers as arrow functions will not work because they are not defined before constructor has finished.
	 * @param {Node} node - Target node instance
	 */
	autobindHandlers(node: Node$1): void;
}
export type CallbackFunction = (arg?: any) => void;
/**
 * Returns a promise that resolves when the next frame is rendered.
 * @returns {Promise<void>}
 */
export declare function nextQueue(): Promise<void>;
/**
 * Throttles function execution once per frame (rAF).
 * @param {CallbackFunction} func - Function to throttle.
 * @param {*} [arg] - Optional argument for throttled function.
 * @param {Node} [node] - Node instance.
 * @param {number} [delay] - Delay in frames.
 */
export declare function throttle(func: CallbackFunction, arg?: any, node?: Node$1, delay?: number): void;
/**
 * Debounces function execution to next frame (rAF).
 * @param {CallbackFunction} func - Function to debounce.
 * @param {*} [arg] - Optional argument for debounced function.
 * @param {Node} [node] - Node instance.
 * @param {number} [delay] - Delay in frames.
 */
export declare function debounce(func: CallbackFunction, arg?: any, node?: Node$1, delay?: number): void;
export type AnyConstructor = new (...args: any[]) => unknown;
export type PropertyDefinitions = Record<string, PropertyDefinitionLoose>;
export type ListenerDefinitions = Record<string, ListenerDefinitionLoose>;
export interface NodeConstructor<T> {
	new (...args: any[]): T;
	Properties?: PropertyDefinitions;
	Listeners?: ListenerDefinitions;
	Style?: string;
}
export type prefix<TKey, TPrefix extends string> = TKey extends string ? `${TPrefix}${TKey}` : never;
export type PropsWithBinding<T> = {
	[K in keyof T]: Exclude<T[K], undefined> | Binding<Exclude<T[K], undefined>>;
};
export type NodeProps = PropsWithBinding<{
	reactivity?: "none" | "immediate" | "throttled" | "debounced";
	[key: prefix<string, "@">]: string | ((event: CustomEvent<any>) => void) | ((event: PointerEvent) => void);
}>;
/**
 * Core mixin for `Node` classes.
 * @param {function} superclass - Class to extend.
 * @return {function} - Extended class constructor with `NodeMixin` applied to it.
 */
export declare function NodeMixin<T extends NodeConstructor<any>>(superclass: T): {
	new (args?: NodeProps, ...superProps: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding<any>>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		applyProperties(props: any, skipDispatch?: boolean): void;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		setProperties(props: any): void;
		/**
		 * Sets the property value, connects the bindings and sets attributes for properties with attribute reflection enabled.
		 * @param {string} name Property name to set value of.
		 * @param {any} value Peroperty value.
		 * @param {boolean} [debounce] flag to skip event dispatch.
		 */
		setProperty(name: string, value: any, debounce?: boolean): void;
		/**
		 * Sets value property and emits `value-input` event.
		 * Use this when value property is set by user action (e.g. mouse click).
		 * @param {*} value - Property value.
		 */
		inputValue(value: any): void;
		/**
		 * default change handler.
		 * Invoked when one of the properties change.
		 */
		changed(): void;
		init(): void;
		/**
		 * Adds property change to the queue.
		 * @param {string} name - Property name.
		 * @param {*} value - Property value.
		 * @param {*} oldValue - Old property value.
		 */
		queue(name: string, value: any, oldValue: any): void;
		/**
		 * Dispatches the queue in the next rAF cycle if `reactivity` property is set to `"debounced"`. Otherwise it dispatches the queue immediately.
		 */
		dispatchQueue(debounce?: boolean): void;
		/**
		 * Throttles function execution once per frame (rAF).
		 * @param {CallbackFunction} func - Function to throttle.
		 * @param {*} [arg] - Optional argument for throttled function.
		 */
		throttle(func: CallbackFunction, arg?: any, timeout?: number): void;
		/**
		 * Debounces function execution to next frame (rAF).
		 * @param {CallbackFunction} func - Function to debounce.
		 * @param {*} [arg] - Optional argument for debounced function.
		 */
		debounce(func: CallbackFunction, arg?: any, timeout?: number): void;
		/**
		 * Event handler for 'object-mutated' events emitted from the properties which are Node instances.
		 * Aditionally, it handles events emitted from the `window` object (used for observing non-Node object properties).
		 * NOTE: non-Node objects don't emit 'object-mutated' event automatically - something needs to emit this for them.
		 * This is used to evoke '[propName]Mutated()' mutation handler
		 * @param {Object} event - Event payload.
		 * @param {EventTarget} event.target - Node that emitted the event.
		 * @param {Node} event.detail.object - Mutated node.
		 */
		onPropertyMutated(event: CustomEvent): true | undefined;
		/**
		 * Returns a binding to a specified property`.
		 * @param {string} name - Property name to bind to.
		 * @return {Binding} Binding object.
		 */
		bind<T_1>(name: string): Binding<T_1>;
		/**
		 * Unbinds a binding to a specified property`.
		 * @param {string} name - Property name to unbind.
		 */
		unbind(name: string): void;
		/**
		 * Wrapper for addEventListener.
		 * @param {string} type - listener name.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions): void;
		/**
		 * Wrapper for removeEventListener.
		 * @param {string} type - event name to listen to.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		removeEventListener(type: string, listener?: AnyEventListener, options?: AddEventListenerOptions): void;
		/**
		 * Wrapper for dispatchEvent.
		 * @param {string} type - event name to dispatch.
		 * @param {Object} detail - event detail.
		 * @param {boolean} bubbles - event bubbles.
		 * @param {HTMLElement|Node} src source node/element to dispatch event from.
		 */
		dispatchEvent(type: string, detail?: any, bubbles?: boolean, src?: Node$1 | HTMLElement | Document | Window): void;
		/**
		 * Disposes all core.
		 * Use this when instance is no longer needed.
		 */
		dispose(): void;
		Register(ioNodeConstructor: typeof Node$1): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDefinitions;
};
declare const Node_base: {
	new (args?: PropsWithBinding<{
		[key: `@${string}`]: string | ((event: CustomEvent<any>) => void) | ((event: PointerEvent) => void);
		reactivity?: "none" | "immediate" | "throttled" | "debounced";
	}>, ...superProps: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding<any>>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		applyProperties(props: any, skipDispatch?: boolean): void;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		setProperties(props: any): void;
		/**
		 * Sets the property value, connects the bindings and sets attributes for properties with attribute reflection enabled.
		 * @param {string} name Property name to set value of.
		 * @param {any} value Peroperty value.
		 * @param {boolean} [debounce] flag to skip event dispatch.
		 */
		setProperty(name: string, value: any, debounce?: boolean): void;
		/**
		 * Sets value property and emits `value-input` event.
		 * Use this when value property is set by user action (e.g. mouse click).
		 * @param {*} value - Property value.
		 */
		inputValue(value: any): void;
		/**
		 * default change handler.
		 * Invoked when one of the properties change.
		 */
		changed(): void;
		init(): void;
		/**
		 * Adds property change to the queue.
		 * @param {string} name - Property name.
		 * @param {*} value - Property value.
		 * @param {*} oldValue - Old property value.
		 */
		queue(name: string, value: any, oldValue: any): void;
		/**
		 * Dispatches the queue in the next rAF cycle if `reactivity` property is set to `"debounced"`. Otherwise it dispatches the queue immediately.
		 */
		dispatchQueue(debounce?: boolean): void;
		/**
		 * Throttles function execution once per frame (rAF).
		 * @param {CallbackFunction} func - Function to throttle.
		 * @param {*} [arg] - Optional argument for throttled function.
		 */
		throttle(func: CallbackFunction, arg?: any, timeout?: number): void;
		/**
		 * Debounces function execution to next frame (rAF).
		 * @param {CallbackFunction} func - Function to debounce.
		 * @param {*} [arg] - Optional argument for debounced function.
		 */
		debounce(func: CallbackFunction, arg?: any, timeout?: number): void;
		/**
		 * Event handler for 'object-mutated' events emitted from the properties which are Node instances.
		 * Aditionally, it handles events emitted from the `window` object (used for observing non-Node object properties).
		 * NOTE: non-Node objects don't emit 'object-mutated' event automatically - something needs to emit this for them.
		 * This is used to evoke '[propName]Mutated()' mutation handler
		 * @param {Object} event - Event payload.
		 * @param {EventTarget} event.target - Node that emitted the event.
		 * @param {Node} event.detail.object - Mutated node.
		 */
		onPropertyMutated(event: CustomEvent): true | undefined;
		/**
		 * Returns a binding to a specified property`.
		 * @param {string} name - Property name to bind to.
		 * @return {Binding} Binding object.
		 */
		bind<T>(name: string): Binding<T>;
		/**
		 * Unbinds a binding to a specified property`.
		 * @param {string} name - Property name to unbind.
		 */
		unbind(name: string): void;
		/**
		 * Wrapper for addEventListener.
		 * @param {string} type - listener name.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions): void;
		/**
		 * Wrapper for removeEventListener.
		 * @param {string} type - event name to listen to.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		removeEventListener(type: string, listener?: AnyEventListener, options?: AddEventListenerOptions): void;
		/**
		 * Wrapper for dispatchEvent.
		 * @param {string} type - event name to dispatch.
		 * @param {Object} detail - event detail.
		 * @param {boolean} bubbles - event bubbles.
		 * @param {HTMLElement|Node} src source node/element to dispatch event from.
		 */
		dispatchEvent(type: string, detail?: any, bubbles?: boolean, src?: Node$1 | HTMLElement | Document | Window): void;
		/**
		 * Disposes all core.
		 * Use this when instance is no longer needed.
		 */
		dispose(): void;
		Register(ioNodeConstructor: typeof Node$1): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDefinitions;
};
/**
 * NodeMixin applied to `Object` class.
 */
declare class Node$1 extends Node_base {
}
export interface Change {
	property: string;
	value: any;
	oldValue: any;
}
export interface Changes {
	[property: string]: Change;
}
export interface ChangeEvent extends Omit<CustomEvent<Change>, "target"> {
	readonly target: Node$1;
	readonly detail: Change;
	readonly path: Node$1[];
}
/**
 * A queue system for managing and batching property changes in `Node` and `IoElement` nodes.
 *
 * This class implements a First-In-First-Out (FIFO) queue that:
 * - Collects property changes and their associated values
 * - Coalesces multiple changes to the same property
 * - Dispatches changes in order through events (e.g., '[propName]-changed')
 * - Invokes corresponding change handlers (e.g., [propName]Changed())
 * - Triggers a final 'changed()' handler after processing all changes
 * - Dispatches a final 'changed' event after processing all changes
 *
 * The queue helps optimize performance by batching multiple property changes
 * and preventing redundant updates when the same property changes multiple
 * times within a single execution cycle.
 */
export declare class ChangeQueue {
	readonly node: Node$1;
	readonly changes: Change[];
	dispatchedChange: boolean;
	dispatching: boolean;
	/**
	 * Creates change queue for the specified owner instance of `Node`.
	 * @param {Node} node - Owner node.
	 */
	constructor(node: Node$1);
	/**
	 * Adds property change payload to the queue by specifying property name, previous and the new value.
	 * If the change is already in the queue, the new value is updated in-queue.
	 * If the new value is the same as the original value, the change is removed from the queue.
	 * @param {string} property - Property name.
	 * @param {any} value Property value.
	 * @param {any} oldValue Old property value.
	 */
	queue(property: string, value: any, oldValue: any): void;
	/**
	 * Dispatches and clears the queue.
	 * For each property change in the queue:
	 *  - It executes node's `[propName]Changed(change)` change handler function if it is defined.
	 *  - It fires the `'[propName]-changed'` `ChangeEvent` from the owner node with `Change` data as `event.detail`.
	 * After all changes are dispatched it invokes `.changed()` function of the owner node instance and fires `'changed'` event.
	 */
	dispatch(): void;
	/**
	 * Clears the queue and removes the node reference for garbage collection.
	 * Use this when node queue is no longer needed.
	 */
	dispose(): void;
}
export type IoElementProps = NativeElementProps & NodeProps;
declare const IoElement_base: {
	new (args?: PropsWithBinding<{
		[key: `@${string}`]: string | ((event: CustomEvent<any>) => void) | ((event: PointerEvent) => void);
		reactivity?: "none" | "immediate" | "throttled" | "debounced";
	}>, ...superProps: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding<any>>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		applyProperties(props: any, skipDispatch?: boolean): void;
		setProperties(props: any): void;
		setProperty(name: string, value: any, debounce?: boolean): void;
		inputValue(value: any): void;
		changed(): void;
		init(): void;
		queue(name: string, value: any, oldValue: any): void;
		dispatchQueue(debounce?: boolean): void;
		throttle(func: CallbackFunction, arg?: any, timeout?: number): void;
		debounce(func: CallbackFunction, arg?: any, timeout?: number): void;
		onPropertyMutated(event: CustomEvent): true | undefined;
		bind<T>(name: string): Binding<T>;
		unbind(name: string): void;
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions): void;
		removeEventListener(type: string, listener?: AnyEventListener, options?: AddEventListenerOptions): void;
		dispatchEvent(type: string, detail?: any, bubbles?: boolean, src?: Node$1 | HTMLElement | Document | Window): void;
		dispose(): void;
		Register(ioNodeConstructor: typeof Node$1): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDefinitions;
};
/**
 * Core `IoElement` class.
 */
export declare class IoElement extends IoElement_base {
	static vConstructor: (arg0?: IoElementProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	$: Record<string, HTMLElement | IoElement>;
	constructor(args?: IoElementProps);
	/**
	* Add resize listener if `onResized()` is defined in subclass.
	*/
	connectedCallback(): void;
	/**
	* Removes resize listener if `onResized()` is defined in subclass.
	*/
	disconnectedCallback(): void;
	setProperty(name: string, value: any, debounce?: boolean): void;
	/**
	 * Renders DOM from virtual DOM arrays.
	 * @param {Array} vDOMElements - Array of VDOMElement[] children.
	 * @param {HTMLElement} [host] - Optional template target.
	 * @param {boolean} [cache] - Optional don't reuse existing elements and skip dispose
	 */
	template(vDOMElements: Array<VDOMElement | null>, host?: HTMLElement | IoElement, cache?: boolean): void;
	/**
	 * Recurively traverses virtual DOM elements.
	 * TODO: test element.traverse() function!
	 * @param {Array} vDOMElements - Array of VDOMElements elements.
	 * @param {HTMLElement} [host] - Optional template target.
	 * @param {boolean} [cache] - Optional don't reuse existing elements and skip dispose
	 */
	traverse(vChildren: VDOMElement[], host: HTMLElement | IoElement, cache?: boolean): void;
	/**
	* Helper function to flatten textContent into a single TextNode.
	* Update textContent via TextNode is better for layout performance.
	* @param {HTMLElement} element - Element to flatten.
	*/
	_flattenTextNode(element: HTMLElement | IoElement): void;
	/**
	 * Sets multiple properties in batch.
	 * [property]-changed` events will be broadcast in the end.
	 * @param {Object} props - Map of property names and values.
	 */
	applyProperties(props: any, skipDispatch?: boolean): void;
	/**
	* Alias for HTMLElement setAttribute where falsey values remove the attribute.
	* @param {string} attr - Attribute name.
	* @param {*} value - Attribute value.
	*/
	setAttribute(attr: string, value: boolean | number | string): void;
	/**
	 * Returns a vDOM-like representation of the element with children and attributes. This feature is used in testing.
	 */
	toVDOM(): VDOMElement;
	Register(ioNodeConstructor: typeof Node$1): void;
}
export declare const ioElement: (arg0?: IoElementProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type Direction = "left" | "right" | "down" | "up";
export declare function focusTo(srcElement: IoElement | HTMLElement, dir: Direction): void;
export type VDOMElement = {
	tag: string;
	props?: Record<string, any>;
	children?: Array<VDOMElement | null> | string;
};
export type IntegerNumeric = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32;
export type IntegerString = `${IntegerNumeric}`;
export type IntegerAny = IntegerNumeric | IntegerString;
type Boolean$1 = boolean | "true" | "false";
export type Lang = "ab" | "aa" | "af" | "ak" | "sq" | "am" | "ar" | "an" | "hy" | "as" | "av" | "ae" | "ay" | "az" | "bm" | "ba" | "eu" | "be" | "bn" | "bh" | "bi" | "bs" | "br" | "bg" | "my" | "ca" | "ch" | "ce" | "ny" | "zh" | "zh-ans" | "zh-ant" | "cv" | "kw" | "co" | "cr" | "hr" | "cs" | "da" | "dv" | "nl" | "dz" | "en" | "eo" | "et" | "ee" | "fo" | "fj" | "fi" | "fr" | "ff" | "gl" | "gd" | "ka" | "de" | "el" | "kl" | "gn" | "gu" | "ht" | "ha" | "he" | "hz" | "hi" | "ho" | "hu" | "is" | "io" | "ig" | "id in" | "ia" | "ie" | "iu" | "ik" | "ga" | "it" | "ja" | "jv" | "kn" | "kr" | "ks" | "kk" | "km" | "ki" | "rw" | "rn" | "ky" | "kv" | "kg" | "ko" | "ku" | "kj" | "lo" | "la" | "lv" | "li" | "ln" | "lt" | "lu" | "lg" | "lb" | "gv" | "mk" | "mg" | "ms" | "ml" | "mt" | "mi" | "mr" | "mh" | "mo" | "mn" | "na" | "nv" | "ng" | "nd" | "ne" | "no" | "nb" | "nn" | "oc" | "oj" | "cu" | "or" | "om" | "os" | "pi" | "ps" | "fa" | "pl" | "pt" | "pa" | "qu" | "rm" | "ro" | "ru" | "se" | "sm" | "sg" | "sa" | "sr" | "sh" | "st" | "tn" | "sn" | "ii" | "sd" | "si" | "ss" | "sk" | "sl" | "so" | "nr" | "es" | "su" | "sw" | "sv" | "tl" | "ty" | "tg" | "ta" | "tt" | "te" | "th" | "bo" | "ti" | "to" | "ts" | "tr" | "tk" | "tw" | "ug" | "uk" | "ur" | "uz" | "ve" | "vi" | "vo" | "wa" | "cy" | "wo" | "fy" | "xh" | "yi" | "ji" | "yo" | "za" | "zu";
export type PropsWithUndefined<T> = {
	[K in keyof T]: T[K] | undefined;
};
export type AriaProps = PropsWithUndefined<{
	role?: "alert" | "alertdialog" | "application" | "article" | "banner" | "button" | "cell" | "checkbox" | "columnheader" | "combobox" | "complementary" | "contentinfo" | "definition" | "dialog" | "directory" | "document" | "feed" | "figure" | "form" | "grid" | "gridcell" | "group" | "heading" | "img" | "link" | "list" | "listbox" | "listitem" | "log" | "main" | "marquee" | "math" | "menu" | "menubar" | "menuitem" | "menuitemcheckbox" | "menuitemradio" | "navigation" | "none" | "note" | "option" | "presentation" | "progressbar" | "radio" | "radiogroup" | "region" | "row" | "rowgroup" | "rowheader" | "scrollbar" | "search" | "searchbox" | "separator" | "slider" | "spinbutton" | "status" | "switch" | "tab" | "table" | "tablist" | "tabpanel" | "term" | "textbox" | "timer" | "toolbar" | "tooltip" | "tree" | "treegrid" | "treeitem";
	ariaAtomic?: Boolean$1;
	ariaAutoComplete?: "inline" | "list" | "both" | "none";
	ariaBusy?: Boolean$1;
	ariaBrailleLabel?: string;
	ariaBrailleRoleDescription?: string;
	ariaChecked?: Boolean$1 | "mixed";
	ariaColCount?: IntegerAny;
	ariaColIndex?: IntegerAny;
	ariaColSpan?: IntegerAny;
	ariaCurrent?: Boolean$1 | "page" | "step" | "location" | "date" | "time" | "true" | "false";
	ariaDescription?: string;
	ariaDisabled?: Boolean$1;
	ariaExpanded?: Boolean$1 | "undefined";
	ariaHasPopup?: Boolean$1 | "menu" | "listbox" | "tree" | "grid" | "dialog";
	ariaHidden?: Boolean$1 | "undefined";
	ariaInvalid?: Boolean$1 | "grammar" | "spelling";
	ariaKeyShortcuts?: string;
	ariaLabel?: string;
	ariaLevel?: IntegerAny;
	ariaLive?: "assertive" | "polite" | "off";
	ariaModal?: Boolean$1;
	ariaMultiLine?: Boolean$1;
	ariaMultiSelectable?: Boolean$1;
	ariaOrientation?: "horizontal" | "vertical" | "undefined";
	ariaPlaceholder?: string;
	ariaPosInSet?: IntegerAny;
	ariaPressed?: Boolean$1 | "mixed" | "undefined";
	ariaReadOnly?: Boolean$1;
	ariaRequired?: Boolean$1;
	ariaRelevant?: "additions" | "all" | "removals" | "text";
	ariaRoleDescription?: string;
	ariaRowCount?: IntegerAny;
	ariaRowIndex?: IntegerAny;
	ariaRowSpan?: IntegerAny;
	ariaSelected?: Boolean$1 | "undefined";
	ariaSetSize?: IntegerAny;
	ariaSort?: "none" | "ascending" | "descending" | "other";
	ariaValueMax?: number | `${number}`;
	ariaValueMin?: number | `${number}`;
	ariaValueNow?: number | `${number}`;
	ariaValueText?: string;
	ariaColIndexText?: string;
	ariaRowIndexText?: string;
	ariaActiveDescendantElement?: HTMLElement;
	ariaControlsElements?: HTMLElement;
	ariaDescribedByElements?: HTMLElement;
	ariaDetailsElements?: HTMLElement;
	ariaErrorMessageElements?: HTMLElement;
	ariaFlowToElements?: HTMLElement;
	ariaLabelledByElements?: HTMLElement;
}>;
export type OtherHTMLElementProps = PropsWithUndefined<{
	target?: "_blank" | "_self" | "_parent" | "_top" | string;
	download?: string;
	ping?: string;
	rel?: string;
	relList?: DOMTokenList;
	hreflang?: Lang;
	type?: string;
	referrerPolicy?: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
	text?: string;
	coords?: string;
	charset?: string;
	name?: string;
	rev?: string;
	shape?: "rect" | "circle" | "poly" | "default";
	protocol?: string;
	username?: string;
	password?: string;
	host?: string;
	hostname?: string;
	port?: string;
	pathname?: string;
	search?: string;
	hash?: string;
	href?: string;
	attributionSrc?: string;
	alt?: string;
	noHref?: boolean;
	cite?: string;
	clear?: "left" | "right" | "both" | "all" | "none";
	disabled?: boolean;
	formAction?: string;
	formEnctype?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain";
	formMethod?: "get" | "post" | "dialog";
	formNoValidate?: boolean;
	formTarget?: "_blank" | "_self" | "_parent" | "_top" | string;
	value?: string | number;
	commandForElement?: string;
	command?: string;
	width?: number | string;
	height?: number | string;
	span?: number;
	ch?: string;
	chOff?: string;
	vAlign?: "top" | "middle" | "bottom" | "baseline";
	dateTime?: string;
	open?: boolean;
	returnValue?: string;
	closedBy?: string;
	compact?: boolean;
	src?: string;
	color?: string;
	face?: string;
	size?: number | string;
	acceptCharset?: string;
	action?: string;
	autocomplete?: "on" | "off";
	enctype?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain";
	encoding?: string;
	method?: "get" | "post" | "dialog";
	noValidate?: boolean;
	scrolling?: "yes" | "no" | "auto";
	frameBorder?: "0" | "1";
	longDesc?: string;
	noResize?: boolean;
	marginHeight?: number | string;
	marginWidth?: number | string;
	cols?: number | string;
	rows?: number | string;
	noShade?: boolean;
	version?: string;
	srcdoc?: string;
	sandbox?: string;
	allowFullscreen?: boolean;
	csp?: string;
	allow?: string;
	loading?: "eager" | "lazy";
	credentialless?: boolean;
	allowPaymentRequest?: boolean;
	privateToken?: boolean;
	browsingTopics?: boolean;
	adAuctionHeaders?: boolean;
	sharedStorageWritable?: boolean;
	srcset?: string;
	sizes?: string;
	crossOrigin?: "anonymous" | "use-credentials" | "";
	useMap?: string;
	isMap?: boolean;
	decoding?: "sync" | "async" | "auto";
	fetchPriority?: "high" | "low" | "auto";
	lowsrc?: string;
	hspace?: number | string;
	vspace?: number | string;
	border?: number | string;
	accept?: string;
	defaultChecked?: boolean;
	checked?: boolean;
	dirName?: string;
	files?: FileList;
	indeterminate?: boolean;
	max?: number | string;
	maxLength?: number;
	min?: number | string;
	minLength?: number;
	multiple?: boolean;
	pattern?: string;
	placeholder?: string;
	readOnly?: boolean;
	required?: boolean;
	step?: number | string;
	defaultValue?: string;
	valueAsDate?: Date | null;
	valueAsNumber?: number;
	selectionStart?: number;
	selectionEnd?: number;
	selectionDirection?: "forward" | "backward" | "none";
	webkitdirectory?: boolean;
	incremental?: boolean;
	htmlFor?: string;
	media?: string;
	as?: string;
	imageSrcset?: string;
	imageSizes?: string;
	integrity?: string;
	blocking?: boolean;
	httpEquiv?: string;
	content?: string;
	scheme?: string;
	low?: number | string;
	high?: number | string;
	optimum?: number | string;
	data?: string;
	archive?: string;
	code?: string;
	declare?: boolean;
	standby?: string;
	codeBase?: string;
	codeType?: string;
	reversed?: boolean;
	start?: number;
	label?: string;
	defaultSelected?: boolean;
	selected?: boolean;
	valueType?: string;
	noModule?: boolean;
	async?: boolean;
	defer?: boolean;
	event?: string;
	length?: number;
	selectedIndex?: number;
	caption?: string;
	tHead?: string;
	tFoot?: string;
	frame?: string;
	rules?: string;
	summary?: string;
	cellPadding?: string;
	cellSpacing?: string;
	colSpan?: number;
	rowSpan?: number;
	headers?: string;
	axis?: string;
	noWrap?: boolean;
	abbr?: string;
	scope?: "row" | "col" | "rowgroup" | "colgroup";
	shadowRootMode?: "open" | "closed";
	shadowRootDelegatesFocus?: boolean;
	shadowRootClonable?: boolean;
	shadowRootSerializable?: boolean;
	wrap?: "soft" | "hard";
	kind?: string;
	srclang?: Lang;
	default?: boolean;
	poster?: string;
	playsInline?: boolean;
	disablePictureInPicture?: boolean;
}>;
export type NativeElementProps = AriaProps & PropsWithUndefined<{
	title?: string;
	lang?: Lang;
	translate?: any;
	dir?: any;
	hidden?: any;
	inert?: any;
	accessKey?: any;
	draggable?: any;
	spellcheck?: boolean;
	autocapitalize?: any;
	contentEditable?: Boolean$1;
	enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send";
	inputMode?: "decimal" | "email" | "numeric" | "tel" | "search" | "url" | "text";
	virtualKeyboardPolicy?: "manual" | "auto";
	innerText?: string;
	outerText?: string;
	writingSuggestions?: Boolean$1;
	autofocus?: boolean;
	tabIndex?: IntegerAny | -1 | "-1";
	style?: Record<string, string>;
	id?: string;
	class?: string;
	innerHTML?: string;
	outerHTML?: string;
	scrollTop?: number;
	scrollLeft?: number;
	scrollWidth?: number;
	scrollHeight?: number;
	textContent?: string;
}>;
/**
 * Sets native element's properties and attributes.
 * - style: formatted as Object.
 * - class: shorthand for className.
 * - "@" + event: name for event listener.
 * @param {HTMLElement} element - Native HTMLElement to apply properties to.
 * @param {Object} props - Element properties.
 */
export declare const applyNativeElementProps: (element: HTMLElement, props: NativeElementProps) => void;
/**
 * Creates an element from a virtual DOM object.
 * @param {VDOMElement} vDOMElement - Virtual DOM object.
 * @return {HTMLElement} - Created element.
 */
export declare const constructElement: (vDOMElement: VDOMElement) => HTMLElement;
/**
 * Disposes the element's children.
 * @param {IoElement} element - Element to dispose children of.
 */
export declare const disposeChildren: (element: IoElement) => void;
/**
 * Converts an element to a virtual dom object.
 * NODE: This vDOM contains elements only attributes (not properties).
 * Used for testing but might be useful for other things.
 * @param {IoElement | HTMLElement} element - Element to convert.
 * @return {VDOMElement} - Virtual dom object.
 */
export declare const toVDOM: (element: IoElement | HTMLElement) => VDOMElement;
/**
 * Autobinds a method to the instance.
 * @param {Function} target - The target object.
 * @param {string | symbol} propertyKey - The name of the property.
 * @param {PropertyDescriptor} descriptor - The descriptor of the property.
 * @returns {PropertyDescriptor} The modified descriptor.
 */
export declare const Autobind: (target: Object, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {
	configurable: boolean;
	enumerable: boolean;
	get(): any;
	set(value: any): void;
};
export declare const propertyDefaults: WeakMap<AnyConstructor, Record<string, any>>;
/**
 * Sets a default value for a property.
 * @param {any} defaultValue - Default value.
 * @return {Function} Property decorator function.
 */
export declare const Default: (defaultValue: any) => (target: Node$1, propertyName: string) => void;
/**
 * Register function to be called once per class.
 * @param {Node} ioNodeConstructor - Node class to register.
 */
export declare function Register(ioNodeConstructor: typeof Node$1): void;
export declare const propertyDecorators: WeakMap<AnyConstructor, PropertyDefinitions>;
/**
 * Allows property definitions using decorator pattern.
 * @param {PropertyDefinitionLoose} propertyDefinition - Property definition.
 * @return {Function} Property decorator function.
 */
export declare const Property: (propertyDefinition?: PropertyDefinitionLoose) => (target: Node$1, propertyName: string) => void;
export type StorageProps = NodeProps & {
	key: string;
	value?: any;
	default?: any;
	storage?: "hash" | "local" | "none";
};
export declare function genObjectStorageID(object: Record<string, any>): string;
export declare class StorageNode extends Node$1 {
	key: string;
	value: any;
	default: any;
	storage: "hash" | "local" | "none";
	binding: Binding<any>;
	constructor(props: StorageProps);
	dispose(): void;
	_clearStorage(): void;
	valueChanged(): void;
	removeValueToHash(): void;
	saveValueToHash(): void;
}
declare const Storage$1: ((props: StorageProps) => Binding<any>) & {
	permit(): void;
	unpermit(): void;
};
export declare class Color {
	r: number;
	g: number;
	b: number;
	a: number;
	constructor(r: number, g: number, b: number, a: number);
	toCss(): string;
}
export type ThemeVars = {
	spacing: number;
	spacing2: number;
	spacing3: number;
	spacing5: number;
	spacing8: number;
	fontSize: number;
	lineHeight: number;
	fieldHeight: number;
	fieldHeight2: number;
	fieldHeight3: number;
	fieldHeight4: number;
	fieldHeight5: number;
	fieldHeight6: number;
	fieldHeight7: number;
	fieldHeight8: number;
	fieldHeight9: number;
	fieldHeight10: number;
	fieldHeight11: number;
	fieldHeight12: number;
	borderRadius: number;
	borderRadius2: number;
	borderWidth: number;
	borderColor: Color;
	borderColorLight: Color;
	borderColorDark: Color;
	bgColor: Color;
	bgColorStrong: Color;
	bgColorDimmed: Color;
	bgColorRed: Color;
	bgColorGreen: Color;
	bgColorBlue: Color;
	bgColorInput: Color;
	color: Color;
	colorStrong: Color;
	colorDimmed: Color;
	colorRed: Color;
	colorGreen: Color;
	colorBlue: Color;
	colorWhite: Color;
	colorInput: Color;
	gradientColorStart: Color;
	gradientColorEnd: Color;
	shadowColor: Color;
};
export declare const LIGHT_THEME: ThemeVars;
export declare const DARK_THEME: ThemeVars;
/**
 * `Theme` is designed to be used as `ThemeSingleton`. It holds top-level CSS variables for Io-Gui design system.
 * CSS Variables are grouped in different themes and can be collectively switched by changing `theme` property.
 *
 * ```javascript
 * ThemeSingleton.themeID = 'dark';
 * ```
 *
 * CSS color variables such as `'--io_color'` and `'--io_bgColor'` are mapped to numeric properties `io_color` and `io_bgColor`.
 */
export declare class Theme extends Node$1 {
	static get Properties(): PropertyDefinitions;
	themeDefaults: Record<string, ThemeVars>;
	themeID: string;
	reactivity: string;
	init(): void;
	registerTheme(themeID: string, theme: ThemeVars): void;
	reset(): void;
	themeIDChanged(): void;
	onPropertyMutated(event: CustomEvent): true | undefined;
	fontSizeChanged(): void;
	lineHeightChanged(): void;
	changed(): void;
	onSaveTheme(): void;
}
export declare const ThemeSingleton: Theme;
export type IoGlProps = IoElementProps & PropsWithBinding<{
	color?: [
		number,
		number,
		number,
		number
	];
}>;
export declare class IoGl extends IoElement {
	#private;
	static vConstructor: (arg0?: IoGlProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	theme: typeof ThemeSingleton;
	size: [
		number,
		number
	];
	color: [
		number,
		number,
		number,
		number
	];
	transparent: boolean;
	pxRatio: number;
	reactivity: string;
	static get Vert(): string;
	static get GlUtils(): string;
	static get Frag(): string;
	initPropertyUniform(name: string, property: PropertyDefinition$1): string;
	initShader(): WebGLProgram;
	constructor(args?: IoGlProps);
	onResized(): void;
	get ctx(): CanvasRenderingContext2D;
	themeMutated(): void;
	changed(): void;
	_onRender(): void;
	setShaderProgram(): void;
	updatePropertyUniform(name: string, property: PropertyInstance): void;
	updateThemeUniforms(): void;
	setUniform(name: string, value: any): void;
	Register(ioNodeConstructor: typeof IoElement): void;
}
export declare const ioGl: (arg0?: IoGlProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export declare const glsl: {
	saturate: string;
	translate: string;
	circle: string;
	rectangle: string;
	paintDerivativeGrid2D: string;
	lineVertical: string;
	lineHorizontal: string;
	lineCross2d: string;
	checker: string;
	checkerX: string;
	checkerY: string;
	compose: string;
	paintHorizontalLine: string;
	hue2rgb: string;
	hsv2rgb: string;
	hsl2rgb: string;
};
export declare const HTML_ELEMENTS: string[];
export declare const a: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, abbr: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, acronym: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, address: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, applet: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, area: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, article: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, aside: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, audio: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, b: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, base: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, basefont: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, bdi: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, bdo: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, big: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, blockquote: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, body: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, br: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, button: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, canvas: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, caption: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, center: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, cite: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, code: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, col: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, colgroup: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, data: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, datalist: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, dd: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, del: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, details: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, dfn: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, dialog: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, dir: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, div: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, dl: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, dt: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, em: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, embed: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, fieldset: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, figcaption: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, figure: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, font: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, footer: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, form: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, frame: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, frameset: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, head: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, header: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, hgroup: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, h1: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, h2: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, h3: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, h4: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, h5: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, h6: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, hr: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, html: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, i: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, iframe: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, img: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, input: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, ins: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, kbd: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, keygen: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, label: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, legend: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, li: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, link: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, main: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, map: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, mark: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, menu: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, menuitem: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, meta: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, meter: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, nav: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, noframes: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, noscript: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, object: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, ol: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, optgroup: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, option: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, output: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, p: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, param: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, picture: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, pre: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, progress: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, q: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, rp: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, rt: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, ruby: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, s: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, samp: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, script: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, section: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, select: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, small: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, source: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, span: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, strike: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, strong: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, style: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, sub: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, summary: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, sup: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, svg: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, table: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, tbody: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, td: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, template: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, textarea: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, tfoot: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, th: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, thead: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, time: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, title: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, tr: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, track: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, tt: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, u: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, ul: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, video: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement, wbr: (arg0?: (NativeElementProps & OtherHTMLElementProps) | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type NudgeDirection = "none" | "pointer" | "up" | "left" | "down" | "right";
export type IoOverlayProps = IoElementProps & PropsWithBinding<{
	expanded?: boolean;
}>;
declare class IoOverlay extends IoElement {
	static get Style(): string;
	expanded: boolean;
	static get Listeners(): {
		pointerdown: (string | {
			passive: boolean;
		})[];
		pointermove: (string | {
			passive: boolean;
		})[];
		pointerup: string;
		contextmenu: string;
		focusin: string;
		scroll: string;
		wheel: (string | {
			passive: boolean;
		})[];
		mousedown: (string | {
			passive: boolean;
		})[];
		mousemove: (string | {
			passive: boolean;
		})[];
		mouseup: (string | {
			passive: boolean;
		})[];
		touchstart: (string | {
			passive: boolean;
		})[];
		touchmove: (string | {
			passive: boolean;
		})[];
		touchend: (string | {
			passive: boolean;
		})[];
		keydown: (string | {
			passive: boolean;
		})[];
		keyup: (string | {
			passive: boolean;
		})[];
	};
	constructor(args?: IoOverlayProps);
	stopPropagation(event: Event): void;
	onResized(): void;
	onPointerup(event: PointerEvent): void;
	_onCollapse(): void;
	onContextmenu(event: Event): void;
	onFocusIn(event: FocusEvent): void;
	_onScroll(event: Event): void;
	nudgeDown(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgeUp(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgeRight(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgeLeft(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgePointer(element: HTMLElement, x: number, y: number, elemRect: DOMRect): boolean;
	setElementPosition(element: HTMLElement, direction: NudgeDirection, srcRect: DOMRect): void;
	appendChild(child: HTMLElement): void;
	removeChild(child: HTMLElement): void;
	onChildExpanded(): void;
	onChildExpandedDelayed(): void;
	expandedChanged(): void;
}
export declare const IoOverlaySingleton: IoOverlay;
/** @License
 * Copyright ©2025 Aleksandar (Aki) Rodic
 *
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
export declare const LICENSE = "MIT";
export type IoColorBaseProps = IoElementProps & PropsWithBinding<{
	value?: {
		r: number;
		g: number;
		b: number;
		a?: number;
	};
}>;
export declare class IoColorBase extends IoElement {
	static vConstructor: (arg0?: IoColorBaseProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	reactivity: string;
	value: {
		r: number;
		g: number;
		b: number;
		a?: number;
	};
	rgba: [
		number,
		number,
		number,
		number
	];
	hsv: [
		number,
		number,
		number
	];
	hsl: [
		number,
		number,
		number
	];
	init(): void;
	valueMutated(): void;
	rgbFromHsv(): void;
	rgbFromHsl(): void;
	valueFromRgb(): void;
	valueChanged(): void;
}
declare class IoColorPanel extends IoColorBase {
	static get Style(): string;
	expanded: boolean;
	static get Listeners(): {
		keydown: string;
	};
	onKeydown(event: KeyboardEvent): void;
	onValueInput(): void;
	changed(): void;
}
export declare const IoColorPanelSingleton: IoColorPanel;
export type IoColorPickerProps = IoElementProps & PropsWithBinding<{
	value?: {
		r: number;
		g: number;
		b: number;
		a?: number;
	};
}>;
export declare class IoColorPicker extends IoElement {
	static vConstructor: (arg0?: IoColorPickerProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: {
		r: number;
		g: number;
		b: number;
		a?: number;
	};
	static get Listeners(): any;
	tabIndex: string;
	onClick(): void;
	get expanded(): boolean;
	onKeydown(event: KeyboardEvent): void;
	onValueSet(): void;
	toggle(): void;
	onPanelCollapse(): void;
	expand(): void;
	collapse(): void;
	init(): void;
	valueChanged(): void;
}
export declare const ioColorPicker: (arg0?: IoColorPickerProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * Input element for color displayed as vector and an interactive picker.
 **/
export declare class IoColorRgba extends IoColorBase {
	static get Style(): string;
	_onNumberValueInput(event: CustomEvent): void;
	changed(): void;
}
export declare const ioColorRgba: (arg0?: IoColorBaseProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoNumberSliderRangeProps = IoElementProps & PropsWithBinding<{
	value?: [
		number,
		number
	];
	step?: number;
	min?: number;
	max?: number;
	exponent?: number;
	conversion?: number;
}>;
/**
 * Input element for `Array(2)` data type combining `IoNumber` and `IoSliderRange`
 **/
export declare class IoNumberSliderRange extends IoElement {
	static get Style(): string;
	value: [
		number,
		number
	];
	step: number;
	min: number;
	max: number;
	exponent: number;
	conversion: number;
	constructor(args?: IoNumberSliderRangeProps);
	_onNumberSet(event: CustomEvent): void;
	_onSliderSet(event: CustomEvent): void;
	init(): void;
	valueMutated(): void;
	changed(): void;
}
export declare const ioNumberSliderRange: (arg0?: IoElementProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoNumberSliderProps = IoElementProps & PropsWithBinding<{
	value?: number;
	step?: number;
	min?: number;
	max?: number;
	exponent?: number;
	conversion?: number;
}>;
/**
 * Input element for `Number` data type combining `IoNumber` and `IoSlider`
 **/
export declare class IoNumberSlider extends IoElement {
	static vConstructor: (arg0?: IoNumberSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: number;
	step: number;
	min: number;
	max: number;
	exponent: number;
	conversion: number;
	constructor(args?: IoNumberSliderProps);
	_onNumberSet(event: CustomEvent): void;
	_onSliderSet(event: CustomEvent): void;
	init(): void;
	changed(): void;
}
export declare const ioNumberSlider: (arg0?: IoNumberSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoSliderBaseProps = IoGlProps & PropsWithBinding<{
	value?: number | [
		number,
		number
	];
	step?: number | [
		number,
		number
	];
	min?: number | [
		number,
		number
	];
	max?: number | [
		number,
		number
	];
	exponent?: number;
	vertical?: boolean;
	noscroll?: boolean;
}>;
export declare class IoSliderBase extends IoGl {
	static vConstructor: (arg0?: IoSliderBaseProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: number | [
		number,
		number
	];
	step: number | [
		number,
		number
	];
	min: number | [
		number,
		number
	];
	max: number | [
		number,
		number
	];
	exponent: number;
	vertical: boolean;
	invalid: boolean;
	noscroll: boolean;
	role: string;
	tabIndex: string;
	_startX: number;
	_startY: number;
	_rect: DOMRect | null;
	_active: number;
	get _min(): [
		number,
		number
	];
	get _max(): [
		number,
		number
	];
	get _step(): [
		number,
		number
	];
	get _value(): [
		number,
		number
	];
	static get Listeners(): {
		focus: string;
		contextmenu: string;
		pointerdown: string;
		touchstart: (string | {
			passive: boolean;
		})[];
	};
	constructor(args?: IoSliderBaseProps);
	onFocus(): void;
	onBlur(): void;
	onContextmenu(event: Event): void;
	onTouchstart(event: TouchEvent): void;
	onTouchmove(event: TouchEvent): void;
	onTouchend(): void;
	onPointerdown(event: PointerEvent): void;
	onPointermove(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	_getPointerCoord(event: PointerEvent): [
		number,
		number
	];
	_getValueFromCoord(coord: [
		number,
		number
	]): [
		number,
		number
	];
	onPointermoveThrottled(event: PointerEvent): void;
	_inputValue(value: [
		number,
		number
	]): void;
	onKeydown(event: KeyboardEvent): void;
	_setIncrease(): void;
	_setDecrease(): void;
	_setMin(): void;
	_setMax(): void;
	_setUp(): void;
	_setDown(): void;
	_setLeft(): void;
	_setRight(): void;
	init(): void;
	valueChanged(): void;
	invalidChanged(): void;
	changed(): void;
}
export type IoSlider2dProps = IoSliderBaseProps & PropsWithBinding<{}>;
export declare class IoSlider2d extends IoSliderBase {
	static vConstructor: (arg0?: IoSlider2dProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: [
		number,
		number
	];
	step: [
		number,
		number
	];
	min: [
		number,
		number
	];
	max: [
		number,
		number
	];
	noscroll: boolean;
	constructor(args?: IoSlider2dProps);
	valueMutated(): void;
	static get GlUtils(): string;
	static get Frag(): string;
}
export declare const ioSlider2d: (arg0?: IoSlider2dProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoSliderRangeProps = IoSliderBaseProps & PropsWithBinding<{}>;
/**
 * Input element for `Array(2)` data type displayed as slider.
 * It can be configured to clamp the `value` compoents to `min` / `max` and round it to the nearest `step` increment. `exponent` property can be changed for non-linear scale.
 **/
export declare class IoSliderRange extends IoSliderBase {
	static vConstructor: (arg0?: IoSliderRangeProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	value: [
		number,
		number
	];
	step: number;
	min: number;
	max: number;
	_index: number;
	constructor(args?: IoSliderRangeProps);
	valueMutated(): void;
	_getCoordFromValue(value: [
		number,
		number
	]): number[];
	onPointerdown(event: PointerEvent): void;
	onPointermoveThrottled(event: PointerEvent): void;
	static get Frag(): string;
}
export declare const ioSliderRange: (arg0?: IoSliderRangeProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoSliderProps = IoGlProps & {
	value?: number | Binding<number>;
	step?: number;
	min?: number;
	max?: number;
	exponent?: number;
	vertical?: boolean;
	disabled?: boolean;
	noscroll?: boolean;
};
/**
 * Input element for `Number` data type displayed as slider.
 * It can be configured to clamp the `value` to `min` / `max` and round it to the nearest `step` increment. `exponent` property can be changed for non-linear scale.
 **/
export declare class IoSlider extends IoGl {
	#private;
	static vConstructor: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: number;
	step: number;
	min: number;
	max: number;
	exponent: number;
	vertical: boolean;
	invalid: boolean;
	disabled: boolean;
	noscroll: boolean;
	role: string;
	tabIndex: string;
	static get Frag(): string;
	static get Listeners(): {
		focus: string;
		contextmenu: string;
		pointerdown: string;
		touchstart: (string | {
			passive: boolean;
		})[];
	};
	constructor(args?: IoSliderProps);
	onFocus(): void;
	onBlur(): void;
	onContextmenu(event: Event): void;
	onTouchstart(event: TouchEvent): void;
	onTouchmove(event: TouchEvent): void;
	onTouchend(): void;
	onPointerdown(event: PointerEvent): void;
	onPointermove(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	_getPointerCoord(event: PointerEvent): number;
	_getValueFromCoord(coord: number): number;
	onPointermoveThrottled(event: PointerEvent): void;
	_incrementValue(value: number): void;
	_inputValue(value: number): void;
	onKeydown(event: KeyboardEvent): void;
	init(): void;
	invalidChanged(): void;
	disabledChanged(): void;
	valueChanged(): void;
	minChanged(): void;
	maxChanged(): void;
}
export declare const ioSlider: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoColorSliderProps = IoColorBaseProps & PropsWithBinding<{
	color?: [
		number,
		number,
		number,
		number
	];
	step?: number;
	channel?: "r" | "g" | "b" | "a" | "h" | "s" | "v" | "l" | "hs" | "sv" | "sl";
	vertical?: boolean;
}>;
/**
 * A generic color slider element.
 * It is a wrapper for channel-specific sliders which are added as a child of this element depending on the `channel` property.
 * For example, setting `channel: 'h'` will instantiate a slider for "hue" color channel and hook up necessary conversions, bindings and event callbacks.
 **/
export declare class IoColorSlider extends IoColorBase {
	static vConstructor: (arg0?: IoColorSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	color: [
		number,
		number,
		number,
		number
	];
	step: number;
	channel: "r" | "g" | "b" | "a" | "h" | "s" | "v" | "l" | "hs" | "sv" | "sl";
	vertical: boolean;
	_onValueInput(event: CustomEvent): void;
	changed(): void;
}
export declare const ioColorSlider: (arg0?: IoColorSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
declare class IoColorSliderBase extends IoSlider {
	static get GlUtils(): string;
	static get Frag(): string;
	valueMutated(): void;
}
declare class IoColorSlider2dBase extends IoSlider2d {
	static get GlUtils(): string;
	static get Frag(): string;
	valueMutated(): void;
}
/**
 * A 1D slider for "red" color channel.
 **/
export declare class IoColorSliderR extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderR: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 1D slider for "green" color channel.
 **/
export declare class IoColorSliderG extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderG: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 1D slider for "blue" color channel.
 **/
export declare class IoColorSliderB extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderB: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 1D slider for "alpha" color channel.
 **/
export declare class IoColorSliderA extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderA: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 1D slider for "hue" color channel.
 **/
export declare class IoColorSliderH extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderH: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 1D slider for "saturation" color channel.
 **/
export declare class IoColorSliderS extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderS: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 1D slider for "value" color channel.
 **/
export declare class IoColorSliderV extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderV: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 1D slider for "level" color channel.
 **/
export declare class IoColorSliderL extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderL: (arg0?: IoSliderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 2D slider gor "hue" and "saturation" color channels.
 **/
export declare class IoColorSliderHs extends IoColorSlider2dBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderHs: (arg0?: IoSlider2dProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 2D slider gor "saturation" and "value" color channels.
 **/
export declare class IoColorSliderSv extends IoColorSlider2dBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderSv: (arg0?: IoSlider2dProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * A 2D slider gor "saturation" and "level" color channels.
 **/
export declare class IoColorSliderSl extends IoColorSlider2dBase {
	static get GlUtils(): string;
}
export declare const ioColorSliderSl: (arg0?: IoSlider2dProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * Element displaying colored square.
 *
 * <io-element-demo element="io-color-swatch"
 * properties='{"value": [1, 0.5, 0, 1]}'
 * config='{"value": ["io-property-editor"]}
 * '></io-element-demo>
 **/
export declare class IoColorSwatch extends IoColorBase {
	static get Style(): string;
	valueChanged(): void;
}
export declare const ioColorSwatch: (arg0?: IoColorBaseProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type PropertyIdentifier = AnyConstructor | string | RegExp | null | undefined;
export type PropertyConfig = [
	PropertyIdentifier,
	VDOMElement
];
export type PropertyConfigMap = Map<PropertyIdentifier, VDOMElement>;
export type PropertyConfigRecord = Record<string, VDOMElement>;
export type EditorConfig = Map<AnyConstructor, PropertyConfig[]>;
export declare function getEditorConfig(object: object, editorConfig?: EditorConfig): PropertyConfigRecord;
export declare function registerEditorConfig(constructor: AnyConstructor, propertyTypes: PropertyConfig[]): void;
export declare const SKIPPED_PROPERTIES: string[];
export declare function getAllPropertyNames(obj: object): string[];
type PropertyIdentifier$1 = string | RegExp;
export type PropertyGroups = Record<string, Array<PropertyIdentifier$1>>;
export type PropertyGroupsRecord = Record<string, Array<string>>;
export type EditorGroups = Map<AnyConstructor, PropertyGroups>;
export declare function getEditorGroups(object: object, editorGroups?: EditorGroups): PropertyGroupsRecord;
export declare function registerEditorGroups(constructor: AnyConstructor, groups: PropertyGroups): void;
export type EditorWidgets = Map<AnyConstructor, VDOMElement>;
export declare function getEditorWidget(object: object, editorWidgets?: EditorWidgets): VDOMElement | null;
export declare function registerEditorWidget(constructor: AnyConstructor, widget: VDOMElement): void;
export type IoBreadcrumbsProps = IoElementProps & PropsWithBinding<{
	value?: Object;
	selected?: Object;
	crumbs?: Array<Object>;
	search?: string;
}>;
/**
 * Breadcrumbs select element.
 * When breadcrumb item is clicked or activated by space/enter key, it sets the value to corresponding option value.
 * Optionally, it can trim the `options` array to selected option index.
 **/
export declare class IoBreadcrumbs extends IoElement {
	static vConstructor: (arg0?: IoBreadcrumbsProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: Object;
	selected: Object;
	crumbs: Array<Object>;
	search: string;
	valueChanged(): void;
	selectedChanged(): void;
	onClearSearch(): void;
	changed(): void;
}
export declare const ioBreadcrumbs: (arg0?: IoBreadcrumbsProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoInspectorProps = IoElementProps & PropsWithBinding<{
	value?: Record<string, any> | any[];
	selected?: Record<string, any> | any[];
	config?: EditorConfig;
	groups?: EditorGroups;
	widgets?: EditorWidgets;
	search?: string;
}>;
/**
 * Object property editor. It displays a set of labeled property editors for the `value` object inside multiple `io-collapsible` elements. It can be configured to use custom property editors and display only specified properties. Properties of type `Object` are displayed as clickable links which can also be navigated in the `io-breadcrumbs` element.
 **/
export declare class IoInspector extends IoElement {
	static vConstructor: (arg0?: IoInspectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: Record<string, any> | any[];
	selected: Record<string, any> | any[];
	config: EditorConfig;
	groups: EditorGroups;
	widgets: EditorWidgets;
	search: string;
	static get Listeners(): {
		"io-button-clicked": string;
	};
	onLinkClicked(event: CustomEvent): void;
	valueChanged(): void;
	selectedChanged(): void;
	selectedMutated(): void;
	changed(): void;
	_onChangedThrottled(): void;
	_onChange(): void;
}
export declare const ioInspector: (arg0?: IoInspectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoObjectProps = IoElementProps & PropsWithBinding<{
	value?: Record<string, any> | any[];
	properties?: string[];
	config?: EditorConfig;
	groups?: EditorGroups;
	widgets?: EditorWidgets;
	labeled?: boolean;
	label?: string;
	expanded?: boolean;
}>;
/**
 * Object property editor. It displays a set of labeled property editors for the `value` object inside io-collapsible element. It can be configured to use custom property editors and display only specified properties.
 **/
export declare class IoObject extends IoElement {
	static vConstructor: (arg0?: IoObjectProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: Record<string, any> | any[];
	properties: string[];
	config: EditorConfig;
	groups: EditorGroups;
	widgets: EditorWidgets;
	labeled: boolean;
	label: string;
	expanded: boolean;
	role: string;
	changed(): void;
}
export declare const ioObject: (arg0?: IoObjectProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoPropertyEditorProps = IoElementProps & PropsWithBinding<{
	value?: Record<string, any> | any[];
	properties?: string[];
	config?: EditorConfig;
	groups?: EditorGroups;
	widgets?: EditorWidgets;
	labeled?: boolean;
}>;
/**
 * Object editor. It displays a set of labeled property editors for the `value` object. Labels can be omitted by setting `labeled` property to false.
 **/
export declare class IoPropertyEditor extends IoElement {
	static vConstructor: (arg0?: IoPropertyEditorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	reactivity: string;
	value: Object;
	properties: string[];
	config: EditorConfig;
	groups: EditorGroups;
	widgets: EditorWidgets;
	labeled: boolean;
	_onValueInput(event: CustomEvent): void;
	valueMutated(): void;
	changed(): void;
	/**
	 * Returns a JSON representation of the property editor. This feature is used in testing.
	 * @return {Object} JSON representation of the property editor.
	 */
	toJSON(): any;
}
export declare const ioPropertyEditor: (arg0?: IoPropertyEditorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoVectorProps = IoElementProps & PropsWithBinding<{
	value?: {
		x: number;
		y: number;
		z?: number;
		w?: number;
	} | number[];
	conversion?: number;
	step?: number;
	min?: number;
	max?: number;
	linkable?: boolean;
	linked?: boolean;
	ladder?: boolean;
}>;
/**
 * Input element for vector arrays and objects.
 **/
export declare class IoVector extends IoElement {
	static vConstructor: (arg0?: IoVectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: {
		x: number;
		y: number;
		z?: number;
		w?: number;
	} | number[];
	conversion: number;
	step: number;
	min: number;
	max: number;
	linkable: boolean;
	linked: boolean;
	ladder: boolean;
	keys: string[];
	private _ratios;
	_onNumberPointerDown(event: PointerEvent): void;
	_onNumberValueInput(event: CustomEvent): void;
	valueChanged(): void;
	valueMutated(): void;
	changed(): void;
	getSlotted(): VDOMElement | null;
}
export declare const ioVector: (arg0?: IoVectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoMatrixProps = IoVectorProps & PropsWithBinding<{
	columns?: number;
}>;
/**
 * Input element for vector arrays dispalayed as 2D matrices. Array `value` can have 4, 9, and 16 elements for 2x2, 3x3 and 4x4 matrices.
 **/
export declare class IoMatrix extends IoVector {
	static vConstructor: (arg0?: IoMatrixProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: number[];
	columns: number;
	_onNumberValueInput(event: CustomEvent): void;
	valueChanged(): void;
}
export declare const ioMatrix: (arg0?: IoMatrixProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoMarkdownProps = IoElementProps & PropsWithBinding<{
	src?: string;
	strip?: string[];
	loading?: boolean;
	sanitize?: boolean;
}>;
/**
 * This elements loads a markdown file from path specified as `src` property and renders it as HTML using marked and dompurify.
 */
export declare class IoMarkdown extends IoElement {
	static vConstructor: (arg0?: IoMarkdownProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	src: string;
	strip: string[];
	loading: boolean;
	sanitize: boolean;
	role: string;
	constructor(args?: IoMarkdownProps);
	protected _strip(innerHTML: string): string;
	protected _parseMarkdown(markdown: string): void;
	onResized(): void;
	srcChanged(): void;
	changed(): void;
}
export declare const ioMarkdown: (arg0?: IoMarkdownProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export declare const MD_LIGHT_THEME = "\n/* a11y-light theme */\n/* Based on the Tomorrow Night Eighties theme: https://github.com/isagalaev/highlight.js/blob/master/src/styles/tomorrow-night-eighties.css */\n/* @author: ericwbailey */\n\n/* Comment */\n.hljs-comment, .hljs-quote {\n  color: #666;\n}\n\n/* Red */\n.hljs-variable, .hljs-template-variable, .hljs-tag, .hljs-name, .hljs-selector-id, .hljs-selector-class, .hljs-regexp, .hljs-deletion {\n  color: #d91e18;\n}\n\n/* Orange */\n.hljs-number, .hljs-built_in, .hljs-builtin-name, .hljs-literal, .hljs-type, .hljs-params, .hljs-meta, .hljs-link {\n  color: #aa5d00;\n}\n\n/* Yellow */\n.hljs-attribute {\n  color: #aa5d00;\n}\n\n/* Green */\n.hljs-string, .hljs-symbol, .hljs-bullet, .hljs-addition {\n  color: #008000;\n}\n\n/* Blue */\n.hljs-title, .hljs-section {\n  color: #007faa;\n}\n\n/* Purple */\n.hljs-keyword, .hljs-selector-tag {\n  color: #c928a1;\n}\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  background: #fefefe;\n  color: #545454;\n  padding: 0.5em;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}\n\n@media screen and (-ms-high-contrast: active) {\n  .hljs-addition, .hljs-attribute, .hljs-built_in, .hljs-builtin-name, .hljs-bullet, .hljs-comment, .hljs-link, .hljs-literal, .hljs-meta, .hljs-number, .hljs-params, .hljs-string, .hljs-symbol, .hljs-type, .hljs-quote {\n    color: highlight;\n  }\n  .hljs-keyword, .hljs-selector-tag {\n      font-weight: bold;\n  }\n}\n";
export declare const MD_DARK_THEME = "\n/* a11y-dark theme */\n/* Based on the Tomorrow Night Eighties theme: https://github.com/isagalaev/highlight.js/blob/master/src/styles/tomorrow-night-eighties.css */\n/* @author: ericwbailey */\n\n/* Comment */\n.hljs-comment, .hljs-quote {\n  color: #d4d0ab;\n}\n\n/* Red */\n.hljs-variable, .hljs-template-variable, .hljs-tag, .hljs-name, .hljs-selector-id, .hljs-selector-class, .hljs-regexp, .hljs-deletion {\n  color: #ffa07a;\n}\n\n/* Orange */\n.hljs-number, .hljs-built_in, .hljs-builtin-name, .hljs-literal, .hljs-type, .hljs-params, .hljs-meta, .hljs-link {\n  color: #f5ab35;\n}\n\n/* Yellow */\n.hljs-attribute {\n  color: #ffd700;\n}\n\n/* Green */\n.hljs-string, .hljs-symbol, .hljs-bullet, .hljs-addition {\n  color: #abe338;\n}\n\n/* Blue */\n.hljs-title, .hljs-section {\n  color: #00e0e0;\n}\n\n/* Purple */\n.hljs-keyword, .hljs-selector-tag {\n  color: #dcc6e0;\n}\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  background: #2b2b2b;\n  color: #f8f8f2;\n  padding: 0.5em;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}\n\n@media screen and (-ms-high-contrast: active) {\n  .hljs-addition, .hljs-attribute, .hljs-built_in, .hljs-builtin-name, .hljs-bullet, .hljs-comment, .hljs-link, .hljs-literal, .hljs-meta, .hljs-number, .hljs-params, .hljs-string, .hljs-symbol, .hljs-type, .hljs-quote {\n    color: highlight;\n  }\n  .hljs-keyword, .hljs-selector-tag {\n    font-weight: bold;\n  }\n}\n";
export declare const IconsetDB: Record<string, Record<string, string>>;
declare class Iconset extends Node$1 {
	registerIcons(name: string, svg: string): void;
	getIcon(icon: string): string;
}
export declare const IconsetSingleton: Iconset;
export type IoIconProps = IoElementProps & PropsWithBinding<{
	value?: string;
	stroke?: boolean;
}>;
/**
 * SVG icon element.
 * It displays SVG content specified via `icon` parameter.
 * Custom SVG assets need to be registered with `IconsetSingleton`.
 **/
export declare class IoIcon extends IoElement {
	static vConstructor: (arg0?: IoIconProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: string;
	stroke: boolean;
	constructor(args?: IoIconProps);
	valueChanged(): void;
}
export declare const ioIcon: (arg0?: IoIconProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoFieldProps = IoElementProps & {
	value?: any | Binding<any>;
	icon?: string | Binding<string>;
	label?: string | Binding<string>;
	selected?: boolean | Binding<boolean>;
	disabled?: boolean | Binding<boolean>;
	appearance?: "neutral" | "inset" | "outset";
	pattern?: string;
};
export declare class IoField extends IoElement {
	static vConstructor: (arg0?: IoFieldProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: any;
	icon: string;
	label: string;
	selected: boolean;
	invalid: boolean;
	disabled: boolean;
	pressed: boolean;
	appearance: "neutral" | "inset" | "outset";
	pattern: string;
	spellcheck: boolean;
	tabIndex: string;
	static get Listeners(): {
		focus: string;
		pointerdown: string;
		click: string;
	};
	constructor(args?: IoFieldProps);
	onFocus(event: FocusEvent): void;
	onBlur(event: FocusEvent): void;
	onPointerdown(event: PointerEvent): void;
	onPointermove(event: PointerEvent): void;
	onPointerleave(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	onClick(event?: MouseEvent): void;
	onKeydown(event: KeyboardEvent): void;
	onKeyup(event: KeyboardEvent): void;
	getCaretPosition(): number;
	setCaretPosition(position: number): void;
	labelChanged(): void;
	selectedChanged(): void;
	invalidChanged(): void;
	disabledChanged(): void;
	changed(): void;
}
export declare const ioField: (arg0?: IoFieldProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoBooleanProps = Omit<IoFieldProps, "value"> & PropsWithBinding<{
	value?: boolean;
	true?: string;
	false?: string;
}>;
/**
 * Input element for `Boolean` data type displayed as text.
 * It can be configured to display custom `true` or `false` strings.
 **/
export declare class IoBoolean extends IoField {
	static vConstructor: (arg0?: IoBooleanProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: boolean;
	true: string;
	false: string;
	role: string;
	constructor(args?: IoBooleanProps);
	onPointerdown(event: PointerEvent): void;
	onClick(): void;
	toggle(): void;
	init(): void;
	valueChanged(): void;
	changed(): void;
}
export declare const ioBoolean: (arg0?: IoBooleanProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoButtonProps = IoFieldProps & PropsWithBinding<{
	action?: Function;
}>;
/**
 * Button element.
 * When clicked or activated by space/enter key, it calls the `action` property function with optional `value` argument.
 **/
export declare class IoButton extends IoField {
	static vConstructor: (arg0?: IoButtonProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: any;
	action?: Function;
	appearance: "inset" | "outset" | "neutral";
	role: string;
	constructor(args?: IoButtonProps);
	onPointerdown(event: PointerEvent): void;
	onKeydown(event: KeyboardEvent): void;
	onKeyup(event: KeyboardEvent): void;
	onClick(event: MouseEvent): void;
	init(): void;
	changed(): void;
}
export declare const ioButton: (arg0?: IoButtonProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoNumberProps = Omit<IoFieldProps, "value"> & PropsWithBinding<{
	value?: number;
	live?: boolean;
	conversion?: number;
	step?: number;
	min?: number;
	max?: number;
	ladder?: boolean;
}>;
/**
 * Input element for `Number` data type.
 * It clamps the `value` to `min` / `max` and rounds it to the nearest `step` increment.
 * If `ladder` property is enabled, it displays an interactive float ladder element when clicked/taped.
 * Alternatively, ladder can be expanded by middle click or ctrl key regardless of ladder property.
 **/
export declare class IoNumber extends IoField {
	static vConstructor: (arg0?: IoNumberProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: number;
	live: boolean;
	conversion: number;
	step: number;
	min: number;
	max: number;
	ladder: boolean;
	appearance: "neutral" | "inset" | "outset";
	contentEditable: boolean;
	pattern: string;
	inputMode: string;
	role: string;
	private _pointer;
	constructor(args?: IoNumberProps);
	get textNode(): any;
	set textNode(value: any);
	onBlur(event: FocusEvent): void;
	onPointerdown(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	onFocus(event: FocusEvent): void;
	_expandLadder(): void;
	onKeydown(event: KeyboardEvent): void;
	onKeyup(event: KeyboardEvent): void;
	_setFromTextNode(): void;
	init(): void;
	changed(): void;
}
export declare const ioNumber: (arg0?: IoNumberProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoNumberLadderProps = IoElementProps & PropsWithBinding<{
	src?: IoNumber;
	expanded?: boolean;
}>;
declare class IoNumberLadder extends IoElement {
	static vConstructor: (arg0?: IoNumberLadderProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	src?: IoNumber;
	expanded: boolean;
	role: string;
	static get Listeners(): {
		"ladder-step-change": string;
		"ladder-step-collapse": string;
		focusin: string;
	};
	get value(): number;
	get min(): number;
	get max(): number;
	get step(): number;
	get conversion(): number;
	constructor(args?: IoNumberLadderProps);
	onFocusIn(event: FocusEvent): void;
	onFocusTo(event: CustomEvent): void;
	_onLadderStepChange(event: CustomEvent): void;
	_onLadderStepCollapse(): void;
	expandedChanged(): void;
	changed(): void;
}
export declare const IoNumberLadderSingleton: IoNumberLadder;
export type IoNumberLadderStepProps = IoFieldProps & PropsWithBinding<{
	value?: number;
	label?: string;
}>;
export declare class IoNumberLadderStep extends IoField {
	static vConstructor: (arg0?: IoNumberLadderStepProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: number;
	label: string;
	role: string;
	constructor(args?: IoNumberLadderStepProps);
	onKeydown(event: KeyboardEvent): void;
	onPointerdown(event: PointerEvent): void;
	onPointermove(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	init(): void;
	changed(): void;
}
export declare const ioNumberLadderStep: (arg0?: IoNumberLadderStepProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoStringProps = Omit<IoFieldProps, "value"> & {
	value?: string | Binding<string>;
	live?: boolean | Binding<boolean>;
	placeholder?: string | Binding<string>;
	appearance?: "neutral" | "inset" | "outset";
};
/**
 * Input element for `String` data type.
 **/
export declare class IoString extends IoField {
	static vConstructor: (arg0?: IoStringProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: string;
	live: boolean;
	placeholder: string;
	appearance: "neutral" | "inset" | "outset";
	contentEditable: boolean;
	role: string;
	constructor(args?: IoStringProps);
	get textNode(): any;
	set textNode(value: any);
	_setFromTextNode(): void;
	_tryParseFromTextNode(): void;
	onBlur(event: FocusEvent): void;
	onPointerdown(event: PointerEvent): void;
	onPointermove(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	onKeydown(event: KeyboardEvent): void;
	onKeyup(event: KeyboardEvent): void;
	init(): void;
	valueChanged(): void;
	changed(): void;
}
export declare const ioString: (arg0?: IoStringProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
/**
 * Input element for `Boolean` data type displayed as switch.
 **/
export declare class IoSwitch extends IoBoolean {
	static get Style(): string;
	changed(): void;
}
export declare const ioSwitch: (arg0?: IoBooleanProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type MenuOptionsProps = NodeProps & PropsWithBinding<{
	first?: any;
	last?: any;
	scroll?: string;
	path?: string;
	delimiter?: string;
	items?: MenuItem[];
}>;
declare const MenuOptions_base: {
	new (args?: NodeProps, ...superProps: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding<any>>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		applyProperties(props: any, skipDispatch?: boolean): void;
		setProperties(props: any): void;
		setProperty(name: string, value: any, debounce?: boolean): void;
		inputValue(value: any): void;
		changed(): void;
		init(): void;
		queue(name: string, value: any, oldValue: any): void;
		dispatchQueue(debounce?: boolean): void;
		throttle(func: CallbackFunction, arg?: any, timeout?: number): void;
		debounce(func: CallbackFunction, arg?: any, timeout?: number): void;
		onPropertyMutated(event: CustomEvent): true | undefined;
		bind<T_1>(name: string): Binding<T_1>;
		unbind(name: string): void;
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions): void;
		removeEventListener(type: string, listener?: AnyEventListener, options?: AddEventListenerOptions): void;
		dispatchEvent(type: string, detail?: any, bubbles?: boolean, src?: Node$1 | HTMLElement | Document | Window): void;
		dispose(): void;
		Register(ioNodeConstructor: typeof Node$1): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDefinitions;
};
export declare class MenuOptions extends MenuOptions_base {
	first: any;
	last: any;
	scroll: any;
	path: string;
	delimiter: string;
	items: MenuItem[];
	getItem(value: any, deep?: boolean): any;
	constructor(properties?: MenuOptionsProps);
	fromJSON(menuItemDefLoose: MenuItemDefLoose[]): this;
	initItems(items: MenuItem[]): void;
	pathChanged(): void;
	firstChanged(): void;
	lastChanged(): void;
	updatePaths(item?: MenuItem): void;
	_onItemSelectedChanged(event: CustomEvent): void;
	_onSubOptionsPathChanged(event: CustomEvent): void;
	selectDefault(): boolean;
	dispose(): void;
}
export type MenuItemSelectType = "select" | "scroll" | "toggle" | "link" | "none";
export type MenuItemDefLoose = undefined | null | string | number | MenuItemProps;
export type MenuItemProps = NodeProps & PropsWithBinding<{
	value?: any;
	label?: string;
	icon?: string;
	hint?: string;
	action?: () => void;
	mode?: MenuItemSelectType;
	hidden?: boolean;
	disabled?: boolean;
	selected?: boolean;
	options?: MenuOptions | MenuItemDefLoose[];
}>;
export declare class MenuItem extends Node$1 {
	value: any;
	label: string;
	icon: string;
	hint: string;
	hidden: boolean;
	disabled: boolean;
	action?: (value?: any) => void;
	mode: MenuItemSelectType;
	selected: boolean;
	options?: MenuOptions;
	get hasmore(): boolean;
	getSubitem(value: any): any;
	constructor(args?: MenuItemProps);
	fromJSON(looseDef: MenuItemDefLoose): this;
	toJSON(): Record<string, any>;
	_onSubItemSelected(): void;
	_onOptionsPathChanged(event: CustomEvent): void;
	optionsChanged(): void;
	selectedChanged(): void;
	dispose(): void;
}
export type IoContextMenuProps = IoElementProps & PropsWithBinding<{
	options?: MenuOptions;
	expanded?: boolean;
	button?: number;
}>;
/**
 * An invisible element that inserts a floating menu when its `parentElement` is clicked. Menu position is set by the pointer by default but it can be configured to expand to the side of the parent element by setting the `position` property. Default `button` property for menu expansion is `0` (left mouse button), but it can be configured for other buttons. You can have multiple `IoContextMenu` instances under the same `parentElement` as long as the `button` properties are different.
 **/
export declare class IoContextMenu extends IoElement {
	static vConstructor: (arg0?: IoContextMenuProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	options: MenuOptions;
	expanded: boolean;
	button: number;
	static get Properties(): any;
	constructor(args?: IoContextMenuProps);
	connectedCallback(): void;
	disconnectedCallback(): void;
	getBoundingClientRect(): any;
	_onItemClicked(event: CustomEvent): void;
	onContextmenu(event: MouseEvent): void;
	onPointerdown(event: PointerEvent): void;
	onPointermove(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	_onOverlayPointermove(event: PointerEvent): void;
	_onClick(event: MouseEvent): void;
	_onCollapse(): void;
	optionsChanged(): void;
}
export declare const ioContextMenu: (arg0?: IoContextMenuProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoMenuOptionsProps = IoElementProps & PropsWithBinding<{
	options?: MenuOptions;
	expanded?: boolean;
	horizontal?: boolean;
	searchable?: boolean;
	search?: string;
	direction?: NudgeDirection;
	depth?: number;
	noPartialCollapse?: boolean;
	inlayer?: boolean;
	slotted?: VDOMElement[];
	$parent?: IoMenuItem | IoContextMenu;
}>;
/**
 * It generates a list of `IoMenuItem` elements from `options` property. If `horizontal` property is set, menu items are displayed in horizontal direction.
 **/
export declare class IoMenuOptions extends IoElement {
	static vConstructor: (arg0?: IoMenuOptionsProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	options: MenuOptions;
	expanded: boolean;
	horizontal: boolean;
	searchable: boolean;
	search: string;
	direction: NudgeDirection;
	depth: number;
	noPartialCollapse: boolean;
	overflow: string;
	inlayer: boolean;
	slotted: VDOMElement[];
	$parent?: IoMenuItem;
	role: string;
	private _overflownItems;
	static get Listeners(): {
		"item-clicked": string;
		touchstart: (string | {
			passive: boolean;
		})[];
	};
	constructor(args?: IoMenuOptionsProps);
	_onItemClicked(event: CustomEvent): void;
	_stopPropagation(event: MouseEvent): void;
	init(): void;
	onResized(): void;
	_onSetOverflow(): void;
	_onCollapse(): void;
	expandedChanged(): void;
	searchChanged(): void;
	_onExpandInOverlay(): void;
	_onClipHeight(): void;
	changed(): void;
}
export declare const ioMenuOptions: (arg0?: IoMenuOptionsProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoMenuItemProps = IoFieldProps & PropsWithBinding<{
	item?: MenuItem;
	expanded?: boolean;
	direction?: "left" | "right" | "up" | "down";
	depth?: number;
}>;
/**
 * It displays `option.icon`, `option.label` and `option.hint` property and it creates expandable `IoMenuOptions` from the `option.options` array. Options are expand in the direction specified by `direction` property. If `selectable` property is set, selecting an option sets its `value` to the entire menu tree and `selected` atribute is set on menu items whose `option.value` matches selected value.
 **/
export declare class IoMenuItem extends IoField {
	static vConstructor: (arg0?: IoMenuItemProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	item: MenuItem;
	expanded: boolean;
	direction: NudgeDirection;
	depth: number;
	contentEditable: boolean;
	$options?: IoMenuOptions;
	static get Listeners(): any;
	constructor(args?: IoMenuItemProps);
	preventDefault(event: Event): void;
	get hasmore(): boolean;
	get inlayer(): boolean;
	get $parent(): any;
	connectedCallback(): void;
	disconnectedCallback(): void;
	_onOverlayPointermove(event: PointerEvent): void;
	_onOverlayPointerup(event: PointerEvent): void;
	_onClick(): void;
	_onItemClicked(event: PointerEvent): void;
	onPointerdown(event: PointerEvent): void;
	onPointerdownAction(event: PointerEvent): void;
	onPointermove(event: PointerEvent): void;
	onPointermoveAction(event: PointerEvent): void;
	onPointerup(event: PointerEvent): void;
	onPointerupAction(event: PointerEvent, skipCollapse?: boolean): void;
	_gethovered(event: PointerEvent): IoMenuElementType | undefined;
	_expandHovered(): void;
	onKeydown(event: KeyboardEvent): void;
	_onCollapse(): void;
	_onCollapseRoot(): void;
	expandedChanged(): void;
	itemChanged(): void;
	itemMutated(): void;
	changed(): void;
}
export declare const ioMenuItem: (arg0?: IoMenuItemProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoMenuElementType = IoMenuItem | IoMenuOptions;
export declare function getMenuDescendants(element: IoMenuElementType): IoMenuElementType[];
export declare function getMenuAncestors(element: IoMenuElementType): (IoMenuItem | IoMenuOptions)[];
export declare function getMenuRoot(element: IoMenuElementType): IoMenuElementType;
export declare class IoMenuHamburger extends IoMenuItem {
	static get Style(): string;
	changed(): void;
}
export declare const ioMenuHamburger: (arg0?: IoMenuItemProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export declare function addMenuOptions(options: MenuOptions, depth: number, d?: number): VDOMElement[];
export declare function filterOptions(options: MenuOptions, search: string, depth?: number, elements?: VDOMElement[], d?: number): any;
export type IoMenuTreeProps = IoElementProps & PropsWithBinding<{
	options?: MenuOptions;
	searchable?: boolean;
	search?: string;
	depth?: number;
	slotted?: VDOMElement[];
}>;
export declare class IoMenuTree extends IoElement {
	static vConstructor: (arg0?: IoMenuTreeProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	options: MenuOptions;
	searchable: boolean;
	search: string;
	depth: number;
	slotted: VDOMElement[];
	$parent?: IoMenuItem;
	role: string;
	static get Listeners(): {
		"item-clicked": string;
	};
	constructor(args?: IoMenuTreeProps);
	_onItemClicked(event: CustomEvent): void;
	_onCollapse(): void;
	changed(): void;
}
export declare const ioMenuTree: (arg0?: IoMenuTreeProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoOptionMenuProps = IoElementProps & PropsWithBinding<{
	value?: any;
	options?: MenuOptions;
	item?: MenuItem;
}>;
/**
 * Option select element. Similar to `IoMenuItem`, except it is displayed as a button and uses `options` property instead of ~~`option.options`~~  and it is `selectable` by default. It displays selected `value` or `label` followed by the `â–¾` character.
 * When clicked or activated by space/enter key, it expands a menu with selectable options.
 **/
export declare class IoOptionMenu extends IoElement {
	static vConstructor: (arg0?: IoOptionMenuProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	value: any;
	options: MenuOptions;
	item: MenuItem;
	role: string;
	constructor(args?: IoOptionMenuProps);
	_onLastChanged(event: CustomEvent): void;
	optionsChanged(change: Change): void;
	changed(): void;
}
export declare const ioOptionMenu: (arg0?: IoOptionMenuProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoCollapsibleProps = IoElementProps & PropsWithBinding<{
	elements?: VDOMElement[];
	label?: string;
	direction?: "column" | "row";
	icon?: string;
	expanded?: boolean;
}>;
/**
 * An element with collapsible content.
 * When clicked or activated by space/enter key, it toggles the visibility of the child elements defined as `elements` property.
 **/
export declare class IoCollapsible extends IoElement {
	static vConstructor: (arg0?: IoCollapsibleProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	elements: VDOMElement[];
	label: string;
	direction: "column" | "row";
	icon: string;
	expanded: boolean;
	role: string;
	changed(): void;
}
export declare const ioCollapsible: (arg0?: IoCollapsibleProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoSelectorProps = IoElementProps & PropsWithBinding<{
	options?: MenuOptions;
	select?: "first" | "last";
	elements?: VDOMElement[];
	cache?: boolean;
	precache?: boolean;
	precacheDelay?: number;
	loading?: boolean;
	import?: string;
}>;
export declare class IoSelector extends IoElement {
	static vConstructor: (arg0?: IoSelectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	options: MenuOptions;
	select: "first" | "last";
	elements: VDOMElement[];
	cache: boolean;
	precache: boolean;
	precacheDelay: number;
	loading: boolean;
	private _caches;
	private _selected?;
	init(): void;
	optionsMutated(): void;
	importModule(path: string): Promise<unknown>;
	protected renderSelected(): void;
	onLoadPrecache(): void;
	dispose(): void;
}
export declare const ioSelector: (arg0?: IoSelectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoScrollerProps = IoElementProps & PropsWithBinding<{
	options?: MenuOptions;
}>;
export declare class IoScroller extends IoElement {
	static vConstructor: (arg0?: IoScrollerProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	options: MenuOptions;
	private _observer;
	init(): void;
	connectedCallback(): void;
	_onDomMutated(): void;
	optionsMutated(): void;
	_scrollToSelected(): void;
	dispose(): void;
}
export declare const ioScroller: (arg0?: IoScrollerProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoNavigatorBaseProps = IoElementProps & PropsWithBinding<{
	options?: MenuOptions;
	slotted?: VDOMElement[];
	elements?: VDOMElement[];
	menu?: "top" | "left" | "bottom" | "right";
	depth?: number;
	collapsed?: boolean;
	collapseWidth?: number;
}>;
export declare class IoNavigatorBase extends IoElement {
	static vConstructor: (arg0?: IoNavigatorBaseProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	static get Style(): string;
	slotted: VDOMElement[];
	elements: VDOMElement[];
	options: MenuOptions;
	menu: "top" | "left" | "bottom" | "right";
	depth: number;
	collapsed: boolean;
	collapseWidth: number;
	init(): void;
	onResized(): void;
	_computeCollapsed(): void;
	getSlotted(): VDOMElement | null;
	changed(): void;
}
export declare const ioNavigatorBase: (arg0?: IoNavigatorBaseProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoNavigatorSelectorProps = IoNavigatorBaseProps & PropsWithBinding<{
	select?: "first" | "last";
	cache?: boolean;
	precache?: boolean;
}>;
export declare class IoNavigatorSelector extends IoNavigatorBase {
	static vConstructor: (arg0?: IoNavigatorSelectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	select: "first" | "last";
	cache: boolean;
	precache: boolean;
	getSlotted(): VDOMElement;
}
export declare const ioNavigatorSelector: (arg0?: IoNavigatorSelectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export declare class IoNavigatorCombined extends IoNavigatorSelector {
	static get Style(): string;
	getSlotted(): VDOMElement;
}
export declare const ioNavigatorCombined: (arg0?: IoNavigatorSelectorProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export type IoNavigatorMdViewProps = IoNavigatorBaseProps & PropsWithBinding<{
	strip?: string[];
	sanitize?: boolean;
}>;
export declare class IoNavigatorMdView extends IoNavigatorBase {
	static vConstructor: (arg0?: IoNavigatorMdViewProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
	strip: string[];
	sanitize: boolean;
	getSlotted(): VDOMElement;
}
export declare const ioNavigatorMdView: (arg0?: IoNavigatorMdViewProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;
export declare class IoNavigatorScroller extends IoNavigatorBase {
	getSlotted(): VDOMElement;
}
export declare const ioNavigatorScroller: (arg0?: IoNavigatorBaseProps | Array<VDOMElement | null> | string, arg1?: Array<VDOMElement | null> | string) => VDOMElement;

export {
	Node$1 as Node,
	PropertyDefinition$1 as PropertyDefinition,
	Storage$1 as Storage,
};

export {};
