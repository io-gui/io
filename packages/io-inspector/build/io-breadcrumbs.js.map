{"version":3,"file":"io-breadcrumbs.js","sourceRoot":"","sources":["../src/io-breadcrumbs.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAE7C;;;;IAII;AAEG,IAAM,aAAa,GAAnB,MAAM,aAAc,SAAQ,SAAS;IAC1C,MAAM,KAAK,KAAK;QACd,OAAO,SAAS,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsCf,CAAC;IACJ,CAAC;IACD,MAAM,KAAK,UAAU;QACnB,OAAO;YACL,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE;gBACP,IAAI,EAAE,KAAK;aACZ;SACF,CAAC;IACJ,CAAC;IACD,QAAQ,CAAC,KAAkB;QACzB,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACjE,CAAC;IACD,YAAY;QACV,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QACxB,+BAA+B;QAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACD,eAAe;QACb,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;YACjB,+BAA+B;YAC/B,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;QAClC,CAAC;aAAM,CAAC;YACN,+BAA+B;YAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IACD,OAAO;QACL,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7C,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE;oBACzB,KAAK,EAAE,QAAQ;oBACf,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBACtB,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBAChC,eAAe,EAAE,IAAI,CAAC,QAAQ;iBAC/B,CAAC,CAAC,CAAC;QACN,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;CACF,CAAA;AAjFY,aAAa;IADzB,QAAQ;GACI,aAAa,CAiFzB;;AAED,SAAS,QAAQ,CAAC,MAAW;IAC3B,IAAI,MAAM,YAAY,KAAK,EAAE,CAAC;QAC5B,OAAO,MAAM,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IACjE,CAAC;SAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QACtC,OAAO,MAAM,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;IAC9C,CAAC;SAAM,CAAC;QACN,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;AACH,CAAC","sourcesContent":["import { Register, IoElement } from 'io-gui';\n\n/**\n * Breadcrumbs select element.\n * When breadcrumb item is clicked or activated by space/enter key, it sets the value to corresponding option value.\n * Optionally, it can trim the `options` array to selected option index.\n **/\n@Register\nexport class IoBreadcrumbs extends IoElement {\n  static get Style() {\n    return /* css */`\n    :host {\n      display: flex;\n      flex: 0 0 auto;\n      flex-direction: row;\n      align-self: stretch;\n      justify-self: stretch;\n      border-radius: var(--io_borderRadius);\n      border: var(--io_border);\n      border-color: var(--io_borderColorInset);\n      padding: var(--io_spacing);\n      background-color: var(--io_bgColorField);\n      overflow-x: hidden;\n    }\n    :host > io-field {\n      padding-left: var(--io_spacing);\n      padding-right: var(--io_spacing);\n      color: var(--io_colorBlue);\n    }\n    :host > io-field:hover {\n      text-decoration: underline;\n    }\n    :host > io-field:first-of-type {\n      overflow: visible;\n      text-overflow: clip;\n      margin-left: var(--io_spacing);\n    }\n    :host > io-field:last-of-type {\n      overflow: visible;\n      text-overflow: clip;\n      margin-right: var(--io_spacing);\n    }\n    :host > io-field:not(:first-of-type):before {\n      content: '>';\n      margin: 0 var(--io_spacing);\n      padding: 0 var(--io_spacing) 0 0;\n      opacity: 0.25;\n    }\n    `;\n  }\n  static get Properties(): any {\n    return {\n      value: Object,\n      selected: null,\n      options: {\n        type: Array,\n      },\n    };\n  }\n  _onClick(event: CustomEvent) {\n    this.setProperty('selected', this.options[event.detail.value]);\n  }\n  valueChanged() {\n    this.options.length = 0;\n    // TODO: check for memory leaks\n    this.options.push(this.value);\n  }\n  selectedChanged() {\n    const index = this.options.indexOf(this.selected);\n    if (index !== -1) {\n      // TODO: check for memory leaks\n      this.options.length = index + 1;\n    } else {\n      // TODO: check for memory leaks\n      this.options.push(this.selected);\n    }\n  }\n  changed() {\n    const elements = [];\n    for (let i = 0; i < this.options.length; i++) {\n      elements.push(['io-field', {\n        class: 'select',\n        value: this.options[i],\n        label: getLabel(this.options[i]),\n        '@item-clicked': this._onClick,\n      }]);\n    }\n    this.template(elements);\n  }\n}\n\nfunction getLabel(object: any) {\n  if (object instanceof Array) {\n    return String(`${object.constructor.name} (${object.length})`);\n  } else if (typeof object === 'object') {\n    return String(`${object.constructor.name}`);\n  } else {\n    return String(object);\n  }\n}\n"]}