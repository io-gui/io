// Generated by dts-bundle-generator v6.13.0

/**
 * Property binding class.
 * It facilitates data binding between source node/property and target nodes/properties
 * using `[property]-changed` events.
 */
export declare class Binding {
	readonly node: IoNode;
	readonly property: string;
	readonly targets: Array<EventTarget>;
	readonly targetProperties: WeakMap<EventTarget, string[]>;
	/**
	 * Creates a binding object for specified `node` and `property`.
	 * @param {IoNode} node - Property owner node
	 * @param {string} property - Name of the property
	 */
	constructor(node: IoNode, property: string);
	set value(value: any);
	get value(): any;
	/**
	 * Adds a target `node` and `targetProp` and corresponding `[property]-changed` listener, unless already added.
	 * @param {IoNode} node - Target node
	 * @param {string} property - Target property
	 */
	addTarget(node: IoNode, property: string): void;
	/**
	 * Removes target `node` and `property` and corresponding `[property]-changed` listener.
	 * If `property` is not specified, it removes all target properties.
	 * @param {IoNode} node - Target node
	 * @param {string} property - Target property
	 */
	removeTarget(node: IoNode, property?: string): void;
	/**
	 * Retrieves a list of target properties for specified target node.
	 * @param {IoNode} node - Target node.
	 * @return {Array.<string>} list of target property names.
	 */
	getTargetProperties(node: IoNode | EventTarget): string[];
	/**
	 * Event handler that updates source property when one of the targets emits `[property]-changed` event.
	 * @param {ChangeEvent} event - Property change event.
	 */
	onTargetChanged: (event: ChangeEvent) => void;
	/**
	 * Event handler that updates bound properties on target nodes when source node emits `[property]-changed` event.
	 * @param {ChangeEvent} event - Property change event.
	 */
	onSourceChanged: (event: ChangeEvent) => void;
	/**
	 * Dispose of the binding by removing all targets and listeners.
	 * Use this when node is no longer needed.
	 */
	dispose(): void;
}
export declare type Reflect = "attr" | "none" | "prop" | "both";
/**
 * Declares default value, type and reactive behavior of the property.
 */
export declare type PropertyDeclaration = {
	value?: any;
	type?: Constructor | Constructor[];
	binding?: Binding;
	reflect?: Reflect;
	notify?: boolean;
	observe?: boolean;
};
/**
 * Allows weak declaration of properties by specifying only partial declarations such as default value or type.
 */
export declare type PropertyDeclarationWeak = string | number | boolean | Array<any> | null | undefined | Constructor | Binding | PropertyDeclaration;
/**
 * Finalized property definition created from property declaration.
 */
export declare class ProtoProperty {
	value?: any;
	type?: Constructor | Constructor[];
	binding?: Binding;
	reflect?: Reflect;
	notify?: boolean;
	observe?: boolean;
	/**
	 * Takes a weakly typed property declaration and returns full property definition with unscpecified fileds inferred.
	 * @param {PropertyDeclarationWeak} def Weakly typed property definition
	 */
	constructor(def: PropertyDeclarationWeak);
	/**
	 * Assigns values of another ProtoProperty to itself, unless they are default values.
	 * @param {ProtoProperty} protoProp Source ProtoProperty
	 */
	assign(protoProp: ProtoProperty): void;
}
/**
 * PropertyInstance object constructed from `ProtoProperty`.
 */
export declare class PropertyInstance {
	value?: any;
	type?: Constructor | Constructor[];
	binding?: Binding;
	reflect: Reflect;
	notify: boolean;
	observe: boolean;
	/**
	 * Creates the property configuration object and copies values from `ProtoProperty`.
	 * @param propDef ProtoProperty object
	 */
	constructor(propDef: ProtoProperty);
}
export declare type PropertyDeclarations = Record<string, PropertyDeclarationWeak>;
export declare const PropertyDecorators: WeakMap<Constructor, PropertyDeclarations>;
/**
 * Allows property declarations using decorator pattern.
 * @param propertyDefinition Property declaration.
 * @return Property decorator function.
 */
export declare const Property: (propertyDefinition: PropertyDeclarationWeak) => (target: IoNode, propertyName: string) => void;
/**
 * Declares default listeners.
 */
export declare type ListenerDeclaration = [
	string | CustomEventListener,
	AddEventListenerOptions?
];
/**
 * Allows weak declaration of listeners by specifying only partial declarations such as function or function name.
 */
export declare type ListenerDeclarationWeak = string | CustomEventListener | ListenerDeclaration;
/**
 * Takes weakly typed listener declaration and returns stronly typed listener declaration.
 * @param {ListenerDeclarationWeak} def Weakly typed listener declaration
 * @return {ListenerDeclaration} Stronly typed listener declaration
 */
export declare const hardenListenerDeclaration: (def: ListenerDeclarationWeak) => ListenerDeclaration;
/**
 * Assigns source listener declaration to an existing array of listener declarations.
 * @param {ListenerDeclaration[]} defs Array of listener declarations
 * @param {ListenerDeclaration} srcDef Source listener declaration
 */
export declare const assignListenerDeclaration: (defs: ListenerDeclaration[], srcDef: ListenerDeclaration) => void;
/**
 * Takes a node and a listener declaration and returns a listener.
 * @param {IoNode} node `IoNode` instance
 * @param {ListenerDeclaration} def Listener declaration
 * @return {Listener} Listener
 */
export declare const listenerFromDefinition: (node: IoNode | HTMLElement, def: ListenerDeclaration) => Listener;
export declare type Listener = [
	CustomEventListener,
	AddEventListenerOptions?
];
export declare type Listeners = Record<string, Listener[]>;
export declare type ListenersDeclaration = Record<string, ListenerDeclarationWeak>;
/**
 * Internal utility class responsible for handling listeners and dispatching events.
 * It makes events of all `IoNode` class instances compatible with DOM events.
 * It maintains three independent lists of listeners:
 *  - `protoListeners` specified as `get Listeners()` class declarations.
 *  - `propListeners` specified as inline properties prefixed with "on-".
 *  - `addedListeners` explicitly added/removed using `addEventListener()` and `removeEventListener()`.
 */
export declare class EventDispatcher {
	readonly node: IoNode | HTMLElement;
	readonly isEventTarget: boolean;
	readonly protoListeners: Listeners;
	readonly propListeners: Listeners;
	readonly addedListeners: Listeners;
	/**
	 * Creates an instance of `EventDispatcher` for specified `IoNode` instance.
	 * It initializes `protoListeners` from `ProtoChain`.
	 * @param {IoNode} node owner IoNode
	 */
	constructor(node: IoNode | HTMLElement);
	/**
	 * Sets `protoListeners` specified as `get Listeners()` class declarations.
	 * @param {IoNode} node owner IoNode
	 */
	setProtoListeners(node: IoNode): void;
	/**
	 * Sets `propListeners` specified as inline properties prefixed with "on-".
	 * It removes existing `propListeners` that are no longer specified and it replaces the ones that changed.
	 * @param {Record<string, any>} properties Inline properties
	 */
	applyPropListeners(properties: Record<string, any>): void;
	/**
	 * Proxy for `addEventListener` method.
	 * Adds an event listener to `addedListeners`.
	 * @param {string} name Name of the event
	 * @param {CustomEventListener} listener Event listener handler
	 * @param {AddEventListenerOptions} [options] Event listener options
	 */
	addEventListener(name: string, listener: CustomEventListener, options?: AddEventListenerOptions): void;
	/**
	 * Proxy for `removeEventListener` method.
	 * Removes an event listener from `addedListeners`.
	 * If `listener` is not specified it removes all listeners for specified `type`.
	 * @param {string} name Name of the event
	 * @param {CustomEventListener} listener Event listener handler
	 * @param {AddEventListenerOptions} [options] Event listener options
	*/
	removeEventListener(name: string, listener?: CustomEventListener, options?: AddEventListenerOptions): void;
	/**
	 * Shorthand for custom event dispatch.
	 * @param {string} name Name of the event
	 * @param {any} detail Event detail data
	 * @param {boolean} [bubbles] Makes event bubble
	 * @param {EventTarget} [node] Event target override to dispatch the event from
	 */
	dispatchEvent(name: string, detail?: any, bubbles?: boolean, node?: EventTarget | IoNode): void;
	/**
	 * Disconnects all event listeners and removes all references for garbage collection.
	 * Use this when node is discarded.
	 */
	dispose(): void;
}
/**
 * Internal utility class that contains usefull information about class inheritance.
 * Inherited information is aggregated during prototype chain traversal in `RegisterIoNode()`.
 */
export declare class ProtoChain {
	readonly constructors: Array<IoNodeConstructor<any>>;
	readonly functions: Array<string>;
	readonly properties: {
		[property: string]: ProtoProperty;
	};
	readonly listeners: {
		[property: string]: ListenerDeclaration[];
	};
	readonly style: string;
	readonly observedObjectProperties: string[];
	/**
	 * Creates an instance of `ProtoChain` for specified class constructor.
	 * @param {IoNodeConstructor<any>} ioNodeConstructor - Owner `IoNode`-derived constructor.
	 */
	constructor(ioNodeConstructor: IoNodeConstructor<any>);
	/**
	 * Binds all auto-binding functions from the `.functions` array to specified `IoNode`-derived instance.
	 * @param {IoNode} node - `IoNode` instance to bind functions to.
	 */
	autobindFunctions(node: IoNode): void;
}
export declare type Constructor = new (...args: any[]) => unknown;
export interface IoNodeConstructor<T> {
	new (...args: any[]): T;
	Properties?: PropertyDeclarations;
	Listeners?: ListenersDeclaration;
	Style?: string;
}
export declare type CallbackFunction = (arg?: any) => void;
export declare type KeyboardEventListener = (event: KeyboardEvent) => void;
export declare type PointerEventListener = (event: PointerEvent) => void;
export declare type CustomEventListener = (event: CustomEvent) => void | EventListener;
export declare type FocusEventListener = (event: FocusEvent) => void;
export declare type TouchEventListener = (event: TouchEvent) => void;
export declare type AnyEventListener = EventListener | KeyboardEventListener | PointerEventListener | CustomEventListener | FocusEventListener | TouchEventListener;
/**
 * Core mixin for `Node` classes.
 * @param {function} superclass - Class to extend.
 * @return {function} - Extended class constructor with `IoNodeMixin` applied to it.
 */
export declare function IoNodeMixin<T extends IoNodeConstructor<any>>(superclass: T): {
	new (properties?: Record<string, any>, ...args: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		/**
		 * Sets the property value, connects the bindings and sets attributes for properties with attribute reflection enabled.
		 * @param {string} name Property name to set value of.
		 * @param {any} value Peroperty value.
		 * @param {boolean} [skipDispatch] flag to skip event dispatch.
		 */
		setProperty(name: string, value: any, skipDispatch?: boolean): void;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		applyProperties(props: any): void;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		setProperties(props: any): void;
		/**
		 * Sets value property and emits `value-input` event.
		 * Use this when value property is set by user action (e.g. mouse click).
		 * @param {*} value - Property value.
		 */
		inputValue(value: any): void;
		/**
		 * default change handler.
		 * Invoked when one of the properties change.
		 */
		changed(): void;
		init(): void;
		/**
		 * Adds property change to the queue.
		 * @param {string} prop - Property name.
		 * @param {*} value - Property value.
		 * @param {*} oldValue - Old property value.
		 */
		queue(prop: string, value: any, oldValue: any): void;
		/**
		 * Dispatches the queue in the next rAF cycle if `lazy` property is set. Otherwise it dispatches the queue immediately.
		 */
		dispatchQueue(): void;
		/**
		 * Dispatches the queue immediately.
		 */
		dispatchQueueSync: () => void;
		/**
		 * Throttles function execution to next frame (rAF) if the function has been executed in the current frame.
		 * @param {function} func - Function to throttle.
		 * @param {*} arg - argument for throttled function.
		 * @param {boolean} sync - execute immediately without rAF timeout.
		 */
		throttle(func: CallbackFunction, arg?: any, sync?: boolean): void;
		/**
		 * Event handler for 'object-mutated' event emitted from the `window`.
		 * Node should be listening for this event if it has an observed object property
		 * @param {Object} event - Event payload.
		 * @param {Object} event.detail.object - Mutated object.
		 */
		onObjectMutated: (event: CustomEvent) => void;
		/**
		 * This function is called after `onObjectMutated()` determines that one of
		 * the object properties has mutated.
		 * @param {string} prop - Mutated object property name.
		 */
		objectMutated: (prop: string) => void;
		/**
		 * Returns a binding to a specified property`.
		 * @param {string} prop - Property to bind to.
		 * @return {Binding} Binding object.
		 */
		bind(prop: string): Binding;
		/**
		 * Unbinds a binding to a specified property`.
		 * @param {string} prop - Property to unbind.
		 */
		unbind(prop: string): void;
		/**
		 * Wrapper for addEventListener.
		 * @param {string} type - listener name.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions): void;
		/**
		 * Wrapper for removeEventListener.
		 * @param {string} type - event name to listen to.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		removeEventListener(type: string, listener?: AnyEventListener, options?: AddEventListenerOptions): void;
		/**
		 * Wrapper for dispatchEvent.
		 * @param {string} type - event name to dispatch.
		 * @param {Object} detail - event detail.
		 * @param {boolean} bubbles - event bubbles.
		 * @param {HTMLElement|Node} src source node/element to dispatch event from.
		 */
		dispatchEvent(type: string, detail?: {}, bubbles?: boolean, src?: Node | HTMLElement | Document | Window): void;
		/**
		 * Disposes all internals.
		 * Use this when instance is no longer needed.
		 */
		dispose(): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDeclarations;
};
/**
 * Register function to be called once per class.
 * @param {IoNode} target - Node class to register.
 */
export declare function RegisterIoNode(target: typeof IoNode): void;
declare const IoNode_base: {
	new (properties?: Record<string, any>, ...args: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		/**
		 * Sets the property value, connects the bindings and sets attributes for properties with attribute reflection enabled.
		 * @param {string} name Property name to set value of.
		 * @param {any} value Peroperty value.
		 * @param {boolean} [skipDispatch] flag to skip event dispatch.
		 */
		setProperty(name: string, value: any, skipDispatch?: boolean | undefined): void;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		applyProperties(props: any): void;
		/**
		 * Sets multiple properties in batch.
		 * [property]-changed` events will be broadcast in the end.
		 * @param {Object} props - Map of property names and values.
		 */
		setProperties(props: any): void;
		/**
		 * Sets value property and emits `value-input` event.
		 * Use this when value property is set by user action (e.g. mouse click).
		 * @param {*} value - Property value.
		 */
		inputValue(value: any): void;
		/**
		 * default change handler.
		 * Invoked when one of the properties change.
		 */
		changed(): void;
		init(): void;
		/**
		 * Adds property change to the queue.
		 * @param {string} prop - Property name.
		 * @param {*} value - Property value.
		 * @param {*} oldValue - Old property value.
		 */
		queue(prop: string, value: any, oldValue: any): void;
		/**
		 * Dispatches the queue in the next rAF cycle if `lazy` property is set. Otherwise it dispatches the queue immediately.
		 */
		dispatchQueue(): void;
		/**
		 * Dispatches the queue immediately.
		 */
		dispatchQueueSync: () => void;
		/**
		 * Throttles function execution to next frame (rAF) if the function has been executed in the current frame.
		 * @param {function} func - Function to throttle.
		 * @param {*} arg - argument for throttled function.
		 * @param {boolean} sync - execute immediately without rAF timeout.
		 */
		throttle(func: CallbackFunction, arg?: any, sync?: boolean): void;
		/**
		 * Event handler for 'object-mutated' event emitted from the `window`.
		 * Node should be listening for this event if it has an observed object property
		 * @param {Object} event - Event payload.
		 * @param {Object} event.detail.object - Mutated object.
		 */
		onObjectMutated: (event: CustomEvent<any>) => void;
		/**
		 * This function is called after `onObjectMutated()` determines that one of
		 * the object properties has mutated.
		 * @param {string} prop - Mutated object property name.
		 */
		objectMutated: (prop: string) => void;
		/**
		 * Returns a binding to a specified property`.
		 * @param {string} prop - Property to bind to.
		 * @return {Binding} Binding object.
		 */
		bind(prop: string): Binding;
		/**
		 * Unbinds a binding to a specified property`.
		 * @param {string} prop - Property to unbind.
		 */
		unbind(prop: string): void;
		/**
		 * Wrapper for addEventListener.
		 * @param {string} type - listener name.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions | undefined): void;
		/**
		 * Wrapper for removeEventListener.
		 * @param {string} type - event name to listen to.
		 * @param {function} listener - listener handler.
		 * @param {Object} options - event listener options.
		 */
		removeEventListener(type: string, listener?: AnyEventListener | undefined, options?: AddEventListenerOptions | undefined): void;
		/**
		 * Wrapper for dispatchEvent.
		 * @param {string} type - event name to dispatch.
		 * @param {Object} detail - event detail.
		 * @param {boolean} bubbles - event bubbles.
		 * @param {HTMLElement|Node} src source node/element to dispatch event from.
		 */
		dispatchEvent(type: string, detail?: {}, bubbles?: boolean, src?: Node | Document | HTMLElement | Window | undefined): void;
		/**
		 * Disposes all internals.
		 * Use this when instance is no longer needed.
		 */
		dispose(): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDeclarations;
};
/**
 * IoNodeMixin applied to `Object` class.
 */
export declare class IoNode extends IoNode_base {
}
/**
 * Responsive property change FIFO queue.
 * Responsible for dispatching change events and invoking change handler functions with property change payloads.
 */
export declare class ChangeQueue {
	private readonly node;
	readonly changes: Array<Change>;
	hasChanged: boolean;
	dispatching: boolean;
	/**
	 * Creates change queue for the specified owner instance of `IoNode`.
	 * @param {IoNode} node - Owner node.
	 */
	constructor(node: IoNode);
	/**
	 * Adds property change payload to the queue by specifying property name, previous and the new value.
	 * If the change is already in the queue, the new value is updated in-queue.
	 * @param {string} property - Property name.
	 * @param {any} value Property value.
	 * @param {any} oldValue Old property value.
	 */
	queue(property: string, value: any, oldValue: any): void;
	/**
	 * Dispatches and clears the queue.
	 * For each property change in the queue:
	 *  - It fires the `'[propName]-changed'` `ChangeEvent` from the owner node with `Change` data as `event.detail`.
	 *  - It executes node's `[propName(change)` change handler function if it is defined.
	 * If owner node is not connected dispatch is aborted.
	 * After all changes are dispatched it invokes `.changed()` functions od the owner node instance.
	 */
	dispatch(): void;
	/**
	 * Clears the queue and removes the node reference.
	 * Use this when node queue is no longer needed.
	 */
	dispose(): void;
}
export interface Change {
	property: string;
	value: any;
	oldValue: any;
}
export interface ChangeEvent extends CustomEvent {
	readonly target: EventTarget;
	readonly detail: Change;
	readonly path: EventTarget[];
}
export declare type VDOMArray = [
	string,
	Record<string, any> | string | VDOMArray[]
] | [
	string,
	Record<string, any> | string,
	VDOMArray[] | string
];
export declare const buildTree: () => (node: VDOMArray) => any;
/**
 * Register function for `IoElement`. Registers custom element.
 * @param {IoElement} elementConstructor - Element class to register.
 */
export declare function RegisterIoElement(elementConstructor: typeof IoElement): void;
declare const IoElement_base: {
	new (properties?: Record<string, any>, ...args: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		setProperty(name: string, value: any, skipDispatch?: boolean | undefined): void;
		applyProperties(props: any): void;
		setProperties(props: any): void;
		inputValue(value: any): void;
		changed(): void;
		init(): void;
		queue(prop: string, value: any, oldValue: any): void;
		dispatchQueue(): void;
		dispatchQueueSync: () => void;
		throttle(func: CallbackFunction, arg?: any, sync?: boolean): void;
		onObjectMutated: (event: CustomEvent<any>) => void;
		objectMutated: (prop: string) => void;
		bind(prop: string): Binding;
		unbind(prop: string): void;
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions | undefined): void;
		removeEventListener(type: string, listener?: AnyEventListener | undefined, options?: AddEventListenerOptions | undefined): void;
		dispatchEvent(type: string, detail?: {}, bubbles?: boolean, src?: Node | Document | HTMLElement | Window | undefined): void;
		dispose(): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDeclarations;
};
/**
 * Core `IoElement` class.
 */
export declare class IoElement extends IoElement_base {
	static get Style(): string;
	$: Record<string, any>;
	tabindex: string;
	contenteditable: boolean;
	class: string;
	role: string;
	label: string;
	name: string;
	title: string;
	id: string;
	hidden: boolean;
	disabled: boolean;
	static get observedAttributes(): string[];
	attributeChangedCallback(prop: string, oldValue: any, newValue: any): void;
	/**
	* Add resize listener if `onResized()` is defined in subclass.
	*/
	connectedCallback(): void;
	/**
	* Removes resize listener if `onResized()` is defined in subclass.
	*/
	disconnectedCallback(): void;
	/**
	 * Renders DOM from virtual DOM arrays.
	 * @param {Array} vDOM - Array of vDOM children.
	 * @param {HTMLElement} [host] - Optional template target.
	 */
	template(vDOM: Array<any>, host?: HTMLElement): void;
	disposeDeep(host: HTMLElement, child: any): void;
	/**
	 * Recurively traverses vDOM.
	 * TODO: test element.traverse() function!
	 * @param {Array} vChildren - Array of vDOM children converted by `buildTree()` for easier parsing.
	 * @param {HTMLElement} [host] - Optional template target.
	 */
	traverse(vChildren: Array<any>, host: HTMLElement): void;
	/**
	* Helper function to flatten textContent into a single TextNode.
	* Update textContent via TextNode is better for layout performance.
	* @param {HTMLElement} element - Element to flatten.
	*/
	_flattenTextNode(element: HTMLElement | IoElement): void;
	get textNode(): any;
	set textNode(value: any);
	applyProperties(props: any): void;
	/**
	* Alias for HTMLElement setAttribute where falsey values remove the attribute.
	* @param {string} attr - Attribute name.
	* @param {*} value - Attribute value.
	*/
	setAttribute(attr: string, value: boolean | number | string): void;
	labelChanged(): void;
	disabledChanged(): void;
}
export interface StorageProps {
	key: string;
	value?: any;
	default?: any;
	storage?: "hash" | "local" | "none";
}
export declare class IoStorageNode extends IoNode {
	key: string;
	value: any;
	default: any;
	storage: "hash" | "local" | "none";
	binding: Binding;
	constructor(props: StorageProps);
	dispose(): void;
	_clearStorage(): void;
	valueChanged(): void;
	removeValueToHash(): void;
	saveValueToHash(): void;
}
export declare const IoStorage: {
	(props: StorageProps): Binding;
	parseHash(hash: string): Record<string, string>;
	getValueFromHash(key: string): any;
	updateAllFromHash(): void;
};
export declare class IoTheme extends IoElement {
	static get Style(): string;
	static get Properties(): PropertyDeclarations;
	lazy: boolean;
	persist: boolean;
	theme: string;
	init(): void;
	_toCss(rgba: number[]): string;
	reset(): void;
	themeChanged(): void;
	changed(): void;
}
export declare const IoThemeSingleton: IoTheme;
export declare type UniformTypes = BooleanConstructor | NumberConstructor | ArrayConstructor;
export declare class IoGl extends IoElement {
	static get Style(): string;
	size: [
		number,
		number
	];
	color: [
		number,
		number,
		number,
		number
	];
	pxRatio: number;
	theme: typeof IoThemeSingleton;
	static get Vert(): string;
	static get GlUtils(): string;
	static get Frag(): string;
	initPropertyUniform(name: string, property: PropertyDeclaration): string;
	initShader(): WebGLProgram;
	constructor(properties?: Record<string, any>);
	onResized(): void;
	themeMutated(): void;
	changed(): void;
	_onRender(): void;
	setShaderProgram(): void;
	updatePropertyUniform(name: string, property: PropertyInstance): void;
	updateThemeUniforms(): void;
	setUniform(name: string, type: UniformTypes, value: any): void;
}
export declare type NudgeDirection = "pointer" | "top" | "left" | "bottom" | "right";
export declare class IoLayer extends IoElement {
	static get Style(): string;
	expanded: boolean;
	skipCollapse: boolean;
	static get Listeners(): {
		pointerup: string;
		contextmenu: string;
		focusin: string;
		scroll: string;
		wheel: string;
		mousedown: string;
		mouseup: string;
		mousemove: string;
		touchstart: string;
		touchmove: string;
		touchend: string;
		keydown: string;
		keyup: string;
	};
	constructor(properties?: Record<string, any>);
	stopPropagation(event: Event): void;
	_onPointerup(event: PointerEvent): void;
	_onCollapse(): void;
	_onContextmenu(event: Event): void;
	_onFocusIn(event: FocusEvent): void;
	_onScroll(event: Event): void;
	nudgeDown(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgeUp(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgeRight(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgeLeft(element: HTMLElement, x: number, y: number, elemRect: DOMRect, force?: boolean): boolean;
	nudgePointer(element: HTMLElement, x: number, y: number, elemRect: DOMRect): boolean;
	setElementPosition(element: HTMLElement, direction: NudgeDirection, srcRect: DOMRect): void;
	appendChild(child: HTMLElement): void;
	removeChild(child: HTMLElement): void;
	onChildExpanded(): void;
	onChildExpandedDelayed(): void;
	expandedChanged(): void;
}
export declare const IoLayerSingleton: IoLayer;
export declare class Path extends IoNode {
	static get Properties(): {
		value: ArrayConstructor;
		string: StringConstructor;
		root: null;
		leaf: null;
		delimiter: string;
	};
	constructor(...args: any[]);
	valueChanged(): void;
	onMutation(): void;
	update(): void;
	stringChanged(): void;
	rootChanged(): void;
	leafChanged(): void;
}
declare const Options_base: {
	new (properties?: Record<string, any>, ...args: any[]): {
		[x: string]: any;
		readonly _protochain: ProtoChain;
		readonly _properties: Map<string, PropertyInstance>;
		readonly _bindings: Map<string, Binding>;
		readonly _changeQueue: ChangeQueue;
		readonly _eventDispatcher: EventDispatcher;
		setProperty(name: string, value: any, skipDispatch?: boolean | undefined): void;
		applyProperties(props: any): void;
		setProperties(props: any): void;
		inputValue(value: any): void;
		changed(): void;
		init(): void;
		queue(prop: string, value: any, oldValue: any): void;
		dispatchQueue(): void;
		dispatchQueueSync: () => void;
		throttle(func: CallbackFunction, arg?: any, sync?: boolean): void;
		onObjectMutated: (event: CustomEvent<any>) => void;
		objectMutated: (prop: string) => void;
		bind(prop: string): Binding;
		unbind(prop: string): void;
		addEventListener(type: string, listener: AnyEventListener, options?: AddEventListenerOptions | undefined): void;
		removeEventListener(type: string, listener?: AnyEventListener | undefined, options?: AddEventListenerOptions | undefined): void;
		dispatchEvent(type: string, detail?: {}, bubbles?: boolean, src?: Node | Document | HTMLElement | Window | undefined): void;
		dispose(): void;
	};
	[x: string]: any;
	readonly Properties: PropertyDeclarations;
};
export declare class Options extends Options_base {
	static get Properties(): {
		items: {
			type: ArrayConstructor;
		};
		path: {
			type: typeof Path;
		};
		lazy: boolean;
	};
	constructor(options?: Array<Item | any>, props?: {});
	option(value: any): any;
	pathChanged(): void;
	onItemSelectedPathChanged(event: any): void;
	onItemSelectedChanged(event: any): void;
	setSelectedPath(path?: any[]): void;
	selectDefault(): boolean;
	changed(): void;
}
export declare class Item extends IoNode {
	static get Properties(): {
		value: undefined;
		label: string;
		icon: string;
		hint: string;
		action: undefined;
		select: string;
		selected: BooleanConstructor;
		path: {
			type: typeof Path;
		};
		options: {
			type: typeof Options;
		};
	};
	constructor(option: any);
	get hasmore(): boolean;
	option(value: any): any;
	onOptionsSelectedPathChanged(): void;
	optionsChanged(): void;
	selectedChanged(): void;
	setSelectedPath(selected: any, path?: any[]): void;
	changed(): void;
}
export declare class IoLabel extends IoElement {
	static get Style(): string;
	labelChanged(): void;
}
export declare class IoField extends IoElement {
	static get Style(): string;
	tabindex: string;
	value: any;
	icon: string;
	stroke: boolean;
	reverse: boolean;
	selected: boolean;
	static get Listeners(): {
		"focus-to": string;
		focus: string;
		pointerdown: string;
		click: string;
	};
	_onFocus(event: FocusEvent): void;
	_onBlur(event: FocusEvent): void;
	_onPointerdown(event: PointerEvent): void;
	_onPointermove(event: PointerEvent): void;
	_onPointerleave(event: PointerEvent): void;
	_onPointerup(event: PointerEvent): void;
	_onClick(): void;
	_onKeydown(event: KeyboardEvent): void;
	_onKeyup(event: KeyboardEvent): void;
	_onFocusTo(event: CustomEvent): void;
	focusTo(dir: string): void;
	getCaretPosition(): number;
	setCaretPosition(position: number): void;
	changed(): void;
}
export declare class IoButton extends IoField {
	static get Style(): string;
	action?: any;
	value: any;
	pressed: boolean;
	role: string;
	_onPointerdown(event: PointerEvent): void;
	_onPointerleave(event: PointerEvent): void;
	_onPointerup(event: PointerEvent): void;
	_onKeydown(event: KeyboardEvent): void;
	_onKeyup(event: KeyboardEvent): void;
	_onClick(): void;
	init(): void;
	changed(): void;
}
export declare class IoBoolean extends IoField {
	value: boolean;
	true: string;
	false: string;
	role: string;
	_onClick(): void;
	toggle(): void;
	init(): void;
	changed(): void;
}
export declare class IoSwitch extends IoBoolean {
	static get Style(): string;
	init(): void;
	changed(): void;
	valueChanged(): void;
}
export declare class IoString extends IoField {
	static get Style(): string;
	live: boolean;
	value: string;
	contenteditable: boolean;
	role: string;
	_setFromTextNode(): void;
	_tryParseFromTextNode(): void;
	_onBlur(event: FocusEvent): void;
	_onPointerdown(): void;
	_onPointermove(): void;
	_onPointerup(): void;
	_onKeyup(event: KeyboardEvent): void;
	_onKeydown(event: KeyboardEvent): void;
	changed(): void;
	valueChanged(): void;
}
export declare class IoNumber extends IoField {
	static get Style(): string;
	role: string;
	value: number;
	conversion: number;
	step: number;
	min: number;
	max: number;
	ladder: boolean;
	contenteditable: boolean;
	type: string;
	pattern: string;
	inputmode: string;
	spellcheck: string;
	constructor(properties?: Record<string, any>);
	_onPointerdown(event: PointerEvent): void;
	_onPointerup(event: PointerEvent): void;
	_onFocus(event: FocusEvent): void;
	_onBlur(event: FocusEvent): void;
	_expandLadder(): void;
	_onKeydown(event: KeyboardEvent): void;
	_onKeyup(event: KeyboardEvent): void;
	_setFromTextNode(): void;
	init(): void;
	changed(): void;
}
export declare class IoNumberLadderStep extends IoField {
	static get Style(): string;
	value: number;
	type: string;
	role: string;
	_onKeydown(event: KeyboardEvent): void;
	_onPointerdown(event: PointerEvent): void;
	_onPointermove(event: PointerEvent): void;
	_onPointerup(event: PointerEvent): void;
	init(): void;
	changed(): void;
}
export declare class IoNumberLadder extends IoElement {
	static get Style(): string;
	role: string;
	src: any;
	expanded: boolean;
	static get Listeners(): {
		"ladder-step-change": string;
		"ladder-step-collapse": string;
		focusin: string;
	};
	get value(): any;
	get min(): any;
	get max(): any;
	get step(): any;
	get conversion(): any;
	_onFocusIn(event: FocusEvent): void;
	_onFocusTo(event: CustomEvent): void;
	_onLadderStepChange(event: CustomEvent): void;
	_onLadderStepCollapse(): void;
	expandedChanged(): void;
	changed(): void;
}
export declare const IoNumberLadderSingleton: IoNumberLadder;
export declare class IoIcon extends IoElement {
	static get Style(): string;
	icon: string;
	stroke: boolean;
	iconChanged(): void;
}
export declare class IoIconset extends IoNode {
	registerIcons(name: string, svg: string): void;
	getIcon(icon: string): string;
}
export declare const IoIconsetSingleton: IoIconset;
export declare class IoColorBase extends IoElement {
	value: {
		r: number;
		g: number;
		b: number;
		a?: number;
	};
	rgb: [
		number,
		number,
		number
	];
	hsv: [
		number,
		number,
		number
	];
	hsl: [
		number,
		number,
		number
	];
	cmyk: [
		number,
		number,
		number,
		number
	];
	init(): void;
	valueMutated(): void;
	rgbFromHsv(): void;
	rgbFromHsl(): void;
	rgbFromCmyk(): void;
	valueFromRgb(): void;
	valueChanged(): void;
}
declare class IoSliderBase extends IoGl {
	static get Style(): string;
	value: number | [
		number,
		number
	] | {
		x: number;
		y: number;
	};
	step: number | [
		number,
		number
	] | {
		x: number;
		y: number;
	};
	min: number | [
		number,
		number
	] | {
		x: number;
		y: number;
	};
	max: number | [
		number,
		number
	] | {
		x: number;
		y: number;
	};
	exponent: number;
	vertical: boolean;
	color: [
		number,
		number,
		number,
		number
	];
	noscroll: boolean;
	role: string;
	tabindex: string;
	lazy: boolean;
	_startX: number;
	_startY: number;
	_active: boolean;
	get _min(): [
		number,
		number
	];
	get _max(): [
		number,
		number
	];
	get _step(): [
		number,
		number
	];
	get _value(): [
		number,
		number
	];
	static get Listeners(): {
		focus: string;
		contextmenu: string;
		pointerdown: string;
		touchstart: string;
	};
	_onFocus(): void;
	_onBlur(): void;
	_onContextmenu(event: Event): void;
	_onTouchstart(event: TouchEvent): void;
	_onTouchmove(event: TouchEvent): void;
	_onTouchend(): void;
	_onPointerdown(event: PointerEvent): void;
	_onPointermove(event: PointerEvent): void;
	_onPointerup(event: PointerEvent): void;
	_getPointerCoord(event: PointerEvent): [
		number,
		number
	];
	_getValueFromCoord(coord: [
		number,
		number
	]): [
		number,
		number
	];
	_onPointermoveThrottled(event: PointerEvent): void;
	_inputValue(value: [
		number,
		number
	]): void;
	_onKeydown(event: KeyboardEvent): void;
	_setIncrease(): void;
	_setDecrease(): void;
	_setMin(): void;
	_setMax(): void;
	_setUp(): void;
	_setDown(): void;
	_setLeft(): void;
	_setRight(): void;
	init(): void;
	changed(): void;
}
export declare class IoSlider extends IoSliderBase {
	value: number;
	step: number;
	min: number;
	max: number;
	static get GlUtils(): string;
	static get Frag(): string;
}
export declare class IoSlider2d extends IoSliderBase {
	static get Style(): string;
	value: [
		number,
		number
	];
	step: [
		number,
		number
	];
	min: [
		number,
		number
	];
	max: [
		number,
		number
	];
	static get GlUtils(): string;
	static get Frag(): string;
}
export declare class IoColorSlider extends IoColorBase {
	static get Style(): string;
	channel: string;
	vertical: boolean;
	_onValueInput(event: CustomEvent): void;
	changed(): void;
}
export declare class IoColorSliderBase extends IoSlider {
	static get GlUtils(): string;
	static get Frag(): string;
}
export declare class IoColorSlider2dBase extends IoSlider2d {
	static get GlUtils(): string;
	static get Frag(): string;
}
export declare class IoColorSliderR extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderG extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderB extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderA extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderH extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderS extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderV extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderL extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderC extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderM extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderY extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderK extends IoColorSliderBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderHs extends IoColorSlider2dBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderSv extends IoColorSlider2dBase {
	static get GlUtils(): string;
}
export declare class IoColorSliderSL extends IoColorSlider2dBase {
	static get GlUtils(): string;
}
export declare class IoColorPanel extends IoColorBase {
	static get Style(): string;
	expanded: boolean;
	vertical: boolean;
	static get Listeners(): {
		keydown: string;
	};
	_onKeydown(event: KeyboardEvent): void;
	onValueSet(): void;
	changed(): void;
}
export declare const IoColorPanelSingleton: IoColorPanel;
export declare class IoColorSwatch extends IoColorBase {
	static get Style(): string;
	valueChanged(): void;
}
export declare class IoColorPicker extends IoElement {
	static get Style(): string;
	value: {
		r: number;
		g: number;
		b: number;
		a?: number;
	};
	static get Listeners(): any;
	tabindex: string;
	_onClick(event: FocusEvent): void;
	get expanded(): boolean;
	_onKeydown(event: KeyboardEvent): void;
	_onValueSet(): void;
	toggle(): void;
	expand(): void;
	collapse(): void;
	changed(): void;
}
export declare class IoColorRgba extends IoColorBase {
	static get Style(): string;
	_onValueInput(event: CustomEvent): void;
	changed(): void;
}
export declare class IoMdView extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	onResized(): void;
	parseMarkdown(markdown: string): void;
	pathChanged(): void;
}
export declare class IoSelector extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	static get Listeners(): {
		scroll: (string | {
			capture: boolean;
			passive: boolean;
		})[];
		"content-ready": string;
	};
	constructor(props?: any);
	_selectDefault(): void;
	_onIoContentReady(event: CustomEvent): void;
	connectedCallback(): void;
	scrollTo(id: string, smooth?: boolean): void;
	_onScroll(): void;
	selectedChanged(): void;
	optionsChanged(): void;
	elementsChanged(): void;
	updateScroll(): void;
	getSlotted(): any;
	importModule(path: string): Promise<unknown>;
	update(): void;
}
export declare class IoSidebar extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	_filterObject(object: any, predicate: (object: any) => boolean, _depth?: number, _chain?: any[], _i?: number): any;
	_onSelect(id: string): void;
	_addOptions(options: any): any;
	changed(): void;
}
export declare class IoSelectorSidebar extends IoSelector {
	static get Style(): string;
	static get Properties(): any;
	getSlotted(): (string | {
		selected: Binding;
		options: any;
		collapsed: any;
	})[];
}
export declare class IoMdViewSelector extends IoSelectorSidebar {
	static get Properties(): any;
	update(): void;
}
export declare class IoServiceLoader extends IoNode {
	static get Properties(): any;
	constructor(props?: any);
	activate(): Promise<void>;
	serviceWorkerChanged(): void;
	subscribe(): void;
	requestNotification(): Promise<void>;
	onServiceWorkerMessage(message: any): void;
}
export declare class IoElementDemo extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	objectMutated: (prop: string) => void;
	changed(): void;
}
export declare class IoLayout extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	static get Listeners(): {
		"io-layout-divider-move": string;
		"io-layout-tab-insert": string;
	};
	_onSelectedChanged(): void;
	changed(): void;
	_onLayoutTabInsert(event: CustomEvent): void;
	_onDividerMove(event: CustomEvent): void;
}
export declare class IoContent extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	changed(): void;
}
export declare class IoCollapsable extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	changed(): void;
}
export declare class IoSelectorTabs extends IoSelector {
	static get Style(): string;
	static get Properties(): any;
	getSlotted(): any;
}
export declare class IoVector extends IoElement {
	static get Style(): string;
	value: {
		x: number;
		y: number;
		z?: number;
		w?: number;
	} | number[];
	conversion: number;
	step: number;
	min: number;
	max: number;
	linkable: boolean;
	linked: boolean;
	ladder: boolean;
	keys: Array<keyof typeof this.value>;
	private _ratios;
	_onNumberPointerDown(event: PointerEvent): void;
	_onNumberValueInput(event: CustomEvent): void;
	valueChanged(): void;
	changed(): void;
	getSlotted(): Array<any> | null;
}
export declare class IoMatrix extends IoVector {
	static get Style(): string;
	value: number[];
	columns: number;
	_onNumberValueInput(event: CustomEvent): void;
	valueChanged(): void;
}
export declare class IoMenuItem extends IoField {
	static get Style(): string;
	static get Properties(): any;
	static get Listeners(): any;
	_option?: Item;
	preventDefault(event: Event): void;
	get hasmore(): any;
	get inlayer(): any;
	connectedCallback(): void;
	disconnectedCallback(): void;
	_onClick(): void;
	_onItemClicked(event: PointerEvent): void;
	_onPointerdown(event: PointerEvent): void;
	_onPointermove(event: PointerEvent): void;
	_gethovered(event: PointerEvent): any;
	_expandHovered(): void;
	_onLayerPointermove(event: PointerEvent): void;
	_onLayerPointerup(event: PointerEvent): void;
	_onPointerup(event: PointerEvent): void;
	_onKeydown(event: KeyboardEvent): void;
	_onCollapse(): void;
	_onCollapseRoot(): void;
	expandedChanged(): void;
	optionChanged(change: CustomEvent): void;
	onOptionChanged(): void;
	changed(): void;
}
export declare class IoMenuOptions extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	static get Listeners(): {
		"item-clicked": string;
		touchstart: string;
	};
	connectedCallback(): void;
	_onItemClicked(event: CustomEvent): void;
	_stopPropagation(event: MouseEvent): void;
	_onCollapse(): void;
	expandedChanged(): void;
	searchChanged(): void;
	_onExpandedChangedLazy(): void;
	_clipHeight(): void;
	_filterOptions(object: any, predicate: (object: any) => boolean, _depth?: number, _chain?: any[], _i?: number): any;
	get _options(): any;
	changed(): void;
}
export declare class IoOptionMenu extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	get _label(): string;
	_onPathChanged(event: CustomEvent): void;
	changed(): void;
}
export declare class IoContextMenu extends IoElement {
	static get Properties(): any;
	connectedCallback(): void;
	disconnectedCallback(): void;
	getBoundingClientRect(): any;
	_onItemClicked(event: CustomEvent): void;
	_onContextmenu(event: MouseEvent): void;
	_onPointerdown(event: PointerEvent): void;
	_onPointermove(event: PointerEvent): void;
	_onPointerup(event: PointerEvent): void;
	_onLayerPointermove(event: PointerEvent): void;
	_onClick(event: MouseEvent): void;
	_onCollapse(): void;
	expandedChanged(): void;
}
export declare class IoNotify extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	static get Listeners(): {};
	constructor(props?: any);
	_onAgree(event: CustomEvent): void;
	_onDisgree(): void;
}
export declare class IoInspector extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	static get Listeners(): {
		"item-clicked": string;
	};
	constructor(props?: any);
	_onItemClicked(event: CustomEvent): void;
	valueChanged(): void;
	advancedChanged(): void;
	selectedMutated(): void;
	_getConfig(): void;
	_getGroups(): void;
	_getWidgets(): void;
	_getAll(): void;
	changed(): void;
	_onhangedThrCottle(): void;
	_onChange(): void;
	static get Config(): {
		"type:object": (string | {
			class: string;
		})[];
		"type:null": (string | {
			class: string;
		})[];
	};
	static get Groups(): {
		"Object|hidden": RegExp[];
		"HTMLElement|main": (string | RegExp)[];
		"HTMLElement|hidden": (string | RegExp)[];
		"HTMLElement|content": RegExp[];
		"HTMLElement|display": RegExp[];
		"HTMLElement|hierarchy": RegExp[];
	};
	static get Widgets(): {};
	static RegisterConfig: (config: any) => void;
	static RegisterGroups: (groups: any) => void;
	static RegisterWidgets: (widgets: any) => void;
	static Register(): void;
}
export declare class IoProperties extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	static get Config(): {
		"type:string": {}[];
		"type:number": (string | {
			step: number;
		})[];
		"type:boolean": {}[];
		"type:object": {}[];
		"type:null": {}[];
		"type:undefined": {}[];
	};
	_onValueSet(event: CustomEvent): void;
	_getConfig(): any;
	valueMutated(): void;
	changed(): void;
	_changedThrottled(): void;
	_onChange(): void;
	static RegisterConfig: (config: any) => void;
}
export declare class IoObject extends IoElement {
	static get Style(): string;
	static get Properties(): any;
	changed(): void;
}
export declare class IoSliderRange extends IoSliderBase {
	value: [
		number,
		number
	];
	step: number;
	min: number;
	max: number;
	_index: number;
	_getCoordFromValue(value: [
		number,
		number
	]): number[];
	_onPointerdown(event: PointerEvent): void;
	_onPointermoveThrottled(event: PointerEvent): void;
	static get GlUtils(): string;
	static get Frag(): string;
}
export declare class IoNumberSliderRange extends IoElement {
	static get Style(): string;
	value: [
		number,
		number
	];
	step: number;
	min: number;
	max: number;
	exponent: number;
	conversion: number;
	_onNumberSet(event: CustomEvent): void;
	_onSliderSet(event: CustomEvent): void;
	init(): void;
	changed(): void;
}
export declare class IoNumberSlider extends IoElement {
	static get Style(): string;
	value: number;
	step: number;
	min: number;
	max: number;
	exponent: number;
	conversion: number;
	_onNumberSet(event: CustomEvent): void;
	_onSliderSet(event: CustomEvent): void;
	init(): void;
	changed(): void;
}
/** @License
 * Copyright ©2022 Aleksandar (Aki) Rodic
 *
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
export declare const LICENSE = "MIT";

export {};
